syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

    
message StockPositionRecordV5 {
    message PKey {
        
        TickerKey ticker = 10;
        string accnt = 11;
        DateKey trade_date = 12;
        RiskSession risk_session = 13;
    }

    message CorpAction_V7 {
        
        TickerKey ticker_eOD__v7 = 5027; // only V7
        int32 stk_eod_pos_sR__v7 = 5028; // only V7
        double stk_eod_mark_sR__v7 = 5029; // only V7
        double split_ratio__v7 = 5030; // only V7
        double cash_per_unit__v7 = 5031; // only V7
        int64 ex_as_trans_id__v7 = 5032; // only V7
        int32 stk_ex_as_eod_pos_sR__v7 = 5033; // only V7
        double stk_ex_as_eod_value_sR__v7 = 5034; // only V7
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR assigned client firm
    string risk_server_code = 103;
    string pri_agg_group = 106; // primary aggregation group
    string sec_agg_group = 109; // secondary aggregation group
    SymbolType symbol_type = 112;
    float tick_value = 115; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 118; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 121;
    PriceFormat price_format = 124; // price display format code
    float stk_prc = 127; // current stock price (any market session) (persists if market closed/halted)
    float stk_bid = 130; // current stock bid (any market session) (zero if market closed/halted)
    float stk_ask = 133; // current stock ask (any market session) (zero if market closed/halted)
    double stk_mark = 136; // current stock mark (freezes at SR CloseMarkTime)
    MarkErrorCode stk_mark_err_codes = 139;
    UMarkSource stk_mark_source = 142;
    double stk_opn_mid_mark = 145; // start-of-day SR stock mark (rotated from prior day record) [corp action adjusted]
    double stk_opn_clr_mark = 148; // start-of-day CLR stock mark (supplied by client/clearing firm via clearing position load) [should be corp action adjusted]
    int32 stk_opn_pos_prv = 151; // start-of-day SR share position (rotated from prior day record) [corp action adjusted]
    int32 stk_opn_pos_clr = 154; // start-of-day CLR share position (supplied by client/clearing firm via clearing position load) [should be corp action adjusted]
    int32 stk_opn_pos = 157; // start of period share position (effective; can be from either CLR or SR)
    PositionSource stk_opn_pos_src = 160; // start of period position source
    int32 sh_bot = 163; // number of shares bot today
    int32 sh_sld = 166; // number of shares sld today
    int32 sh_sld_shrt = 169; // number of shares sld short today
    int32 sh_bot_hdg = 172; // number of shares bot today from hedging (spdrSource=HedgeTool)
    int32 sh_sld_hdg = 175; // number of shares sld today from hedging (spdrSource=HedgeTool)
    int32 sh_bot_trh = 178; // number of shares bot today from hedging (spdrSource=TradeHedge)
    int32 sh_sld_trh = 181; // number of shares sld today from hedging (spdrSource=TradeHedge)
    int32 sh_bot_opn = 184; // number of shares bot today from hedging (spdrSource=OpenHedge)
    int32 sh_sld_opn = 187; // number of shares sld today from hedging (spdrSource=OpenHedge)
    int32 sh_bot_trd = 190; // number of shares bot today from any trade hedging source (AutoHedge or Trades loop)
    int32 sh_sld_trd = 193; // number of shares sld today from any trade hedging source (AutoHedge or Trades loop)
    double stk_mny_bot = 196; // sum of settle cash for all buy executions
    double stk_mny_sld = 199; // sum of settle cash for all sell executions
    float day_pnl = 202;
    float opn_pnl_mid_mark = 205;
    float opn_pnl_clr_mark = 208;
    float ex_div_amt = 211; // amount of any dividend going ex today
    float borrow_rate = 214; // overnight rate required to borrow stock (if known)
    float beta = 217; // beta (usually beta to SPX; see AccountConfig.betaSource)
    BetaSource beta_source = 220;
    int32 num_executions = 223; // number of included SpdrParentExecution records
    google.protobuf.Timestamp max_exec_dttm = 226; // max (timestamp) of included SpdrParentExecution records
    google.protobuf.Timestamp timestamp = 229;
    google.protobuf.Timestamp start_of_period__v7 = 5000; // only V7
    google.protobuf.Timestamp end_of_period__v7 = 5001; // only V7
    RiskServerCode_V7 risk_server_code__v7 = 5002; // only v7: Field name [riskServerCode] matched but type did not: string != enum
    string rollup_accnt__v7 = 5003; // only V7
    float stk_mark_override__v7 = 5004; // only V7
    float opn_div_pn_l__v7 = 5005; // only V7
    float opn_htb_pn_l__v7 = 5006; // only V7
    double stk_eod_net_value_clr__v7 = 5007; // only V7
    double stk_eod_net_value_sR__v7 = 5008; // only V7
    double stk_cAValue_sR__v7 = 5009; // only V7
    int64 ex_as_trans_id__v7 = 5010; // only V7
    int32 stk_ex_as_sod_pos_sR__v7 = 5011; // only V7
    double stk_ex_as_sod_value_sR__v7 = 5012; // only V7
    double stk_borrow_value_clr__v7 = 5013; // only V7
    int64 corp_action_id__v7 = 5014; // only V7
    CorpActionType_V7 corp_action_type__v7 = 5015; // only v7: enum values do not match with v8: V7[None=0,CashDividend=1,StockDividend=2,StockSplitNonInt=3,ReverseStockSplit=4,StockSplit=5,Merger=6,RightsOffering=7,Spinoff=8,TenderOffer=9,SymbolConversion=10,Other=11], V8[Does Not Exist]
    int32 stk_cn_bot_clr__v7 = 5016; // only V7
    int32 stk_cn_sld_clr__v7 = 5017; // only V7
    double stk_mny_bot_clr__v7 = 5018; // only V7
    double stk_mny_sld_clr__v7 = 5019; // only V7
    int32 stk_cn_bot_sR__v7 = 5020; // only V7
    int32 stk_cn_sld_sR__v7 = 5021; // only V7
    double stk_mny_bot_sR__v7 = 5022; // only V7
    double stk_mny_sld_sR__v7 = 5023; // only V7
    double stk_tod_mark_clr__v7 = 5024; // only V7
    double stk_tod_mark_sR__v7 = 5025; // only V7
    repeated CorpAction_V7 corp_action__v7 = 5026;
}


