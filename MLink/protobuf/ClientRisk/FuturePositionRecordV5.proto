syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

    
message FuturePositionRecordV5 {
    message PKey {
        
        ExpiryKey fkey = 10;
        string accnt = 11;
        DateKey trade_date = 12;
        RiskSession risk_session = 13;
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // SR assigned client firm
    string risk_server_code = 103;
    string agg_group = 106; // SR assigned aggregation group
    TickerKey ticker = 109; // underlying ticker
    int32 underliers_per_cn = 112; // number of underlying units per futures contract
    UnderlierType underlier_type = 115;
    float tick_value = 118; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 121; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 124;
    PriceFormat price_format = 127; // price display format code
    double fut_prc = 130; // current future price (any market session) (persists if market closed/halted)
    double fut_bid = 133; // current future bid (any market session) (zero if market closed/halted)
    double fut_ask = 136; // current future ask (any market session) (zero if market closed/halted)
    double fut_mark = 139; // current mark (usually mid market) (freezes at SR CloseMarkTime)
    MarkErrorCode fut_mark_err_codes = 142;
    UMarkSource fut_mark_source = 145;
    double fut_opn_mid_mark = 148; // start of day SR mark
    double fut_opn_clr_mark = 151; // start of day clearing mark (usually exchange settlement mark)
    int32 fut_opn_pos_prv = 154; // start-of-day SR contract position (rotated from prior day record)
    int32 fut_opn_pos_clr = 157; // start-of-day CKR contract position (supplied by client/clearing firm via clearing position load)
    int32 fut_opn_pos = 160; // start of period contract position (effective; can be from either CLR or SR)
    PositionSource fut_opn_pos_src = 163; // start of period position source
    int32 cn_bot = 166; // number of contracts bot today
    int32 cn_sld = 169; // number of contracts sld today
    int32 cn_bot_trd = 172; // number of contracts bot today
    int32 cn_sld_trd = 175; // number of contracts sld today
    int32 cn_bot_hdg = 178; // number of contracts bot today from open pos hedging (spdrSource=HedgeTool)
    int32 cn_sld_hdg = 181; // number of contracts sld today from open pos hedging (spdrSource=HedgeTool)
    int32 cn_bot_trh = 184; // number of contracts bot today from open pos hedging (spdrSource=TradeHedge)
    int32 cn_sld_trh = 187; // number of contracts sld today from open pos hedging (spdrSource=TradeHedge)
    int32 cn_bot_opn = 190; // number of contracts bot today from open pos hedging (spdrSource=OpenHedge)
    int32 cn_sld_opn = 193; // number of contracts sld today from open pos hedging (spdrSource=OpenHedge)
    int32 cn_opened = 196; // number of contracts opened today
    int32 cn_closed = 199; // number of contracts closed today
    double fut_mny_bot = 202; // sum of settle cash for all buy executions
    double fut_mny_sld = 205; // sum of settle cash for all sell executions
    float day_pnl = 208;
    float opn_pnl_mid_mark = 211;
    float opn_pnl_clr_mark = 214;
    float beta = 217; // beta (usually beta to SPX; see AccountConfig.betaSource) (if applicable)
    BetaSource beta_source = 220;
    int32 days = 223; // days to expiration
    float rate = 226; // global rate to expiration
    float years = 229; // years to expiration
    float rh = 232; // rho; (dPrc / dRate) - only for STIR futures
    float ve = 235; // vega; (dPrc / dVol) - only for VIX futures
    float rate_pr = 238; // start of period global rate
    float years_pr = 241; // start of period years to expiration
    int32 num_executions = 244; // number of included SpdrParentExecution records
    google.protobuf.Timestamp max_exec_dttm = 247; // maximum activity dttm of execution records included in this future risk record
    google.protobuf.Timestamp timestamp = 250;
    google.protobuf.Timestamp start_of_period__v7 = 5000; // only V7
    google.protobuf.Timestamp end_of_period__v7 = 5001; // only V7
    RiskServerCode_V7 risk_server_code__v7 = 5002; // only v7: Field name [riskServerCode] matched but type did not: string != enum
    string rollup_accnt__v7 = 5003; // only V7
    float fut_mark_override__v7 = 5004; // only V7
    float sum_mny_bot__v7 = 5005; // only V7: Field name [futMnyBot] matched but type did not: double != float
    float sum_mny_sld__v7 = 5006; // only V7: Field name [futMnySld] matched but type did not: double != float
    int64 ex_as_trans_id__v7 = 5007; // only V7
    int32 fut_ex_as_sod_pos_sR__v7 = 5008; // only V7
    double fut_ex_as_sod_value_sR__v7 = 5009; // only V7
    double fut_settle_pn_l__v7 = 5010; // only V7
    int32 fut_cn_bot_clr__v7 = 5011; // only V7
    int32 fut_cn_sld_clr__v7 = 5012; // only V7
    double fut_mny_bot_clr__v7 = 5013; // only V7
    double fut_mny_sld_clr__v7 = 5014; // only V7
    int32 fut_cn_bot_sR__v7 = 5015; // only V7
    int32 fut_cn_sld_sR__v7 = 5016; // only V7
    double fut_mny_bot_sR__v7 = 5017; // only V7
    double fut_mny_sld_sR__v7 = 5018; // only V7
    double fut_tod_mark_clr__v7 = 5019; // only V7
    double fut_tod_mark_sR__v7 = 5020; // only V7
}


