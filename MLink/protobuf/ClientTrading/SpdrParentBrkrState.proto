syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

    
message SpdrParentBrkrState {
    message PKey {
        
        string accnt = 10;
        OptionKey sec_key = 11;
        SpdrKeyType sec_type = 12;
        SpdrSource spdr_source = 13;
        int64 grouping_code = 14;
        BuySell order_side = 15;
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    string user_name = 100; // SR user name string
    string client_firm = 103; // SR client firm string
    int64 parent_number = 106; // SR parent number
    int64 base_parent_number = 109;
    int64 risk_group_id = 112; // all orders with the same riskGroupId share a common set of risk counters;.Grp. risk limits apply to these shared counters
    int64 trigger_group_id = 115;
    string strategy = 118; // parent order strategy string (can be user supplied)
    string alt_order_id = 121; // alternate order ID (usually clOrdId from client)
    int64 package_id = 124; // groups related order/brokers together (eg. Legger w/MLeg Parent)
    string alt_accnt = 127; // alternate (client assigned) "long" account string (optional)
    string alt_user_name = 130; // alternate (client assigned) user name (optional)
    SpdrStageType stage_type = 133; // parent is a staged order [StageLock, StageModify, StageReview]
    YesNo is_flagged = 136; // broker state records is flagged for action (user alert only)
    TickerKey ticker = 139; // underlier ticker
    double u_prc = 142; // underlier price (usually mid-market)
    double u_prc_order = 145; // underlier price at the time of last parent order arrival
    double nbbo_bid = 148; // current option nbbo bid (at time of record publish)
    double nbbo_ask = 151; // current option nbbo ask (at time of record publish)
    int32 nbbo_bid_sz = 154; // current option nbbo cum bid size (at time of record publish)
    int32 nbbo_ask_sz = 157; // current option nbbo cum ask size (at time of record publish)
    float surface_prc = 160; // SR surface price @ record publish
    float surface_vol = 163; // SR surface volatility @ record publish
    float order_ref_sDiv = 166;
    RefSDivType order_ref_sDiv_type = 169;
    SpdrBrokerStatus spdr_broker_status = 172;
    SpdrOrderStatus spdr_order_status = 175; // status of the most recent parent order handled by this broker
    SpdrCloseReason spdr_close_reason = 178; // close reason of most recent parent order
    SpdrRejectReason spdr_reject_reason = 181; // reject reason (if any) of most recent parent order
    YesNo is_permanently_closed = 184; // indicates that this broker is permanently closed (cannot be cxl/replaced or re-opened) [auto-hedge orders only]
    int32 num_extern_risk_hold = 187; // num external risk management rejects received
    string last_extern_risk_text = 190; // last external (exch?) risk management reject
    google.protobuf.Timestamp last_extern_risk_reject = 193;
    string spdr_comment = 196;
    int32 order_size = 199; // order size of most recent parent order
    int32 order_active_size = 202; // total activated size (total size released for execution) (-1 = all available size)
    google.protobuf.Timestamp update_dttm = 205;
    google.protobuf.Timestamp good_till_dttm = 208; // [expected] order expiration date/time (most recent parent order in cxl/replace chain)
    int32 leaves_quantity = 211; // current child order leaves quantity (quantity actively working in the market;all child orders)
    double avg_fill_price = 214; // average fill price
    double avg_fill_uPrice = 217; // average fill underlier price
    int32 cum_fill_quantity = 220; // cumulative fill quantity
    float avg_fill_vol = 223; // average fill volatility
    float cum_fill_vega = 226; // cumulative fill vega
    float cum_fill_theta = 229; // cumulative fill theta
    float cum_fill_dDelta = 232; // cumulative fill $Delta
    float cum_exch_fee = 235; // cumulative fill exch fee
    float cum_m10_pnl = 238;
    float cum_arrival_pnl = 241;
    google.protobuf.Timestamp last_fill_dttm = 244;
    int32 risk_limit_size = 256; // risk limit size (maximum size to nearest risk limit)
    SpdrRisk risk_limit_desc = 259; // reason for size reduction
    double limit_price = 262; // simple limit
    LimitError limit_err = 265;
    string limit_err_desc = 268;
    float best_limit_offset = 271; // (possible price improvement) (gap between best price and init/limit price) (Face/Matrix orders)
    float make_prob_limit = 274;
    float make_surf_offset = 277;
    double make_limit_price = 280; // make limit
    LimitError make_limit_err = 283;
    float take_prob_limit = 286;
    float take_surf_offset = 289;
    double take_limit_price = 292; // take limit
    LimitError take_limit_err = 295;
    AutoHedge auto_hedge = 298;
    HedgeInst hedge_instrument = 301; // auto-hedge instrument (from parent order)
    ExpiryKey hedge_sec_key = 304; // auto-hedge sec key (if any)
    SpdrKeyType hedge_sec_type = 307; // auto-hedge sec type (Stock or Future)
    float hedge_beta_ratio = 310; // auto-hedge ratio [from parent order (if supplied) or computed by SR]
    HedgeScope hedge_scope = 313; // hedge group scope [RiskGroup or Accnt]
    TimeInForce hedge_tIF = 316; // time in force for the autohedge order (can be Day or ExtDay) [None defaults to pOrder.timeInForce]
    string extern_hedge_ex_dest = 319; // external broker exDest (only used if orderHandling=Extern)			# Should match FixRoutingTable.destination type (eg. #Nighthawk)
    string extern_hedge_params = 322; // external algo names/parameters (usually just an algo name)			# usually copied from the FixRoutingTable.externParams
    string user_data1 = 325; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    string user_data2 = 328; // client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    MaxProgress max_progress = 331; // maximum point of progress for most recent parent order
    string max_progress_detail = 334; // additional detail on point of maximum progress
    google.protobuf.Timestamp max_progress_time = 337; // time of last max progress advance
    BrokerState broker_state = 340; // broker monitor state
    int32 broker_counter = 343; // number of times order checked by broker monitor (note: most checks result in no action)]
    AlgoState make_state = 346; // [enum] current state of non-marketable order handler (maker)
    int32 make_counter = 349; // number of times order checked by post handler (note: most checks result in no action)
    AlgoState take_state = 352; // [enum] current state of marketable order handler (taker)
    int32 take_counter = 355; // number of times order checked by take handler (note: most checks result in no action)
    MktRespState mkt_resp_state = 358; // [enum] current state of response handler (if any)
    int32 mkt_resp_counter = 361; // number of times order checked by market response handler (note: most checks result in no action)
    MktCrossState mkt_cross_state = 364; // [enum] current state of mkt cross handler (if any)
    int32 mkt_cross_counter = 367; // number of times order checked by market cross handler (note: most checks result in no action)
    string progress_rule_detail = 370; // Twap/Vwap progress detail
    ChildEvent last_child_event = 373; // [enum] last event code from broker/child order handler(s)
    google.protobuf.Timestamp last_child_reject_dttm = 376; // last child order reject dttm (if any)
    string last_child_reject_text = 379; // last child order reject reason/text (if any)
    SpdrMarketState spdr_mkt_state = 382; // [enum] market state
    float cpx1 = 385; // child price level #1
    int32 csz1 = 388; // cumulative size represented at this price
    uint32 cex1 = 391; // bit mask of all exchanges where we are at this price
    int32 cnt1 = 394; // number of child orders at price level #1
    float cpx2 = 397; // child price level #2
    int32 csz2 = 400; // cumulative size represented at this price
    uint32 cex2 = 403; // bit mask of all exchanges where we are at this price
    int32 cnt2 = 406; // number of child orders at price level #2
    int32 c_more = 409; // number of additional child orders at inferior prices (if any)
    string expiry_key = 412;
    float cn_vol = 415;
    float cn_yrs = 418;
    float cn_uPrc = 421;
    float cn_de = 424; // delta per contract
    float cn_dd = 427; // $delta per contract
    float cn_ve = 430; // vega per contract
    float cn_ga = 433;
    float cn_th = 436;
    float cn_pr = 439; // premium per contract
    float dd_mult = 442;
    PriceFormat price_format = 445; // option price format code
    PriceFormat u_price_format = 448; // underlier price format code
    int32 underliers_per_cn = 451; // option delivery underliers per contract
    UnderlierType underlier_type = 454; // type of underlier (affects $greek calculations)
    float tick_value = 457; // $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    float point_value = 460; // $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    Currency point_currency = 463;
    float net_acc_day_wt_vega = 466; // net (+/-) account day wtVega;cumulative day wtVega (vol * vega / sqrt(T)) for the account this broker is associated with
    float net_acc_day_dDelta = 469; // net (+/-) account day $delta;cumulative day $delta (stock, future, option) for the account this broker is associated with
    float net_exp_day_wt_vega = 472; // net (+/-) expiration day wtVega;cumulative weighted vega (vol * vega / sqrt(T)) for the ticker+expiration this broker is associated with
    float net_exp_day_rMetric6 = 475; // net (+/-) expiration day RMetric6;cumulative weighted Rm6 for the ticker+expiration this broker is associated with
    float net_sym_day_wt_vega = 478; // net (+/-) symbol day (time weighted) vega;cumulative wt vega (options only) for the ticker+account this broker is associated with
    float net_sym_day_dDelta = 481; // net (+/-) symbol day $delta;cumulative $delta (stock, futures, options) for the ticker+account this broker is associated with
    float net_sym_day_rMetric7 = 484; // net (+/-) symbol day RMetric7;cumulative Rm7 (stock, futures, options) for the ticker+account this broker is associated with
    float net_grp_day_vega = 487; // net (+/-) day risk group vega;cumulative (options) for the riskGroupId+account this broker is associated with
    float net_grp_day_dDelta = 490; // net (+/-) day risk group $delta;cumulative (stock, futures, options) for the riskGroupId+account this broker is associated with
    float net_grp_day_premium = 493; // net (+/-) day risk group premium over parity;cumulative (options) for the riskGroupId+account this broker is associated with
    int32 net_grp_day_contracts = 496; // net (+/-) day risk group contracts;cumulative (futures, options) for the riskGroupId+account this broker is associated with
    float net_grp_rMetric1 = 499; // net (+/-) day risk group rmetric1;cumulative (options) for the riskGroupId+account this broker is associated with
    float net_grp_rMetric2 = 502; // net (+/-) day risk group rmetric2;cumulative (options) for the riskGroupId+account this broker is associated with
    float net_grp_rMetric3 = 505; // net (+/-) day risk group rmetric3;cumulative (options) for the riskGroupId+account this broker is associated with
    float net_grp_rMetric4 = 508; // net (+/-) day risk group rmetric4;cumulative (options) for the riskGroupId+account this broker is associated with
    float net_grp_rMetric5 = 511; // net (+/-) day risk group rmetric5;cumulative (options) for the riskGroupId+account this broker is associated with
    float net_sym_ema_cxl_dDelta = 514; // acct+symbol 60s EMA $delta risk counter (options only)
    float net_sym_ema_cxl_wt_vega = 517; // acct+symbol 60s EMA wtVega risk counter
    float theo_vol = 520;
    float theo_prc = 523;
    int32 num_new_orders = 526; // number of child orders generated by this broker (all parent orders)
    uint32 num_parent_limits = 529; // number of parent limit messages received for this broker
    float broker_vwap_mark = 532; // trade weighted average price (duration of parent order)
    float broker_vwap_uMark = 535; // option-trade weighted average underlier price (duration of parent order)
    float broker_qwap_mark = 538; // average quote mid-market (duration of parent order)
    float broker_qwap_uMark = 541; // average underlier quote mid-market (duration of parent order)
    float vwap_pn_l = 544; // dir * qty * (brokerVwapMark - avgFillPrice)
    float vwap_dn_pn_l = 547; // vwapPnL - uDriftVwapPnL
    float u_drift_vwap_pn_l = 550; // (dir * (de * qty * (brokerVwapUMark - avgFillUPrice)))
    float qwap_pn_l = 553; // dir * qty * (brokerQwapMark - avgFillPrice)
    float qwap_dn_pn_l = 556; // qwapPnL - uDriftQwapPnL
    float u_drift_qwap_pn_l = 559; // (dir * (de * qty * (brokerQwapUMark - avgFillUPrice)))
    int32 num_imprv_chld = 562; // number of child orders that improved an existing market
    float active_seconds = 565; // number of seconds that the parent order was active
    float with_seconds = 568; // number of seconds with one or more working child orders that are with of nbbo
    float alone_seconds = 571; // number of seconds with one or more working child orders that make up 100% of nbbo
    float working_seconds = 574; // number of child order seconds (can be greater than activeSeconds if working on more than one exchange)
    int32 num_risk_cancels = 577; // number of child orders cancels for risk reasons
    float risk_hold_seconds = 580; // number of seconds with parent order active but on risk hold (zero child order risk size)
    float risk_thrtl_seconds = 583; // number of seconds with parent order active but in risk throttle condition (temporary hold after fast/mass risk cancel)
    int32 num_make_throttle_skips = 586; // number of childs orders not send to market dues to outbound lines being in a queued/throttled state
    float sum_make_throttle_delay = 589; // cumulative seconds of queue skip delay (seconds that a child order was not in the market dues to outbound lines being in a queued/throttled state)
    UpdateSource update_src = 592;
    int32 num_updates = 595; // number of record updates (cumulative for the day)
    google.protobuf.Timestamp timestamp = 598; // SR system timestamp
}


