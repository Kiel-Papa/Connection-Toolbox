syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

    
message UserConfig {
    message PKey {
        
        string user_name = 10; // SR UserName Handle
    }

    message AccountAccessControl {
        
        string accnt = 154;
        AccountAccessType access_type = 157;
    }

    message CitrixProductControl {
        
        CitrixProductCode product_code = 256;
        google.protobuf.Timestamp expires = 259; // must exist (can be 2100-01-01)
    }

    message ClientFirmViewAccess {
        
        string client_firm = 145;
        google.protobuf.Timestamp expires = 148; // must exist (can be 2100-01-01)
    }

    message MLinkControl {
        
        MLinkToken token = 337;
        google.protobuf.Timestamp expires = 340; // must exist (can be 2100-01-01)
        StkExch stk_exch = 343; // None = ANY (only applies to message types with OptExch control fields)
        FutExch fut_exch = 346; // None = ANY
        OptExch opt_exch = 349; // None = ANY
    }

    message MarketDataControl {
        
        MarketDataToken token = 355; // market data billing authorities (either external or internally controlled for billing purposes)
        MarketDataScope scope = 358; // controls whether market data access is live or delayed
        MktDataClass classification = 361;
        google.protobuf.Timestamp expires = 364; // must exists (can be 2100-01-01)
    }

    message SrseHistoricalControl {
        
        SrseProductCode product_code = 292;
        google.protobuf.Timestamp expires = 295; // must exist (can be 2100-01-01)
    }

    message SrseProductControl {
        
        SrseProductCode product_code = 283;
        google.protobuf.Timestamp expires = 286; // must exist (can be 2100-01-01)
    }

    message WebProductControl {
        
        WebProductToken token = 325;
        google.protobuf.Timestamp expires = 328; // must exist (can be 2100-01-01)
        string value = 331; // billing code/coupon (eg. FREE)
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    string client_firm = 100; // [custom:ClientFirm] client firm this user is associated with (can be Sponsor, Core, or Sub)
    UserType user_type = 103; // [custom:UserType] (active users only)
    UserStatus user_status = 106; // [custom:UserStatus]
    google.protobuf.Timestamp user_status_dttm = 109; // The Date/Time this users status was last changed/updated
    YesNo user_to_be_frozen = 112; // If the user is to be frozen when date to be frozen is reached
    google.protobuf.Timestamp user_to_be_frozen_dttm = 115; // The dateTime the user is to be frozen	if to be froz flag is set to Yes
    UserAuthAction user_auth_action = 118; // used between a tool and an mlink server (SendInvite will go through the QR Code setup process)
    UserAuthState user_auth_state = 121; // view only (should not be modified)
    string user_auth_error = 124;
    google.protobuf.Timestamp last_invite_timestamp = 127;
    google.protobuf.Timestamp last_accept_timestamp = 130;
    string description = 133; // User record comment/description (if any)
    SRTimeZone display_time_zone = 136; // [custom:UserTimeZone] User timezone (affects date/time display in Tools)
    LogAmount mlink_activity_logging = 139; // Amount of user activity logging/archiving for MLink products. Complete --> Log Everything, Partial --> Take samples, None --> No non-error logging
    ConfigAccess client_config_access = 160; // user can create new (pending approval) or edit existing client configuration records (SRAdmin, SponsorAdmin, ClientAdmin, or SRUser (any sysenv))
    AccountTypeControl account_type_control = 163;
    OrderAccess order_access = 166;
    YesNo can_cancel_live_orders = 169; // user can cancel live orders (implied false for SRUsers, implied true for SRAdmin, SponsorAdmin, ClientAdmin, and users that can enter live orders)
    UserStageType user_stage_type = 172;
    YesNo can_edit_mar_risk = 175;
    YesNo can_edit_mar_restricted_list = 178;
    YesNo can_edit_supervisory_risk = 181;
    YesNo can_edit_stock_locate_list = 184;
    string display_name = 187; // [custom:UserDisplayName] User display name
    string contact_email = 190; // Contact Email Address (reset password email)
    string contact_phone = 193; // Contact Phone Number (SMS Text #)
    string contact_slack = 196; // Contact Slack Handle
    string contact_ice_chat = 199; // Contact ICE Handle
    string contact_bBerg_handle = 202; // Contact Bloomberg Handle (BBGID)
    AuthType auth_type = 205; // type of user logon allowed
    string auth_extern_name = 208; // eg.  CorpName
    string auth_extern_params = 211; // eg. 'https://corp.domain.com:xxxx'
    string default_accnt = 214; // default account for this user (used as a tool default/setting); ignored if not viewable; if missing then default is the 1st accnt in the viewable list (alpha order)
    string alt_user_name = 217; // alternate (client supplied) user name (usually for client system integration)
    string cme_trader_id = 220; // CME assigned trader ID (if any)
    string cme_location = 223; // For CME. The traders location is required.  Format example:  US,IL
    string cfe_trader_id = 226; // CFE assigned trader ID (if any)
    string cfe_frequent_trader_id = 229; // CFE frequent trader ID (if any)
    string cfe_location = 232; // CFE trader location (required)
    string ice_trader_id = 235; // ICE assigned trader ID (if any)
    string ice_password = 238; // ICE assigned password (if any)
    string ice_company_id = 241; // ICE Company Id of trader (if any)
    string cboe_trader_id = 244; // Cboe assigned trader ID (if any)
    YesNo firm_pos_visibility = 247; // Controls whether user sees the firm position in the SV's widget
    YesNo allow_random_strategy = 250; // SV Widget Control
    ToolServerCode tool_server_code = 262; // needs to match -toolServerCode on the tool server this user is assigned to.
    string tool_server_host = 265; // note: this will override auto detection of a server via toolServerCode
    int32 tool_server_port = 268; // eg, 5240 V7SP, 5440 V7SD, 5640 SV7SB, 6240 V7LP, 6440 V7LPB
    YesNo tools_auto_shutdown = 271; // Controls whether tools should auto-shutdown (this should be controled by SR)
    google.protobuf.Duration tools_auto_shutdown_time = 274; // Tools will shut down at this time if toolsAutoShutdown = Yes (can be overriden by user)
    string srse_pwd_hash = 277; // MySQL password hash (used in launch_srse.py)
    int32 srse_num_cores = 298; // maximum number of simultaneous (active) SRSE queries [0,1,2 ..., 10] [default=1] (note: 0=reject all SRSE queries)
    int32 srse_max_connects_per_day = 301; // maximum number of user SRSE connections per day [default=500]
    int32 srse_max_concurrent_connects = 304; // maximum number of concurrent SRSE connections [default=5] (note: SRSE has a global max of 100 simultaneous connections per user)
    int32 srse_max_row_cache = 307; // maximum number of rows allowed to be used from the row cache
    int32 srse_max_new_orders = 310; // maximum number of new parent orders (per day) that can be inserted via SRSE (0=NONE) [default = 500,000]
    int32 srse_max_new_orders_per_sec = 313; // maximum number of new parent orders (per second; 4 second burst) that can be inserted via SRSE (0=NONE) [default = 250]
    int32 srse_max_new_orders_per_statement = 316; // maximum number of new parent orders (per SQL statement) that can be inserted via SRSE (0=NONE) [default = 1,000]
    string badges = 319; // exchange memembership and badge ids.  CFEFUT:BADGE1,NYSESTK:BADGE2,...
    CognitoSync cognito_sync = 367;
    google.protobuf.Timestamp cognito_reset_dttm = 370; // [custom:CognitoResetDttm] last reset dttm (if this value is greater than the value in custom:cognitoResetDttm then delete/recreate cognito user record)
    string api_key = 373; // API access key (SR supplied; guid; plain text; HEX:32+4) (includes dashes) (can be reset/regenerated as needed)
    google.protobuf.Timestamp api_key_expires = 376; // API access key expiration
    string password_hash = 379; // user password (client supplied; optional; hashed value; HEX representation; SHA-256)
    google.protobuf.Timestamp password_expires = 382; // user password expiration
    string temp_password_hash = 385; // temporary user password hash (SR supplied; can only be used to change password)
    google.protobuf.Timestamp temp_password_expires = 388; // temporary user password expiration
    int32 temp_password_counter = 391; // we allow temporary passwords to be change a limited number of times
    string mfa_secret = 394; // MFA Secret (SR supplied; guid; plain text; HEX:32+4) (includes dashes) (can be reset/regenerated as needed)
    string modified_by = 397; // [custom:ModifiedBy] user who last modified this record
    SysEnvironment modified_in = 400;
    google.protobuf.Timestamp timestamp = 403; // [custom:LastModified] timestamp of last modification
    string client_firm_list__v7 = 5000; // only V7
    string billing_firm__v7 = 5001; // only V7
    string first_name__v7 = 5002; // only V7
    string last_name__v7 = 5003; // only V7
    string trader_id__v7 = 5004; // only V7
    string ice_trader_id__v7 = 5005; // only V7
    string ice_password__v7 = 5006; // only V7
    string ice_company_id__v7 = 5007; // only V7
    string sr_access_hash__v7 = 5008; // only V7
    string exec_username__v7 = 5009; // only V7
    string user_group__v7 = 5010; // only V7
    string accnt_list__v7 = 5011; // only V7
    YesNo view_inactive__v7 = 5012; // only v7 - enum values match with v8
    string tool_product_acl__v7 = 5013; // only V7
    string elastic_product_acl__v7 = 5014; // only V7
    string market_data_acl__v7 = 5015; // only V7
    string srse_product_acl__v7 = 5016; // only V7
    string srse_historical_acl__v7 = 5017; // only V7
    string contact_iM__v7 = 5018; // only V7
    repeated AccountAccessControl account_access_control = 151;
    repeated CitrixProductControl citrix_product_control = 253;
    repeated ClientFirmViewAccess client_firm_view_access = 142;
    repeated MLinkControl m_link_control = 334;
    repeated MarketDataControl market_data_control = 352;
    repeated SrseHistoricalControl srse_historical_control = 289;
    repeated SrseProductControl srse_product_control = 280;
    repeated WebProductControl web_product_control = 322;
}


