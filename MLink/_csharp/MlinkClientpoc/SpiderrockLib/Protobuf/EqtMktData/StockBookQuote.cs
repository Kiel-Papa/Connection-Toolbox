// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/EqtMktData/StockBookQuote.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/EqtMktData/StockBookQuote.proto</summary>
  public static partial class StockBookQuoteReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/EqtMktData/StockBookQuote.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StockBookQuoteReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CihQcm90b2J1Zi9FcXRNa3REYXRhL1N0b2NrQm9va1F1b3RlLnByb3RvEhNz",
            "cGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5wcm90byKd",
            "BgoOU3RvY2tCb29rUXVvdGUSMwoFX21ldGEYASABKAsyJC5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLk1lc3NhZ2VNZXRhZGF0YRI2CgRwa2V5GAIgASgLMiguc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5TdG9ja0Jvb2tRdW90ZS5QS2V5EjQKC3VwZGF0",
            "ZV90eXBlGGQgASgOMh8uc3BpZGVycm9jay5wcm90b2J1Zi5VcGRhdGVUeXBl",
            "EjgKDW1hcmtldF9zdGF0dXMYZyABKA4yIS5zcGlkZXJyb2NrLnByb3RvYnVm",
            "Lk1hcmtldFN0YXR1cxISCgpiaWRfcHJpY2UxGGogASgCEhEKCWJpZF9zaXpl",
            "MRhtIAEoBRIvCgliaWRfZXhjaDEYcCABKA4yHC5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLlN0a0V4Y2gSEQoJYmlkX21hc2sxGHMgASgNEhIKCmFza19wcmljZTEY",
            "diABKAISEQoJYXNrX3NpemUxGHkgASgFEi8KCWFza19leGNoMRh8IAEoDjIc",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuU3RrRXhjaBIRCglhc2tfbWFzazEYfyAB",
            "KA0SEwoKYmlkX3ByaWNlMhiCASABKAISEgoJYmlkX3NpemUyGIUBIAEoBRIw",
            "CgliaWRfZXhjaDIYiAEgASgOMhwuc3BpZGVycm9jay5wcm90b2J1Zi5TdGtF",
            "eGNoEhIKCWJpZF9tYXNrMhiLASABKA0SEwoKYXNrX3ByaWNlMhiOASABKAIS",
            "EgoJYXNrX3NpemUyGJEBIAEoBRIwCglhc2tfZXhjaDIYlAEgASgOMhwuc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5TdGtFeGNoEhIKCWFza19tYXNrMhiXASABKA0S",
            "EgoJaGFsdF9tYXNrGJoBIAEoDRIWCg1zcmNfdGltZXN0YW1wGJ0BIAEoAxIW",
            "Cg1uZXRfdGltZXN0YW1wGKABIAEoAxo2CgRQS2V5Ei4KBnRpY2tlchgKIAEo",
            "CzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.StockBookQuote), global::Spiderrock.Protobuf.StockBookQuote.Parser, new[]{ "Meta", "Pkey", "UpdateType", "MarketStatus", "BidPrice1", "BidSize1", "BidExch1", "BidMask1", "AskPrice1", "AskSize1", "AskExch1", "AskMask1", "BidPrice2", "BidSize2", "BidExch2", "BidMask2", "AskPrice2", "AskSize2", "AskExch2", "AskMask2", "HaltMask", "SrcTimestamp", "NetTimestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.StockBookQuote.Types.PKey), global::Spiderrock.Protobuf.StockBookQuote.Types.PKey.Parser, new[]{ "Ticker" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///This table contains live equity quote records for all CQS/UQDF securities as well as US OTC equity securities, SpiderRock synthetic markets, and a number of major indexes.  Each record contains up to two price levels and represents a live snapshot of the book for a specific market.
  /// </summary>
  public sealed partial class StockBookQuote : pb::IMessage<StockBookQuote>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StockBookQuote> _parser = new pb::MessageParser<StockBookQuote>(() => new StockBookQuote());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StockBookQuote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.StockBookQuoteReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StockBookQuote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StockBookQuote(StockBookQuote other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      updateType_ = other.updateType_;
      marketStatus_ = other.marketStatus_;
      bidPrice1_ = other.bidPrice1_;
      bidSize1_ = other.bidSize1_;
      bidExch1_ = other.bidExch1_;
      bidMask1_ = other.bidMask1_;
      askPrice1_ = other.askPrice1_;
      askSize1_ = other.askSize1_;
      askExch1_ = other.askExch1_;
      askMask1_ = other.askMask1_;
      bidPrice2_ = other.bidPrice2_;
      bidSize2_ = other.bidSize2_;
      bidExch2_ = other.bidExch2_;
      bidMask2_ = other.bidMask2_;
      askPrice2_ = other.askPrice2_;
      askSize2_ = other.askSize2_;
      askExch2_ = other.askExch2_;
      askMask2_ = other.askMask2_;
      haltMask_ = other.haltMask_;
      srcTimestamp_ = other.srcTimestamp_;
      netTimestamp_ = other.netTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StockBookQuote Clone() {
      return new StockBookQuote(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.StockBookQuote.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StockBookQuote.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "update_type" field.</summary>
    public const int UpdateTypeFieldNumber = 100;
    private global::Spiderrock.Protobuf.UpdateType updateType_ = global::Spiderrock.Protobuf.UpdateType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UpdateType UpdateType {
      get { return updateType_; }
      set {
        updateType_ = value;
      }
    }

    /// <summary>Field number for the "market_status" field.</summary>
    public const int MarketStatusFieldNumber = 103;
    private global::Spiderrock.Protobuf.MarketStatus marketStatus_ = global::Spiderrock.Protobuf.MarketStatus.Unspecified;
    /// <summary>
    /// market status (open, halted, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarketStatus MarketStatus {
      get { return marketStatus_; }
      set {
        marketStatus_ = value;
      }
    }

    /// <summary>Field number for the "bid_price1" field.</summary>
    public const int BidPrice1FieldNumber = 106;
    private float bidPrice1_;
    /// <summary>
    /// bid price for best price level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BidPrice1 {
      get { return bidPrice1_; }
      set {
        bidPrice1_ = value;
      }
    }

    /// <summary>Field number for the "bid_size1" field.</summary>
    public const int BidSize1FieldNumber = 109;
    private int bidSize1_;
    /// <summary>
    /// bid size for best price level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BidSize1 {
      get { return bidSize1_; }
      set {
        bidSize1_ = value;
      }
    }

    /// <summary>Field number for the "bid_exch1" field.</summary>
    public const int BidExch1FieldNumber = 112;
    private global::Spiderrock.Protobuf.StkExch bidExch1_ = global::Spiderrock.Protobuf.StkExch.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StkExch BidExch1 {
      get { return bidExch1_; }
      set {
        bidExch1_ = value;
      }
    }

    /// <summary>Field number for the "bid_mask1" field.</summary>
    public const int BidMask1FieldNumber = 115;
    private uint bidMask1_;
    /// <summary>
    /// bid exchange bit mask for best bid price level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BidMask1 {
      get { return bidMask1_; }
      set {
        bidMask1_ = value;
      }
    }

    /// <summary>Field number for the "ask_price1" field.</summary>
    public const int AskPrice1FieldNumber = 118;
    private float askPrice1_;
    /// <summary>
    /// ask price for best price level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AskPrice1 {
      get { return askPrice1_; }
      set {
        askPrice1_ = value;
      }
    }

    /// <summary>Field number for the "ask_size1" field.</summary>
    public const int AskSize1FieldNumber = 121;
    private int askSize1_;
    /// <summary>
    /// ask size for best price level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AskSize1 {
      get { return askSize1_; }
      set {
        askSize1_ = value;
      }
    }

    /// <summary>Field number for the "ask_exch1" field.</summary>
    public const int AskExch1FieldNumber = 124;
    private global::Spiderrock.Protobuf.StkExch askExch1_ = global::Spiderrock.Protobuf.StkExch.Unspecified;
    /// <summary>
    /// exchange
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StkExch AskExch1 {
      get { return askExch1_; }
      set {
        askExch1_ = value;
      }
    }

    /// <summary>Field number for the "ask_mask1" field.</summary>
    public const int AskMask1FieldNumber = 127;
    private uint askMask1_;
    /// <summary>
    /// ask exchange bit mask for best ask price level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AskMask1 {
      get { return askMask1_; }
      set {
        askMask1_ = value;
      }
    }

    /// <summary>Field number for the "bid_price2" field.</summary>
    public const int BidPrice2FieldNumber = 130;
    private float bidPrice2_;
    /// <summary>
    /// bid price for next best price level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BidPrice2 {
      get { return bidPrice2_; }
      set {
        bidPrice2_ = value;
      }
    }

    /// <summary>Field number for the "bid_size2" field.</summary>
    public const int BidSize2FieldNumber = 133;
    private int bidSize2_;
    /// <summary>
    /// bid size for next best price level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BidSize2 {
      get { return bidSize2_; }
      set {
        bidSize2_ = value;
      }
    }

    /// <summary>Field number for the "bid_exch2" field.</summary>
    public const int BidExch2FieldNumber = 136;
    private global::Spiderrock.Protobuf.StkExch bidExch2_ = global::Spiderrock.Protobuf.StkExch.Unspecified;
    /// <summary>
    /// exchange
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StkExch BidExch2 {
      get { return bidExch2_; }
      set {
        bidExch2_ = value;
      }
    }

    /// <summary>Field number for the "bid_mask2" field.</summary>
    public const int BidMask2FieldNumber = 139;
    private uint bidMask2_;
    /// <summary>
    /// bid exchange bit mask for next best bid price level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BidMask2 {
      get { return bidMask2_; }
      set {
        bidMask2_ = value;
      }
    }

    /// <summary>Field number for the "ask_price2" field.</summary>
    public const int AskPrice2FieldNumber = 142;
    private float askPrice2_;
    /// <summary>
    /// ask price for next best price level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AskPrice2 {
      get { return askPrice2_; }
      set {
        askPrice2_ = value;
      }
    }

    /// <summary>Field number for the "ask_size2" field.</summary>
    public const int AskSize2FieldNumber = 145;
    private int askSize2_;
    /// <summary>
    /// ask size for next best price level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AskSize2 {
      get { return askSize2_; }
      set {
        askSize2_ = value;
      }
    }

    /// <summary>Field number for the "ask_exch2" field.</summary>
    public const int AskExch2FieldNumber = 148;
    private global::Spiderrock.Protobuf.StkExch askExch2_ = global::Spiderrock.Protobuf.StkExch.Unspecified;
    /// <summary>
    /// exchange
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StkExch AskExch2 {
      get { return askExch2_; }
      set {
        askExch2_ = value;
      }
    }

    /// <summary>Field number for the "ask_mask2" field.</summary>
    public const int AskMask2FieldNumber = 151;
    private uint askMask2_;
    /// <summary>
    /// ask exchange bit mask for next best ask price level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AskMask2 {
      get { return askMask2_; }
      set {
        askMask2_ = value;
      }
    }

    /// <summary>Field number for the "halt_mask" field.</summary>
    public const int HaltMaskFieldNumber = 154;
    private uint haltMask_;
    /// <summary>
    /// bit mask of halted exchanges
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint HaltMask {
      get { return haltMask_; }
      set {
        haltMask_ = value;
      }
    }

    /// <summary>Field number for the "src_timestamp" field.</summary>
    public const int SrcTimestampFieldNumber = 157;
    private long srcTimestamp_;
    /// <summary>
    /// source high precision timestamp (if available)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SrcTimestamp {
      get { return srcTimestamp_; }
      set {
        srcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "net_timestamp" field.</summary>
    public const int NetTimestampFieldNumber = 160;
    private long netTimestamp_;
    /// <summary>
    /// inbound packet PTP timestamp from SR gateway switch;usually syncronized with facility grandfather clock
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NetTimestamp {
      get { return netTimestamp_; }
      set {
        netTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StockBookQuote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StockBookQuote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (UpdateType != other.UpdateType) return false;
      if (MarketStatus != other.MarketStatus) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidPrice1, other.BidPrice1)) return false;
      if (BidSize1 != other.BidSize1) return false;
      if (BidExch1 != other.BidExch1) return false;
      if (BidMask1 != other.BidMask1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskPrice1, other.AskPrice1)) return false;
      if (AskSize1 != other.AskSize1) return false;
      if (AskExch1 != other.AskExch1) return false;
      if (AskMask1 != other.AskMask1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidPrice2, other.BidPrice2)) return false;
      if (BidSize2 != other.BidSize2) return false;
      if (BidExch2 != other.BidExch2) return false;
      if (BidMask2 != other.BidMask2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskPrice2, other.AskPrice2)) return false;
      if (AskSize2 != other.AskSize2) return false;
      if (AskExch2 != other.AskExch2) return false;
      if (AskMask2 != other.AskMask2) return false;
      if (HaltMask != other.HaltMask) return false;
      if (SrcTimestamp != other.SrcTimestamp) return false;
      if (NetTimestamp != other.NetTimestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (UpdateType != global::Spiderrock.Protobuf.UpdateType.Unspecified) hash ^= UpdateType.GetHashCode();
      if (MarketStatus != global::Spiderrock.Protobuf.MarketStatus.Unspecified) hash ^= MarketStatus.GetHashCode();
      if (BidPrice1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidPrice1);
      if (BidSize1 != 0) hash ^= BidSize1.GetHashCode();
      if (BidExch1 != global::Spiderrock.Protobuf.StkExch.Unspecified) hash ^= BidExch1.GetHashCode();
      if (BidMask1 != 0) hash ^= BidMask1.GetHashCode();
      if (AskPrice1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskPrice1);
      if (AskSize1 != 0) hash ^= AskSize1.GetHashCode();
      if (AskExch1 != global::Spiderrock.Protobuf.StkExch.Unspecified) hash ^= AskExch1.GetHashCode();
      if (AskMask1 != 0) hash ^= AskMask1.GetHashCode();
      if (BidPrice2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidPrice2);
      if (BidSize2 != 0) hash ^= BidSize2.GetHashCode();
      if (BidExch2 != global::Spiderrock.Protobuf.StkExch.Unspecified) hash ^= BidExch2.GetHashCode();
      if (BidMask2 != 0) hash ^= BidMask2.GetHashCode();
      if (AskPrice2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskPrice2);
      if (AskSize2 != 0) hash ^= AskSize2.GetHashCode();
      if (AskExch2 != global::Spiderrock.Protobuf.StkExch.Unspecified) hash ^= AskExch2.GetHashCode();
      if (AskMask2 != 0) hash ^= AskMask2.GetHashCode();
      if (HaltMask != 0) hash ^= HaltMask.GetHashCode();
      if (SrcTimestamp != 0L) hash ^= SrcTimestamp.GetHashCode();
      if (NetTimestamp != 0L) hash ^= NetTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (UpdateType != global::Spiderrock.Protobuf.UpdateType.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) UpdateType);
      }
      if (MarketStatus != global::Spiderrock.Protobuf.MarketStatus.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) MarketStatus);
      }
      if (BidPrice1 != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(BidPrice1);
      }
      if (BidSize1 != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(BidSize1);
      }
      if (BidExch1 != global::Spiderrock.Protobuf.StkExch.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) BidExch1);
      }
      if (BidMask1 != 0) {
        output.WriteRawTag(152, 7);
        output.WriteUInt32(BidMask1);
      }
      if (AskPrice1 != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(AskPrice1);
      }
      if (AskSize1 != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(AskSize1);
      }
      if (AskExch1 != global::Spiderrock.Protobuf.StkExch.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) AskExch1);
      }
      if (AskMask1 != 0) {
        output.WriteRawTag(248, 7);
        output.WriteUInt32(AskMask1);
      }
      if (BidPrice2 != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(BidPrice2);
      }
      if (BidSize2 != 0) {
        output.WriteRawTag(168, 8);
        output.WriteInt32(BidSize2);
      }
      if (BidExch2 != global::Spiderrock.Protobuf.StkExch.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) BidExch2);
      }
      if (BidMask2 != 0) {
        output.WriteRawTag(216, 8);
        output.WriteUInt32(BidMask2);
      }
      if (AskPrice2 != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(AskPrice2);
      }
      if (AskSize2 != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(AskSize2);
      }
      if (AskExch2 != global::Spiderrock.Protobuf.StkExch.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) AskExch2);
      }
      if (AskMask2 != 0) {
        output.WriteRawTag(184, 9);
        output.WriteUInt32(AskMask2);
      }
      if (HaltMask != 0) {
        output.WriteRawTag(208, 9);
        output.WriteUInt32(HaltMask);
      }
      if (SrcTimestamp != 0L) {
        output.WriteRawTag(232, 9);
        output.WriteInt64(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(128, 10);
        output.WriteInt64(NetTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (UpdateType != global::Spiderrock.Protobuf.UpdateType.Unspecified) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) UpdateType);
      }
      if (MarketStatus != global::Spiderrock.Protobuf.MarketStatus.Unspecified) {
        output.WriteRawTag(184, 6);
        output.WriteEnum((int) MarketStatus);
      }
      if (BidPrice1 != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(BidPrice1);
      }
      if (BidSize1 != 0) {
        output.WriteRawTag(232, 6);
        output.WriteInt32(BidSize1);
      }
      if (BidExch1 != global::Spiderrock.Protobuf.StkExch.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) BidExch1);
      }
      if (BidMask1 != 0) {
        output.WriteRawTag(152, 7);
        output.WriteUInt32(BidMask1);
      }
      if (AskPrice1 != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(AskPrice1);
      }
      if (AskSize1 != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(AskSize1);
      }
      if (AskExch1 != global::Spiderrock.Protobuf.StkExch.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) AskExch1);
      }
      if (AskMask1 != 0) {
        output.WriteRawTag(248, 7);
        output.WriteUInt32(AskMask1);
      }
      if (BidPrice2 != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(BidPrice2);
      }
      if (BidSize2 != 0) {
        output.WriteRawTag(168, 8);
        output.WriteInt32(BidSize2);
      }
      if (BidExch2 != global::Spiderrock.Protobuf.StkExch.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) BidExch2);
      }
      if (BidMask2 != 0) {
        output.WriteRawTag(216, 8);
        output.WriteUInt32(BidMask2);
      }
      if (AskPrice2 != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(AskPrice2);
      }
      if (AskSize2 != 0) {
        output.WriteRawTag(136, 9);
        output.WriteInt32(AskSize2);
      }
      if (AskExch2 != global::Spiderrock.Protobuf.StkExch.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) AskExch2);
      }
      if (AskMask2 != 0) {
        output.WriteRawTag(184, 9);
        output.WriteUInt32(AskMask2);
      }
      if (HaltMask != 0) {
        output.WriteRawTag(208, 9);
        output.WriteUInt32(HaltMask);
      }
      if (SrcTimestamp != 0L) {
        output.WriteRawTag(232, 9);
        output.WriteInt64(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(128, 10);
        output.WriteInt64(NetTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (UpdateType != global::Spiderrock.Protobuf.UpdateType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UpdateType);
      }
      if (MarketStatus != global::Spiderrock.Protobuf.MarketStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MarketStatus);
      }
      if (BidPrice1 != 0F) {
        size += 2 + 4;
      }
      if (BidSize1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BidSize1);
      }
      if (BidExch1 != global::Spiderrock.Protobuf.StkExch.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BidExch1);
      }
      if (BidMask1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BidMask1);
      }
      if (AskPrice1 != 0F) {
        size += 2 + 4;
      }
      if (AskSize1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AskSize1);
      }
      if (AskExch1 != global::Spiderrock.Protobuf.StkExch.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AskExch1);
      }
      if (AskMask1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AskMask1);
      }
      if (BidPrice2 != 0F) {
        size += 2 + 4;
      }
      if (BidSize2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BidSize2);
      }
      if (BidExch2 != global::Spiderrock.Protobuf.StkExch.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BidExch2);
      }
      if (BidMask2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BidMask2);
      }
      if (AskPrice2 != 0F) {
        size += 2 + 4;
      }
      if (AskSize2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AskSize2);
      }
      if (AskExch2 != global::Spiderrock.Protobuf.StkExch.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AskExch2);
      }
      if (AskMask2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AskMask2);
      }
      if (HaltMask != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HaltMask);
      }
      if (SrcTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NetTimestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StockBookQuote other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.StockBookQuote.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.UpdateType != global::Spiderrock.Protobuf.UpdateType.Unspecified) {
        UpdateType = other.UpdateType;
      }
      if (other.MarketStatus != global::Spiderrock.Protobuf.MarketStatus.Unspecified) {
        MarketStatus = other.MarketStatus;
      }
      if (other.BidPrice1 != 0F) {
        BidPrice1 = other.BidPrice1;
      }
      if (other.BidSize1 != 0) {
        BidSize1 = other.BidSize1;
      }
      if (other.BidExch1 != global::Spiderrock.Protobuf.StkExch.Unspecified) {
        BidExch1 = other.BidExch1;
      }
      if (other.BidMask1 != 0) {
        BidMask1 = other.BidMask1;
      }
      if (other.AskPrice1 != 0F) {
        AskPrice1 = other.AskPrice1;
      }
      if (other.AskSize1 != 0) {
        AskSize1 = other.AskSize1;
      }
      if (other.AskExch1 != global::Spiderrock.Protobuf.StkExch.Unspecified) {
        AskExch1 = other.AskExch1;
      }
      if (other.AskMask1 != 0) {
        AskMask1 = other.AskMask1;
      }
      if (other.BidPrice2 != 0F) {
        BidPrice2 = other.BidPrice2;
      }
      if (other.BidSize2 != 0) {
        BidSize2 = other.BidSize2;
      }
      if (other.BidExch2 != global::Spiderrock.Protobuf.StkExch.Unspecified) {
        BidExch2 = other.BidExch2;
      }
      if (other.BidMask2 != 0) {
        BidMask2 = other.BidMask2;
      }
      if (other.AskPrice2 != 0F) {
        AskPrice2 = other.AskPrice2;
      }
      if (other.AskSize2 != 0) {
        AskSize2 = other.AskSize2;
      }
      if (other.AskExch2 != global::Spiderrock.Protobuf.StkExch.Unspecified) {
        AskExch2 = other.AskExch2;
      }
      if (other.AskMask2 != 0) {
        AskMask2 = other.AskMask2;
      }
      if (other.HaltMask != 0) {
        HaltMask = other.HaltMask;
      }
      if (other.SrcTimestamp != 0L) {
        SrcTimestamp = other.SrcTimestamp;
      }
      if (other.NetTimestamp != 0L) {
        NetTimestamp = other.NetTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.StockBookQuote.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            UpdateType = (global::Spiderrock.Protobuf.UpdateType) input.ReadEnum();
            break;
          }
          case 824: {
            MarketStatus = (global::Spiderrock.Protobuf.MarketStatus) input.ReadEnum();
            break;
          }
          case 853: {
            BidPrice1 = input.ReadFloat();
            break;
          }
          case 872: {
            BidSize1 = input.ReadInt32();
            break;
          }
          case 896: {
            BidExch1 = (global::Spiderrock.Protobuf.StkExch) input.ReadEnum();
            break;
          }
          case 920: {
            BidMask1 = input.ReadUInt32();
            break;
          }
          case 949: {
            AskPrice1 = input.ReadFloat();
            break;
          }
          case 968: {
            AskSize1 = input.ReadInt32();
            break;
          }
          case 992: {
            AskExch1 = (global::Spiderrock.Protobuf.StkExch) input.ReadEnum();
            break;
          }
          case 1016: {
            AskMask1 = input.ReadUInt32();
            break;
          }
          case 1045: {
            BidPrice2 = input.ReadFloat();
            break;
          }
          case 1064: {
            BidSize2 = input.ReadInt32();
            break;
          }
          case 1088: {
            BidExch2 = (global::Spiderrock.Protobuf.StkExch) input.ReadEnum();
            break;
          }
          case 1112: {
            BidMask2 = input.ReadUInt32();
            break;
          }
          case 1141: {
            AskPrice2 = input.ReadFloat();
            break;
          }
          case 1160: {
            AskSize2 = input.ReadInt32();
            break;
          }
          case 1184: {
            AskExch2 = (global::Spiderrock.Protobuf.StkExch) input.ReadEnum();
            break;
          }
          case 1208: {
            AskMask2 = input.ReadUInt32();
            break;
          }
          case 1232: {
            HaltMask = input.ReadUInt32();
            break;
          }
          case 1256: {
            SrcTimestamp = input.ReadInt64();
            break;
          }
          case 1280: {
            NetTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.StockBookQuote.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            UpdateType = (global::Spiderrock.Protobuf.UpdateType) input.ReadEnum();
            break;
          }
          case 824: {
            MarketStatus = (global::Spiderrock.Protobuf.MarketStatus) input.ReadEnum();
            break;
          }
          case 853: {
            BidPrice1 = input.ReadFloat();
            break;
          }
          case 872: {
            BidSize1 = input.ReadInt32();
            break;
          }
          case 896: {
            BidExch1 = (global::Spiderrock.Protobuf.StkExch) input.ReadEnum();
            break;
          }
          case 920: {
            BidMask1 = input.ReadUInt32();
            break;
          }
          case 949: {
            AskPrice1 = input.ReadFloat();
            break;
          }
          case 968: {
            AskSize1 = input.ReadInt32();
            break;
          }
          case 992: {
            AskExch1 = (global::Spiderrock.Protobuf.StkExch) input.ReadEnum();
            break;
          }
          case 1016: {
            AskMask1 = input.ReadUInt32();
            break;
          }
          case 1045: {
            BidPrice2 = input.ReadFloat();
            break;
          }
          case 1064: {
            BidSize2 = input.ReadInt32();
            break;
          }
          case 1088: {
            BidExch2 = (global::Spiderrock.Protobuf.StkExch) input.ReadEnum();
            break;
          }
          case 1112: {
            BidMask2 = input.ReadUInt32();
            break;
          }
          case 1141: {
            AskPrice2 = input.ReadFloat();
            break;
          }
          case 1160: {
            AskSize2 = input.ReadInt32();
            break;
          }
          case 1184: {
            AskExch2 = (global::Spiderrock.Protobuf.StkExch) input.ReadEnum();
            break;
          }
          case 1208: {
            AskMask2 = input.ReadUInt32();
            break;
          }
          case 1232: {
            HaltMask = input.ReadUInt32();
            break;
          }
          case 1256: {
            SrcTimestamp = input.ReadInt64();
            break;
          }
          case 1280: {
            NetTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the StockBookQuote message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.StockBookQuote.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 10;
        private global::Spiderrock.Protobuf.TickerKey ticker_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Ticker {
          get { return ticker_; }
          set {
            ticker_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ticker, other.Ticker)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ticker_ != null) hash ^= Ticker.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ticker_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ticker_ != null) {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            Ticker.MergeFrom(other.Ticker);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
