// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/OptExchAuction/SpdrAuctionResult.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/OptExchAuction/SpdrAuctionResult.proto</summary>
  public static partial class SpdrAuctionResultReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/OptExchAuction/SpdrAuctionResult.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpdrAuctionResultReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9Qcm90b2J1Zi9PcHRFeGNoQXVjdGlvbi9TcGRyQXVjdGlvblJlc3VsdC5w",
            "cm90bxITc3BpZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24u",
            "cHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8ipRgKEVNw",
            "ZHJBdWN0aW9uUmVzdWx0EjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9jay5w",
            "cm90b2J1Zi5NZXNzYWdlTWV0YWRhdGESOQoEcGtleRgCIAEoCzIrLnNwaWRl",
            "cnJvY2sucHJvdG9idWYuU3BkckF1Y3Rpb25SZXN1bHQuUEtleRIVCg1zcl9h",
            "dWN0aW9uX2lEGGQgASgDEhcKD2V4Y2hfYXVjdGlvbl9pZBhnIAEoCRIZChFl",
            "eGNoX2F1Y3Rpb25fdHlwZRhqIAEoCRI3Cg1hdWN0aW9uX3NoYXBlGG0gASgO",
            "MiAuc3BpZGVycm9jay5wcm90b2J1Zi5Ob3RpY2VTaGFwZRI2CgxhdWN0aW9u",
            "X3R5cGUYcCABKA4yIC5zcGlkZXJyb2NrLnByb3RvYnVmLkF1Y3Rpb25UeXBl",
            "EjIKDGF1Y3Rpb25fc2lkZRhzIAEoDjIcLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "QnV5U2VsbBIUCgxtYXRjaGVkX3NpemUYdiABKAUSFAoMYXVjdGlvbl9zaXpl",
            "GHkgASgFEhUKDWF1Y3Rpb25fcHJpY2UYfCABKAESOgoWaXNfYXVjdGlvbl9w",
            "cmljZV92YWxpZBh/IAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYuWWVzTm8S",
            "GQoQYXVjdGlvbl9kdXJhdGlvbhiCASABKAUSIAoXYXVjdGlvbl9zdGFydF90",
            "aW1lc3RhbXAYhQEgASgDEhoKEW1pbl9yZXNwb25zZV9zaXplGIgBIAEoBRJB",
            "ChFjbGllbnRfbGltaXRfdHlwZRiLASABKA4yJS5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLkF1Y3Rpb25MaW1pdFR5cGUSMQoJZmlybV90eXBlGI4BIAEoDjIdLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuRmlybVR5cGUSFAoLbWVtYmVyX21QSUQYkQEg",
            "ASgJEhUKDGNsaWVudF9hY2NudBiUASABKAkSFQoMb3RoZXJfZGV0YWlsGJcB",
            "IAEoCRI5Cg1tYXJrZXRfc3RhdHVzGJoBIAEoDjIhLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuTWFya2V0U3RhdHVzEhQKC251bV91cGRhdGVzGJ0BIAEoBRIgChdh",
            "dWN0aW9uX2ZpbmFsX3RpbWVzdGFtcBigASABKAMSGwoSYXVjdGlvbl9zdGFy",
            "dF9zaXplGKMBIAEoBRIcChNhdWN0aW9uX3N0YXJ0X3ByaWNlGKYBIAEoARIj",
            "ChphdWN0aW9uX3N0YXJ0X21hdGNoZWRfc2l6ZRipASABKAUSFgoNbnVtX3Jl",
            "c3BvbnNlcxisASABKAUSGwoSYmVzdF9yZXNwb25zZV9zaXplGK8BIAEoBRIc",
            "ChNiZXN0X3Jlc3BvbnNlX3ByaWNlGLIBIAEoARIaChFjdW1fZmlsbF9xdWFu",
            "dGl0eRi1ASABKAUSFwoOYXZnX2ZpbGxfcHJpY2UYuAEgASgBEhwKE2F1Y3Rp",
            "b25fZmluYWxfcHJpY2UYuwEgASgBEhYKDXNyY190aW1lc3RhbXAYvgEgASgD",
            "EhYKDW5ldF90aW1lc3RhbXAYwQEgASgDEhYKDWRnd190aW1lc3RhbXAYxAEg",
            "ASgDEhYKDW1tcl90aW1lc3RhbXAYxwEgASgDEhYKDWVuZ190aW1lc3RhbXAY",
            "ygEgASgDEi4KCXRpbWVzdGFtcBjNASABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wEhYKDWF1Y3Rpb25fc3RhcnQY3wEgASgBEkMKE2F1Y3Rpb25f",
            "bmJib19zdGFuY2UY4gEgASgOMiUuc3BpZGVycm9jay5wcm90b2J1Zi5BdWN0",
            "aW9uTWt0U3RhbmNlEkMKE2F1Y3Rpb25fZXhjaF9zdGFuY2UY5QEgASgOMiUu",
            "c3BpZGVycm9jay5wcm90b2J1Zi5BdWN0aW9uTWt0U3RhbmNlEhIKCWJpZF9w",
            "cmljZRjoASABKAISEgoJYXNrX3ByaWNlGOsBIAEoAhIVCgxjdW1fYmlkX3Np",
            "emUY7gEgASgFEhUKDGN1bV9hc2tfc2l6ZRjxASABKAUSFQoMZXhjaF9iaWRf",
            "cHJjGPQBIAEoAhIVCgxleGNoX2Fza19wcmMY9wEgASgCEhYKDWV4Y2hfYmlk",
            "X3NpemUY+gEgASgFEhYKDWV4Y2hfYXNrX3NpemUY/QEgASgFEhgKD3JzcF9w",
            "cm9iYWJpbGl0eRiAAiABKAISDQoEc3ZvbBiDAiABKAISDQoEc3ByYxiGAiAB",
            "KAISDQoEdmVnYRiJAiABKAISDgoFZGVsdGEYjAIgASgCEhUKDHNfZWRnZV9z",
            "dGFydBiPAiABKAISFQoMc19lZGdlX3ByaW50GJICIAEoAhIOCgV1X2JpZBiV",
            "AiABKAISDgoFdV9hc2sYmAIgASgCEhAKB3VfYmlkX3QYmwIgASgCEhAKB3Vf",
            "YXNrX3QYngIgASgCEkYKFGF1Y3Rpb25fcHJpbnRfcmVzdWx0GKECIAEoDjIn",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuQXVjdGlvblByaW50UmVzdWx0EhkKEGZp",
            "cnN0X3ByaW50X3NpemUYpAIgASgCEhoKEWZpcnN0X3ByaW50X3ByaWNlGKcC",
            "IAEoARI3ChBmaXJzdF9wcmludF9zaWRlGKoCIAEoDjIcLnNwaWRlcnJvY2su",
            "cHJvdG9idWYuUHJ0U2lkZRI3ChBmaXJzdF9wcmludF90eXBlGK0CIAEoDjIc",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuUHJ0VHlwZRIcChNmaXJzdF9zcmNfdGlt",
            "ZXN0YW1wGLACIAEoAxIcChNmaXJzdF9uZXRfdGltZXN0YW1wGLMCIAEoAxIa",
            "ChFmaXJzdF9zcmNfbGF0ZW5jeRi2AiABKAISGgoRZmlyc3RfbmV0X2xhdGVu",
            "Y3kYuQIgASgCEhwKE2ZpcnN0X2F3YXlfcHJ0X3NpemUYvAIgASgFEh0KFGZp",
            "cnN0X2F3YXlfcHJ0X3ByaWNlGL8CIAEoARIfChZmaXJzdF9hd2F5X25ldF9s",
            "YXRlbmN5GMICIAEoAhITCgpudW1fcHJpbnRzGMUCIAEoBRIXCg5jdW1fcHJp",
            "bnRfc2l6ZRjIAiABKAUSGAoPYXZnX3ByaW50X3ByaWNlGMsCIAEoARIXCg5u",
            "dW1fcHJpbnRfbGVncxjOAiABKAUSEAoHbWFya19tMRjRAiABKAISEgoJdV9t",
            "YXJrX20xGNQCIAEoAhIPCgZwbmxfbTEY1wIgASgCEi8KCnBubF9tMV9lcnIY",
            "2gIgASgOMhouc3BpZGVycm9jay5wcm90b2J1Zi5ZZXNObxIRCghtYXJrX20x",
            "MBjdAiABKAISEwoKdV9tYXJrX20xMBjgAiABKAISEAoHcG5sX20xMBjjAiAB",
            "KAISMAoLcG5sX20xMF9lcnIY5gIgASgOMhouc3BpZGVycm9jay5wcm90b2J1",
            "Zi5ZZXNObxI6CgRsZWdzGNABIAMoCzIrLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "U3BkckF1Y3Rpb25SZXN1bHQuTGVncxrsAQoEUEtleRIvCgdzZWNfa2V5GAog",
            "ASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5PcHRpb25LZXkSMgoIc2VjX3R5",
            "cGUYCyABKA4yIC5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJLZXlUeXBlEjIK",
            "DGF1Y3Rpb25fZXhjaBgMIAEoDjIcLnNwaWRlcnJvY2sucHJvdG9idWYuT3B0",
            "RXhjaBIXCg9hdWN0aW9uX2V4X2Rlc3QYDSABKAkSMgoKcnVuX3N0YXR1cxgO",
            "IAEoDjIeLnNwaWRlcnJvY2sucHJvdG9idWYuUnVuU3RhdHVzGroBCgRMZWdz",
            "EjQKC2xlZ19zZWNfa2V5GNMBIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "T3B0aW9uS2V5EjcKDGxlZ19zZWNfdHlwZRjWASABKA4yIC5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLlNwZHJLZXlUeXBlEi8KCGxlZ19zaWRlGNkBIAEoDjIcLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuQnV5U2VsbBISCglsZWdfcmF0aW8Y3AEgASgN",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrAuctionResult), global::Spiderrock.Protobuf.SpdrAuctionResult.Parser, new[]{ "Meta", "Pkey", "SrAuctionID", "ExchAuctionId", "ExchAuctionType", "AuctionShape", "AuctionType", "AuctionSide", "MatchedSize", "AuctionSize", "AuctionPrice", "IsAuctionPriceValid", "AuctionDuration", "AuctionStartTimestamp", "MinResponseSize", "ClientLimitType", "FirmType", "MemberMPID", "ClientAccnt", "OtherDetail", "MarketStatus", "NumUpdates", "AuctionFinalTimestamp", "AuctionStartSize", "AuctionStartPrice", "AuctionStartMatchedSize", "NumResponses", "BestResponseSize", "BestResponsePrice", "CumFillQuantity", "AvgFillPrice", "AuctionFinalPrice", "SrcTimestamp", "NetTimestamp", "DgwTimestamp", "MmrTimestamp", "EngTimestamp", "Timestamp", "AuctionStart", "AuctionNbboStance", "AuctionExchStance", "BidPrice", "AskPrice", "CumBidSize", "CumAskSize", "ExchBidPrc", "ExchAskPrc", "ExchBidSize", "ExchAskSize", "RspProbability", "Svol", "Sprc", "Vega", "Delta", "SEdgeStart", "SEdgePrint", "UBid", "UAsk", "UBidT", "UAskT", "AuctionPrintResult", "FirstPrintSize", "FirstPrintPrice", "FirstPrintSide", "FirstPrintType", "FirstSrcTimestamp", "FirstNetTimestamp", "FirstSrcLatency", "FirstNetLatency", "FirstAwayPrtSize", "FirstAwayPrtPrice", "FirstAwayNetLatency", "NumPrints", "CumPrintSize", "AvgPrintPrice", "NumPrintLegs", "MarkM1", "UMarkM1", "PnlM1", "PnlM1Err", "MarkM10", "UMarkM10", "PnlM10", "PnlM10Err", "Legs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrAuctionResult.Types.PKey), global::Spiderrock.Protobuf.SpdrAuctionResult.Types.PKey.Parser, new[]{ "SecKey", "SecType", "AuctionExch", "AuctionExDest", "RunStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrAuctionResult.Types.Legs), global::Spiderrock.Protobuf.SpdrAuctionResult.Types.Legs.Parser, new[]{ "LegSecKey", "LegSecType", "LegSide", "LegRatio" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///SpdrAuctionResult messages are published by SR ExecEngines and have complete markup detail for the auction notice including detail about SR responses.
  /// </summary>
  public sealed partial class SpdrAuctionResult : pb::IMessage<SpdrAuctionResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpdrAuctionResult> _parser = new pb::MessageParser<SpdrAuctionResult>(() => new SpdrAuctionResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpdrAuctionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SpdrAuctionResultReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrAuctionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrAuctionResult(SpdrAuctionResult other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      srAuctionID_ = other.srAuctionID_;
      exchAuctionId_ = other.exchAuctionId_;
      exchAuctionType_ = other.exchAuctionType_;
      auctionShape_ = other.auctionShape_;
      auctionType_ = other.auctionType_;
      auctionSide_ = other.auctionSide_;
      matchedSize_ = other.matchedSize_;
      auctionSize_ = other.auctionSize_;
      auctionPrice_ = other.auctionPrice_;
      isAuctionPriceValid_ = other.isAuctionPriceValid_;
      auctionDuration_ = other.auctionDuration_;
      auctionStartTimestamp_ = other.auctionStartTimestamp_;
      minResponseSize_ = other.minResponseSize_;
      clientLimitType_ = other.clientLimitType_;
      firmType_ = other.firmType_;
      memberMPID_ = other.memberMPID_;
      clientAccnt_ = other.clientAccnt_;
      otherDetail_ = other.otherDetail_;
      marketStatus_ = other.marketStatus_;
      numUpdates_ = other.numUpdates_;
      auctionFinalTimestamp_ = other.auctionFinalTimestamp_;
      auctionStartSize_ = other.auctionStartSize_;
      auctionStartPrice_ = other.auctionStartPrice_;
      auctionStartMatchedSize_ = other.auctionStartMatchedSize_;
      numResponses_ = other.numResponses_;
      bestResponseSize_ = other.bestResponseSize_;
      bestResponsePrice_ = other.bestResponsePrice_;
      cumFillQuantity_ = other.cumFillQuantity_;
      avgFillPrice_ = other.avgFillPrice_;
      auctionFinalPrice_ = other.auctionFinalPrice_;
      srcTimestamp_ = other.srcTimestamp_;
      netTimestamp_ = other.netTimestamp_;
      dgwTimestamp_ = other.dgwTimestamp_;
      mmrTimestamp_ = other.mmrTimestamp_;
      engTimestamp_ = other.engTimestamp_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      auctionStart_ = other.auctionStart_;
      auctionNbboStance_ = other.auctionNbboStance_;
      auctionExchStance_ = other.auctionExchStance_;
      bidPrice_ = other.bidPrice_;
      askPrice_ = other.askPrice_;
      cumBidSize_ = other.cumBidSize_;
      cumAskSize_ = other.cumAskSize_;
      exchBidPrc_ = other.exchBidPrc_;
      exchAskPrc_ = other.exchAskPrc_;
      exchBidSize_ = other.exchBidSize_;
      exchAskSize_ = other.exchAskSize_;
      rspProbability_ = other.rspProbability_;
      svol_ = other.svol_;
      sprc_ = other.sprc_;
      vega_ = other.vega_;
      delta_ = other.delta_;
      sEdgeStart_ = other.sEdgeStart_;
      sEdgePrint_ = other.sEdgePrint_;
      uBid_ = other.uBid_;
      uAsk_ = other.uAsk_;
      uBidT_ = other.uBidT_;
      uAskT_ = other.uAskT_;
      auctionPrintResult_ = other.auctionPrintResult_;
      firstPrintSize_ = other.firstPrintSize_;
      firstPrintPrice_ = other.firstPrintPrice_;
      firstPrintSide_ = other.firstPrintSide_;
      firstPrintType_ = other.firstPrintType_;
      firstSrcTimestamp_ = other.firstSrcTimestamp_;
      firstNetTimestamp_ = other.firstNetTimestamp_;
      firstSrcLatency_ = other.firstSrcLatency_;
      firstNetLatency_ = other.firstNetLatency_;
      firstAwayPrtSize_ = other.firstAwayPrtSize_;
      firstAwayPrtPrice_ = other.firstAwayPrtPrice_;
      firstAwayNetLatency_ = other.firstAwayNetLatency_;
      numPrints_ = other.numPrints_;
      cumPrintSize_ = other.cumPrintSize_;
      avgPrintPrice_ = other.avgPrintPrice_;
      numPrintLegs_ = other.numPrintLegs_;
      markM1_ = other.markM1_;
      uMarkM1_ = other.uMarkM1_;
      pnlM1_ = other.pnlM1_;
      pnlM1Err_ = other.pnlM1Err_;
      markM10_ = other.markM10_;
      uMarkM10_ = other.uMarkM10_;
      pnlM10_ = other.pnlM10_;
      pnlM10Err_ = other.pnlM10Err_;
      legs_ = other.legs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrAuctionResult Clone() {
      return new SpdrAuctionResult(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SpdrAuctionResult.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrAuctionResult.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "sr_auction_iD" field.</summary>
    public const int SrAuctionIDFieldNumber = 100;
    private long srAuctionID_;
    /// <summary>
    /// unique SR AUCTION ID (required when responding to an auction notice)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SrAuctionID {
      get { return srAuctionID_; }
      set {
        srAuctionID_ = value;
      }
    }

    /// <summary>Field number for the "exch_auction_id" field.</summary>
    public const int ExchAuctionIdFieldNumber = 103;
    private string exchAuctionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExchAuctionId {
      get { return exchAuctionId_; }
      set {
        exchAuctionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exch_auction_type" field.</summary>
    public const int ExchAuctionTypeFieldNumber = 106;
    private string exchAuctionType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExchAuctionType {
      get { return exchAuctionType_; }
      set {
        exchAuctionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auction_shape" field.</summary>
    public const int AuctionShapeFieldNumber = 109;
    private global::Spiderrock.Protobuf.NoticeShape auctionShape_ = global::Spiderrock.Protobuf.NoticeShape.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.NoticeShape AuctionShape {
      get { return auctionShape_; }
      set {
        auctionShape_ = value;
      }
    }

    /// <summary>Field number for the "auction_type" field.</summary>
    public const int AuctionTypeFieldNumber = 112;
    private global::Spiderrock.Protobuf.AuctionType auctionType_ = global::Spiderrock.Protobuf.AuctionType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionType AuctionType {
      get { return auctionType_; }
      set {
        auctionType_ = value;
      }
    }

    /// <summary>Field number for the "auction_side" field.</summary>
    public const int AuctionSideFieldNumber = 115;
    private global::Spiderrock.Protobuf.BuySell auctionSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
    /// <summary>
    /// Market side (client/imbalance side of auction; if known) [responder should be opposite side]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BuySell AuctionSide {
      get { return auctionSide_; }
      set {
        auctionSide_ = value;
      }
    }

    /// <summary>Field number for the "matched_size" field.</summary>
    public const int MatchedSizeFieldNumber = 118;
    private int matchedSize_;
    /// <summary>
    /// already matched size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MatchedSize {
      get { return matchedSize_; }
      set {
        matchedSize_ = value;
      }
    }

    /// <summary>Field number for the "auction_size" field.</summary>
    public const int AuctionSizeFieldNumber = 121;
    private int auctionSize_;
    /// <summary>
    /// auction size (includes already matched size)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AuctionSize {
      get { return auctionSize_; }
      set {
        auctionSize_ = value;
      }
    }

    /// <summary>Field number for the "auction_price" field.</summary>
    public const int AuctionPriceFieldNumber = 124;
    private double auctionPrice_;
    /// <summary>
    /// auction price (can be positive or negative)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AuctionPrice {
      get { return auctionPrice_; }
      set {
        auctionPrice_ = value;
      }
    }

    /// <summary>Field number for the "is_auction_price_valid" field.</summary>
    public const int IsAuctionPriceValidFieldNumber = 127;
    private global::Spiderrock.Protobuf.YesNo isAuctionPriceValid_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsAuctionPriceValid {
      get { return isAuctionPriceValid_; }
      set {
        isAuctionPriceValid_ = value;
      }
    }

    /// <summary>Field number for the "auction_duration" field.</summary>
    public const int AuctionDurationFieldNumber = 130;
    private int auctionDuration_;
    /// <summary>
    /// expected auction / imbalance action duration (ms)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AuctionDuration {
      get { return auctionDuration_; }
      set {
        auctionDuration_ = value;
      }
    }

    /// <summary>Field number for the "auction_start_timestamp" field.</summary>
    public const int AuctionStartTimestampFieldNumber = 133;
    private long auctionStartTimestamp_;
    /// <summary>
    /// auction / action start timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AuctionStartTimestamp {
      get { return auctionStartTimestamp_; }
      set {
        auctionStartTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "min_response_size" field.</summary>
    public const int MinResponseSizeFieldNumber = 136;
    private int minResponseSize_;
    /// <summary>
    /// minimum size of the response order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinResponseSize {
      get { return minResponseSize_; }
      set {
        minResponseSize_ = value;
      }
    }

    /// <summary>Field number for the "client_limit_type" field.</summary>
    public const int ClientLimitTypeFieldNumber = 139;
    private global::Spiderrock.Protobuf.AuctionLimitType clientLimitType_ = global::Spiderrock.Protobuf.AuctionLimitType.Unspecified;
    /// <summary>
    /// client / imbalance limit type (if available)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionLimitType ClientLimitType {
      get { return clientLimitType_; }
      set {
        clientLimitType_ = value;
      }
    }

    /// <summary>Field number for the "firm_type" field.</summary>
    public const int FirmTypeFieldNumber = 142;
    private global::Spiderrock.Protobuf.FirmType firmType_ = global::Spiderrock.Protobuf.FirmType.Unspecified;
    /// <summary>
    /// firm type of the client side of auction (if available)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FirmType FirmType {
      get { return firmType_; }
      set {
        firmType_ = value;
      }
    }

    /// <summary>Field number for the "member_mPID" field.</summary>
    public const int MemberMPIDFieldNumber = 145;
    private string memberMPID_ = "";
    /// <summary>
    /// exchange member initiating auction (if available)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MemberMPID {
      get { return memberMPID_; }
      set {
        memberMPID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_accnt" field.</summary>
    public const int ClientAccntFieldNumber = 148;
    private string clientAccnt_ = "";
    /// <summary>
    /// client account designation (if known)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientAccnt {
      get { return clientAccnt_; }
      set {
        clientAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "other_detail" field.</summary>
    public const int OtherDetailFieldNumber = 151;
    private string otherDetail_ = "";
    /// <summary>
    /// additional auction detail (exchange specific)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OtherDetail {
      get { return otherDetail_; }
      set {
        otherDetail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "market_status" field.</summary>
    public const int MarketStatusFieldNumber = 154;
    private global::Spiderrock.Protobuf.MarketStatus marketStatus_ = global::Spiderrock.Protobuf.MarketStatus.Unspecified;
    /// <summary>
    /// market status (pre-open, open, closed, etc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarketStatus MarketStatus {
      get { return marketStatus_; }
      set {
        marketStatus_ = value;
      }
    }

    /// <summary>Field number for the "num_updates" field.</summary>
    public const int NumUpdatesFieldNumber = 157;
    private int numUpdates_;
    /// <summary>
    /// number of auction update messages (since start of auction)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumUpdates {
      get { return numUpdates_; }
      set {
        numUpdates_ = value;
      }
    }

    /// <summary>Field number for the "auction_final_timestamp" field.</summary>
    public const int AuctionFinalTimestampFieldNumber = 160;
    private long auctionFinalTimestamp_;
    /// <summary>
    /// last auction message timestamp (excluding the auction closed notice; if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AuctionFinalTimestamp {
      get { return auctionFinalTimestamp_; }
      set {
        auctionFinalTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "auction_start_size" field.</summary>
    public const int AuctionStartSizeFieldNumber = 163;
    private int auctionStartSize_;
    /// <summary>
    /// initial auction size (size @ start of auction)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AuctionStartSize {
      get { return auctionStartSize_; }
      set {
        auctionStartSize_ = value;
      }
    }

    /// <summary>Field number for the "auction_start_price" field.</summary>
    public const int AuctionStartPriceFieldNumber = 166;
    private double auctionStartPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AuctionStartPrice {
      get { return auctionStartPrice_; }
      set {
        auctionStartPrice_ = value;
      }
    }

    /// <summary>Field number for the "auction_start_matched_size" field.</summary>
    public const int AuctionStartMatchedSizeFieldNumber = 169;
    private int auctionStartMatchedSize_;
    /// <summary>
    /// initial auction match size (size @ start of auction)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AuctionStartMatchedSize {
      get { return auctionStartMatchedSize_; }
      set {
        auctionStartMatchedSize_ = value;
      }
    }

    /// <summary>Field number for the "num_responses" field.</summary>
    public const int NumResponsesFieldNumber = 172;
    private int numResponses_;
    /// <summary>
    /// as reported by exchange (if available)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumResponses {
      get { return numResponses_; }
      set {
        numResponses_ = value;
      }
    }

    /// <summary>Field number for the "best_response_size" field.</summary>
    public const int BestResponseSizeFieldNumber = 175;
    private int bestResponseSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BestResponseSize {
      get { return bestResponseSize_; }
      set {
        bestResponseSize_ = value;
      }
    }

    /// <summary>Field number for the "best_response_price" field.</summary>
    public const int BestResponsePriceFieldNumber = 178;
    private double bestResponsePrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BestResponsePrice {
      get { return bestResponsePrice_; }
      set {
        bestResponsePrice_ = value;
      }
    }

    /// <summary>Field number for the "cum_fill_quantity" field.</summary>
    public const int CumFillQuantityFieldNumber = 181;
    private int cumFillQuantity_;
    /// <summary>
    /// as reported by exchange (if available)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CumFillQuantity {
      get { return cumFillQuantity_; }
      set {
        cumFillQuantity_ = value;
      }
    }

    /// <summary>Field number for the "avg_fill_price" field.</summary>
    public const int AvgFillPriceFieldNumber = 184;
    private double avgFillPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillPrice {
      get { return avgFillPrice_; }
      set {
        avgFillPrice_ = value;
      }
    }

    /// <summary>Field number for the "auction_final_price" field.</summary>
    public const int AuctionFinalPriceFieldNumber = 187;
    private double auctionFinalPrice_;
    /// <summary>
    /// avgFillPrice (exchange result, if available) or best of [avgPrintPrice, nbboMarket, or auctionStartPrice]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AuctionFinalPrice {
      get { return auctionFinalPrice_; }
      set {
        auctionFinalPrice_ = value;
      }
    }

    /// <summary>Field number for the "src_timestamp" field.</summary>
    public const int SrcTimestampFieldNumber = 190;
    private long srcTimestamp_;
    /// <summary>
    /// source timestamp (nanoseconds) if available
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SrcTimestamp {
      get { return srcTimestamp_; }
      set {
        srcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "net_timestamp" field.</summary>
    public const int NetTimestampFieldNumber = 193;
    private long netTimestamp_;
    /// <summary>
    /// network timestamp message arrival @ direct exchange gateway
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NetTimestamp {
      get { return netTimestamp_; }
      set {
        netTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "dgw_timestamp" field.</summary>
    public const int DgwTimestampFieldNumber = 196;
    private long dgwTimestamp_;
    /// <summary>
    /// network timestamp mbus message send @ direct exchange gateway
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long DgwTimestamp {
      get { return dgwTimestamp_; }
      set {
        dgwTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "mmr_timestamp" field.</summary>
    public const int MmrTimestampFieldNumber = 199;
    private long mmrTimestamp_;
    /// <summary>
    /// network timestamp of EE/MMR Host packet received (.netTimestampRcvd)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MmrTimestamp {
      get { return mmrTimestamp_; }
      set {
        mmrTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "eng_timestamp" field.</summary>
    public const int EngTimestampFieldNumber = 202;
    private long engTimestamp_;
    /// <summary>
    /// network timestamp of EE handler packet arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EngTimestamp {
      get { return engTimestamp_; }
      set {
        engTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 205;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "auction_start" field.</summary>
    public const int AuctionStartFieldNumber = 223;
    private double auctionStart_;
    /// <summary>
    /// system start time (internal use)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AuctionStart {
      get { return auctionStart_; }
      set {
        auctionStart_ = value;
      }
    }

    /// <summary>Field number for the "auction_nbbo_stance" field.</summary>
    public const int AuctionNbboStanceFieldNumber = 226;
    private global::Spiderrock.Protobuf.AuctionMktStance auctionNbboStance_ = global::Spiderrock.Protobuf.AuctionMktStance.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionMktStance AuctionNbboStance {
      get { return auctionNbboStance_; }
      set {
        auctionNbboStance_ = value;
      }
    }

    /// <summary>Field number for the "auction_exch_stance" field.</summary>
    public const int AuctionExchStanceFieldNumber = 229;
    private global::Spiderrock.Protobuf.AuctionMktStance auctionExchStance_ = global::Spiderrock.Protobuf.AuctionMktStance.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionMktStance AuctionExchStance {
      get { return auctionExchStance_; }
      set {
        auctionExchStance_ = value;
      }
    }

    /// <summary>Field number for the "bid_price" field.</summary>
    public const int BidPriceFieldNumber = 232;
    private float bidPrice_;
    /// <summary>
    /// nbbo bid price		@ auction start
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BidPrice {
      get { return bidPrice_; }
      set {
        bidPrice_ = value;
      }
    }

    /// <summary>Field number for the "ask_price" field.</summary>
    public const int AskPriceFieldNumber = 235;
    private float askPrice_;
    /// <summary>
    /// nbbo ask price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AskPrice {
      get { return askPrice_; }
      set {
        askPrice_ = value;
      }
    }

    /// <summary>Field number for the "cum_bid_size" field.</summary>
    public const int CumBidSizeFieldNumber = 238;
    private int cumBidSize_;
    /// <summary>
    /// cum nbbo bid size		@ auction start
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CumBidSize {
      get { return cumBidSize_; }
      set {
        cumBidSize_ = value;
      }
    }

    /// <summary>Field number for the "cum_ask_size" field.</summary>
    public const int CumAskSizeFieldNumber = 241;
    private int cumAskSize_;
    /// <summary>
    /// cum nbbo ask size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CumAskSize {
      get { return cumAskSize_; }
      set {
        cumAskSize_ = value;
      }
    }

    /// <summary>Field number for the "exch_bid_prc" field.</summary>
    public const int ExchBidPrcFieldNumber = 244;
    private float exchBidPrc_;
    /// <summary>
    /// exch bid price	@ auction start
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExchBidPrc {
      get { return exchBidPrc_; }
      set {
        exchBidPrc_ = value;
      }
    }

    /// <summary>Field number for the "exch_ask_prc" field.</summary>
    public const int ExchAskPrcFieldNumber = 247;
    private float exchAskPrc_;
    /// <summary>
    /// exch ask price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExchAskPrc {
      get { return exchAskPrc_; }
      set {
        exchAskPrc_ = value;
      }
    }

    /// <summary>Field number for the "exch_bid_size" field.</summary>
    public const int ExchBidSizeFieldNumber = 250;
    private int exchBidSize_;
    /// <summary>
    /// exch bid size		@ auction start
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExchBidSize {
      get { return exchBidSize_; }
      set {
        exchBidSize_ = value;
      }
    }

    /// <summary>Field number for the "exch_ask_size" field.</summary>
    public const int ExchAskSizeFieldNumber = 253;
    private int exchAskSize_;
    /// <summary>
    /// exch ask size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ExchAskSize {
      get { return exchAskSize_; }
      set {
        exchAskSize_ = value;
      }
    }

    /// <summary>Field number for the "rsp_probability" field.</summary>
    public const int RspProbabilityFieldNumber = 256;
    private float rspProbability_;
    /// <summary>
    /// probability that auction will be profitable (for the auction responder) [if auctionPrice specified]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RspProbability {
      get { return rspProbability_; }
      set {
        rspProbability_ = value;
      }
    }

    /// <summary>Field number for the "svol" field.</summary>
    public const int SvolFieldNumber = 259;
    private float svol_;
    /// <summary>
    /// SpiderRock surface volatility		@ auction start
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Svol {
      get { return svol_; }
      set {
        svol_ = value;
      }
    }

    /// <summary>Field number for the "sprc" field.</summary>
    public const int SprcFieldNumber = 262;
    private float sprc_;
    /// <summary>
    /// SpiderRock surface price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sprc {
      get { return sprc_; }
      set {
        sprc_ = value;
      }
    }

    /// <summary>Field number for the "vega" field.</summary>
    public const int VegaFieldNumber = 265;
    private float vega_;
    /// <summary>
    /// option vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vega {
      get { return vega_; }
      set {
        vega_ = value;
      }
    }

    /// <summary>Field number for the "delta" field.</summary>
    public const int DeltaFieldNumber = 268;
    private float delta_;
    /// <summary>
    /// option delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Delta {
      get { return delta_; }
      set {
        delta_ = value;
      }
    }

    /// <summary>Field number for the "s_edge_start" field.</summary>
    public const int SEdgeStartFieldNumber = 271;
    private float sEdgeStart_;
    /// <summary>
    /// surface edge (auction start price to SR surface; if both exist)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SEdgeStart {
      get { return sEdgeStart_; }
      set {
        sEdgeStart_ = value;
      }
    }

    /// <summary>Field number for the "s_edge_print" field.</summary>
    public const int SEdgePrintFieldNumber = 274;
    private float sEdgePrint_;
    /// <summary>
    /// surface edge (estimated final auction price to SR surface; if both exist)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SEdgePrint {
      get { return sEdgePrint_; }
      set {
        sEdgePrint_ = value;
      }
    }

    /// <summary>Field number for the "u_bid" field.</summary>
    public const int UBidFieldNumber = 277;
    private float uBid_;
    /// <summary>
    /// underlier bid price		@ auction start
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UBid {
      get { return uBid_; }
      set {
        uBid_ = value;
      }
    }

    /// <summary>Field number for the "u_ask" field.</summary>
    public const int UAskFieldNumber = 280;
    private float uAsk_;
    /// <summary>
    /// underlier ask price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UAsk {
      get { return uAsk_; }
      set {
        uAsk_ = value;
      }
    }

    /// <summary>Field number for the "u_bid_t" field.</summary>
    public const int UBidTFieldNumber = 283;
    private float uBidT_;
    /// <summary>
    /// underlier bid price		@ auction termination
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UBidT {
      get { return uBidT_; }
      set {
        uBidT_ = value;
      }
    }

    /// <summary>Field number for the "u_ask_t" field.</summary>
    public const int UAskTFieldNumber = 286;
    private float uAskT_;
    /// <summary>
    /// underlier ask price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UAskT {
      get { return uAskT_; }
      set {
        uAskT_ = value;
      }
    }

    /// <summary>Field number for the "auction_print_result" field.</summary>
    public const int AuctionPrintResultFieldNumber = 289;
    private global::Spiderrock.Protobuf.AuctionPrintResult auctionPrintResult_ = global::Spiderrock.Protobuf.AuctionPrintResult.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AuctionPrintResult AuctionPrintResult {
      get { return auctionPrintResult_; }
      set {
        auctionPrintResult_ = value;
      }
    }

    /// <summary>Field number for the "first_print_size" field.</summary>
    public const int FirstPrintSizeFieldNumber = 292;
    private float firstPrintSize_;
    /// <summary>
    /// first print (fractional if part of a spread) in the auction window (T-25ms -to- T+150ms)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FirstPrintSize {
      get { return firstPrintSize_; }
      set {
        firstPrintSize_ = value;
      }
    }

    /// <summary>Field number for the "first_print_price" field.</summary>
    public const int FirstPrintPriceFieldNumber = 295;
    private double firstPrintPrice_;
    /// <summary>
    /// print price (single or spread) of all prints making up firtPrintSize
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FirstPrintPrice {
      get { return firstPrintPrice_; }
      set {
        firstPrintPrice_ = value;
      }
    }

    /// <summary>Field number for the "first_print_side" field.</summary>
    public const int FirstPrintSideFieldNumber = 298;
    private global::Spiderrock.Protobuf.PrtSide firstPrintSide_ = global::Spiderrock.Protobuf.PrtSide.Unspecified;
    /// <summary>
    /// print side
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PrtSide FirstPrintSide {
      get { return firstPrintSide_; }
      set {
        firstPrintSide_ = value;
      }
    }

    /// <summary>Field number for the "first_print_type" field.</summary>
    public const int FirstPrintTypeFieldNumber = 301;
    private global::Spiderrock.Protobuf.PrtType firstPrintType_ = global::Spiderrock.Protobuf.PrtType.Unspecified;
    /// <summary>
    /// print type code (from OPRA feed)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PrtType FirstPrintType {
      get { return firstPrintType_; }
      set {
        firstPrintType_ = value;
      }
    }

    /// <summary>Field number for the "first_src_timestamp" field.</summary>
    public const int FirstSrcTimestampFieldNumber = 304;
    private long firstSrcTimestamp_;
    /// <summary>
    /// src timestamp of first OPRA print
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FirstSrcTimestamp {
      get { return firstSrcTimestamp_; }
      set {
        firstSrcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "first_net_timestamp" field.</summary>
    public const int FirstNetTimestampFieldNumber = 307;
    private long firstNetTimestamp_;
    /// <summary>
    /// net timestamp of first OPRA print
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FirstNetTimestamp {
      get { return firstNetTimestamp_; }
      set {
        firstNetTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "first_src_latency" field.</summary>
    public const int FirstSrcLatencyFieldNumber = 310;
    private float firstSrcLatency_;
    /// <summary>
    /// auction initSrcTimestamp to first print srcTimestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FirstSrcLatency {
      get { return firstSrcLatency_; }
      set {
        firstSrcLatency_ = value;
      }
    }

    /// <summary>Field number for the "first_net_latency" field.</summary>
    public const int FirstNetLatencyFieldNumber = 313;
    private float firstNetLatency_;
    /// <summary>
    /// auction initNetTimestamp to first print netTimestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FirstNetLatency {
      get { return firstNetLatency_; }
      set {
        firstNetLatency_ = value;
      }
    }

    /// <summary>Field number for the "first_away_prt_size" field.</summary>
    public const int FirstAwayPrtSizeFieldNumber = 316;
    private int firstAwayPrtSize_;
    /// <summary>
    /// first print on an away exchange (if any in window)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FirstAwayPrtSize {
      get { return firstAwayPrtSize_; }
      set {
        firstAwayPrtSize_ = value;
      }
    }

    /// <summary>Field number for the "first_away_prt_price" field.</summary>
    public const int FirstAwayPrtPriceFieldNumber = 319;
    private double firstAwayPrtPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FirstAwayPrtPrice {
      get { return firstAwayPrtPrice_; }
      set {
        firstAwayPrtPrice_ = value;
      }
    }

    /// <summary>Field number for the "first_away_net_latency" field.</summary>
    public const int FirstAwayNetLatencyFieldNumber = 322;
    private float firstAwayNetLatency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FirstAwayNetLatency {
      get { return firstAwayNetLatency_; }
      set {
        firstAwayNetLatency_ = value;
      }
    }

    /// <summary>Field number for the "num_prints" field.</summary>
    public const int NumPrintsFieldNumber = 325;
    private int numPrints_;
    /// <summary>
    /// all prints (all print codes) in the auction window (T-25ms -to- T+150ms)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumPrints {
      get { return numPrints_; }
      set {
        numPrints_ = value;
      }
    }

    /// <summary>Field number for the "cum_print_size" field.</summary>
    public const int CumPrintSizeFieldNumber = 328;
    private int cumPrintSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CumPrintSize {
      get { return cumPrintSize_; }
      set {
        cumPrintSize_ = value;
      }
    }

    /// <summary>Field number for the "avg_print_price" field.</summary>
    public const int AvgPrintPriceFieldNumber = 331;
    private double avgPrintPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgPrintPrice {
      get { return avgPrintPrice_; }
      set {
        avgPrintPrice_ = value;
      }
    }

    /// <summary>Field number for the "num_print_legs" field.</summary>
    public const int NumPrintLegsFieldNumber = 334;
    private int numPrintLegs_;
    /// <summary>
    /// total number of spread legs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumPrintLegs {
      get { return numPrintLegs_; }
      set {
        numPrintLegs_ = value;
      }
    }

    /// <summary>Field number for the "mark_m1" field.</summary>
    public const int MarkM1FieldNumber = 337;
    private float markM1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarkM1 {
      get { return markM1_; }
      set {
        markM1_ = value;
      }
    }

    /// <summary>Field number for the "u_mark_m1" field.</summary>
    public const int UMarkM1FieldNumber = 340;
    private float uMarkM1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UMarkM1 {
      get { return uMarkM1_; }
      set {
        uMarkM1_ = value;
      }
    }

    /// <summary>Field number for the "pnl_m1" field.</summary>
    public const int PnlM1FieldNumber = 343;
    private float pnlM1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlM1 {
      get { return pnlM1_; }
      set {
        pnlM1_ = value;
      }
    }

    /// <summary>Field number for the "pnl_m1_err" field.</summary>
    public const int PnlM1ErrFieldNumber = 346;
    private global::Spiderrock.Protobuf.YesNo pnlM1Err_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo PnlM1Err {
      get { return pnlM1Err_; }
      set {
        pnlM1Err_ = value;
      }
    }

    /// <summary>Field number for the "mark_m10" field.</summary>
    public const int MarkM10FieldNumber = 349;
    private float markM10_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarkM10 {
      get { return markM10_; }
      set {
        markM10_ = value;
      }
    }

    /// <summary>Field number for the "u_mark_m10" field.</summary>
    public const int UMarkM10FieldNumber = 352;
    private float uMarkM10_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UMarkM10 {
      get { return uMarkM10_; }
      set {
        uMarkM10_ = value;
      }
    }

    /// <summary>Field number for the "pnl_m10" field.</summary>
    public const int PnlM10FieldNumber = 355;
    private float pnlM10_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PnlM10 {
      get { return pnlM10_; }
      set {
        pnlM10_ = value;
      }
    }

    /// <summary>Field number for the "pnl_m10_err" field.</summary>
    public const int PnlM10ErrFieldNumber = 358;
    private global::Spiderrock.Protobuf.YesNo pnlM10Err_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo PnlM10Err {
      get { return pnlM10Err_; }
      set {
        pnlM10Err_ = value;
      }
    }

    /// <summary>Field number for the "legs" field.</summary>
    public const int LegsFieldNumber = 208;
    private static readonly pb::FieldCodec<global::Spiderrock.Protobuf.SpdrAuctionResult.Types.Legs> _repeated_legs_codec
        = pb::FieldCodec.ForMessage(1666, global::Spiderrock.Protobuf.SpdrAuctionResult.Types.Legs.Parser);
    private readonly pbc::RepeatedField<global::Spiderrock.Protobuf.SpdrAuctionResult.Types.Legs> legs_ = new pbc::RepeatedField<global::Spiderrock.Protobuf.SpdrAuctionResult.Types.Legs>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spiderrock.Protobuf.SpdrAuctionResult.Types.Legs> Legs {
      get { return legs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpdrAuctionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpdrAuctionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (SrAuctionID != other.SrAuctionID) return false;
      if (ExchAuctionId != other.ExchAuctionId) return false;
      if (ExchAuctionType != other.ExchAuctionType) return false;
      if (AuctionShape != other.AuctionShape) return false;
      if (AuctionType != other.AuctionType) return false;
      if (AuctionSide != other.AuctionSide) return false;
      if (MatchedSize != other.MatchedSize) return false;
      if (AuctionSize != other.AuctionSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AuctionPrice, other.AuctionPrice)) return false;
      if (IsAuctionPriceValid != other.IsAuctionPriceValid) return false;
      if (AuctionDuration != other.AuctionDuration) return false;
      if (AuctionStartTimestamp != other.AuctionStartTimestamp) return false;
      if (MinResponseSize != other.MinResponseSize) return false;
      if (ClientLimitType != other.ClientLimitType) return false;
      if (FirmType != other.FirmType) return false;
      if (MemberMPID != other.MemberMPID) return false;
      if (ClientAccnt != other.ClientAccnt) return false;
      if (OtherDetail != other.OtherDetail) return false;
      if (MarketStatus != other.MarketStatus) return false;
      if (NumUpdates != other.NumUpdates) return false;
      if (AuctionFinalTimestamp != other.AuctionFinalTimestamp) return false;
      if (AuctionStartSize != other.AuctionStartSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AuctionStartPrice, other.AuctionStartPrice)) return false;
      if (AuctionStartMatchedSize != other.AuctionStartMatchedSize) return false;
      if (NumResponses != other.NumResponses) return false;
      if (BestResponseSize != other.BestResponseSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BestResponsePrice, other.BestResponsePrice)) return false;
      if (CumFillQuantity != other.CumFillQuantity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillPrice, other.AvgFillPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AuctionFinalPrice, other.AuctionFinalPrice)) return false;
      if (SrcTimestamp != other.SrcTimestamp) return false;
      if (NetTimestamp != other.NetTimestamp) return false;
      if (DgwTimestamp != other.DgwTimestamp) return false;
      if (MmrTimestamp != other.MmrTimestamp) return false;
      if (EngTimestamp != other.EngTimestamp) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AuctionStart, other.AuctionStart)) return false;
      if (AuctionNbboStance != other.AuctionNbboStance) return false;
      if (AuctionExchStance != other.AuctionExchStance) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BidPrice, other.BidPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AskPrice, other.AskPrice)) return false;
      if (CumBidSize != other.CumBidSize) return false;
      if (CumAskSize != other.CumAskSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExchBidPrc, other.ExchBidPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExchAskPrc, other.ExchAskPrc)) return false;
      if (ExchBidSize != other.ExchBidSize) return false;
      if (ExchAskSize != other.ExchAskSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RspProbability, other.RspProbability)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Svol, other.Svol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sprc, other.Sprc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vega, other.Vega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Delta, other.Delta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SEdgeStart, other.SEdgeStart)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SEdgePrint, other.SEdgePrint)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UBid, other.UBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UAsk, other.UAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UBidT, other.UBidT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UAskT, other.UAskT)) return false;
      if (AuctionPrintResult != other.AuctionPrintResult) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirstPrintSize, other.FirstPrintSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FirstPrintPrice, other.FirstPrintPrice)) return false;
      if (FirstPrintSide != other.FirstPrintSide) return false;
      if (FirstPrintType != other.FirstPrintType) return false;
      if (FirstSrcTimestamp != other.FirstSrcTimestamp) return false;
      if (FirstNetTimestamp != other.FirstNetTimestamp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirstSrcLatency, other.FirstSrcLatency)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirstNetLatency, other.FirstNetLatency)) return false;
      if (FirstAwayPrtSize != other.FirstAwayPrtSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FirstAwayPrtPrice, other.FirstAwayPrtPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FirstAwayNetLatency, other.FirstAwayNetLatency)) return false;
      if (NumPrints != other.NumPrints) return false;
      if (CumPrintSize != other.CumPrintSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgPrintPrice, other.AvgPrintPrice)) return false;
      if (NumPrintLegs != other.NumPrintLegs) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarkM1, other.MarkM1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UMarkM1, other.UMarkM1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlM1, other.PnlM1)) return false;
      if (PnlM1Err != other.PnlM1Err) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarkM10, other.MarkM10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UMarkM10, other.UMarkM10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PnlM10, other.PnlM10)) return false;
      if (PnlM10Err != other.PnlM10Err) return false;
      if(!legs_.Equals(other.legs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (SrAuctionID != 0L) hash ^= SrAuctionID.GetHashCode();
      if (ExchAuctionId.Length != 0) hash ^= ExchAuctionId.GetHashCode();
      if (ExchAuctionType.Length != 0) hash ^= ExchAuctionType.GetHashCode();
      if (AuctionShape != global::Spiderrock.Protobuf.NoticeShape.Unspecified) hash ^= AuctionShape.GetHashCode();
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) hash ^= AuctionType.GetHashCode();
      if (AuctionSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= AuctionSide.GetHashCode();
      if (MatchedSize != 0) hash ^= MatchedSize.GetHashCode();
      if (AuctionSize != 0) hash ^= AuctionSize.GetHashCode();
      if (AuctionPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AuctionPrice);
      if (IsAuctionPriceValid != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsAuctionPriceValid.GetHashCode();
      if (AuctionDuration != 0) hash ^= AuctionDuration.GetHashCode();
      if (AuctionStartTimestamp != 0L) hash ^= AuctionStartTimestamp.GetHashCode();
      if (MinResponseSize != 0) hash ^= MinResponseSize.GetHashCode();
      if (ClientLimitType != global::Spiderrock.Protobuf.AuctionLimitType.Unspecified) hash ^= ClientLimitType.GetHashCode();
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) hash ^= FirmType.GetHashCode();
      if (MemberMPID.Length != 0) hash ^= MemberMPID.GetHashCode();
      if (ClientAccnt.Length != 0) hash ^= ClientAccnt.GetHashCode();
      if (OtherDetail.Length != 0) hash ^= OtherDetail.GetHashCode();
      if (MarketStatus != global::Spiderrock.Protobuf.MarketStatus.Unspecified) hash ^= MarketStatus.GetHashCode();
      if (NumUpdates != 0) hash ^= NumUpdates.GetHashCode();
      if (AuctionFinalTimestamp != 0L) hash ^= AuctionFinalTimestamp.GetHashCode();
      if (AuctionStartSize != 0) hash ^= AuctionStartSize.GetHashCode();
      if (AuctionStartPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AuctionStartPrice);
      if (AuctionStartMatchedSize != 0) hash ^= AuctionStartMatchedSize.GetHashCode();
      if (NumResponses != 0) hash ^= NumResponses.GetHashCode();
      if (BestResponseSize != 0) hash ^= BestResponseSize.GetHashCode();
      if (BestResponsePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BestResponsePrice);
      if (CumFillQuantity != 0) hash ^= CumFillQuantity.GetHashCode();
      if (AvgFillPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillPrice);
      if (AuctionFinalPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AuctionFinalPrice);
      if (SrcTimestamp != 0L) hash ^= SrcTimestamp.GetHashCode();
      if (NetTimestamp != 0L) hash ^= NetTimestamp.GetHashCode();
      if (DgwTimestamp != 0L) hash ^= DgwTimestamp.GetHashCode();
      if (MmrTimestamp != 0L) hash ^= MmrTimestamp.GetHashCode();
      if (EngTimestamp != 0L) hash ^= EngTimestamp.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (AuctionStart != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AuctionStart);
      if (AuctionNbboStance != global::Spiderrock.Protobuf.AuctionMktStance.Unspecified) hash ^= AuctionNbboStance.GetHashCode();
      if (AuctionExchStance != global::Spiderrock.Protobuf.AuctionMktStance.Unspecified) hash ^= AuctionExchStance.GetHashCode();
      if (BidPrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BidPrice);
      if (AskPrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AskPrice);
      if (CumBidSize != 0) hash ^= CumBidSize.GetHashCode();
      if (CumAskSize != 0) hash ^= CumAskSize.GetHashCode();
      if (ExchBidPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExchBidPrc);
      if (ExchAskPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExchAskPrc);
      if (ExchBidSize != 0) hash ^= ExchBidSize.GetHashCode();
      if (ExchAskSize != 0) hash ^= ExchAskSize.GetHashCode();
      if (RspProbability != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RspProbability);
      if (Svol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Svol);
      if (Sprc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sprc);
      if (Vega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vega);
      if (Delta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Delta);
      if (SEdgeStart != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SEdgeStart);
      if (SEdgePrint != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SEdgePrint);
      if (UBid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UBid);
      if (UAsk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UAsk);
      if (UBidT != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UBidT);
      if (UAskT != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UAskT);
      if (AuctionPrintResult != global::Spiderrock.Protobuf.AuctionPrintResult.Unspecified) hash ^= AuctionPrintResult.GetHashCode();
      if (FirstPrintSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirstPrintSize);
      if (FirstPrintPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FirstPrintPrice);
      if (FirstPrintSide != global::Spiderrock.Protobuf.PrtSide.Unspecified) hash ^= FirstPrintSide.GetHashCode();
      if (FirstPrintType != global::Spiderrock.Protobuf.PrtType.Unspecified) hash ^= FirstPrintType.GetHashCode();
      if (FirstSrcTimestamp != 0L) hash ^= FirstSrcTimestamp.GetHashCode();
      if (FirstNetTimestamp != 0L) hash ^= FirstNetTimestamp.GetHashCode();
      if (FirstSrcLatency != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirstSrcLatency);
      if (FirstNetLatency != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirstNetLatency);
      if (FirstAwayPrtSize != 0) hash ^= FirstAwayPrtSize.GetHashCode();
      if (FirstAwayPrtPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FirstAwayPrtPrice);
      if (FirstAwayNetLatency != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FirstAwayNetLatency);
      if (NumPrints != 0) hash ^= NumPrints.GetHashCode();
      if (CumPrintSize != 0) hash ^= CumPrintSize.GetHashCode();
      if (AvgPrintPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgPrintPrice);
      if (NumPrintLegs != 0) hash ^= NumPrintLegs.GetHashCode();
      if (MarkM1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarkM1);
      if (UMarkM1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UMarkM1);
      if (PnlM1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlM1);
      if (PnlM1Err != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= PnlM1Err.GetHashCode();
      if (MarkM10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarkM10);
      if (UMarkM10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UMarkM10);
      if (PnlM10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PnlM10);
      if (PnlM10Err != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= PnlM10Err.GetHashCode();
      hash ^= legs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SrAuctionID != 0L) {
        output.WriteRawTag(160, 6);
        output.WriteInt64(SrAuctionID);
      }
      if (ExchAuctionId.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(ExchAuctionId);
      }
      if (ExchAuctionType.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(ExchAuctionType);
      }
      if (AuctionShape != global::Spiderrock.Protobuf.NoticeShape.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) AuctionShape);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) AuctionType);
      }
      if (AuctionSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) AuctionSide);
      }
      if (MatchedSize != 0) {
        output.WriteRawTag(176, 7);
        output.WriteInt32(MatchedSize);
      }
      if (AuctionSize != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(AuctionSize);
      }
      if (AuctionPrice != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(AuctionPrice);
      }
      if (IsAuctionPriceValid != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) IsAuctionPriceValid);
      }
      if (AuctionDuration != 0) {
        output.WriteRawTag(144, 8);
        output.WriteInt32(AuctionDuration);
      }
      if (AuctionStartTimestamp != 0L) {
        output.WriteRawTag(168, 8);
        output.WriteInt64(AuctionStartTimestamp);
      }
      if (MinResponseSize != 0) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(MinResponseSize);
      }
      if (ClientLimitType != global::Spiderrock.Protobuf.AuctionLimitType.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) ClientLimitType);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) FirmType);
      }
      if (MemberMPID.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteString(MemberMPID);
      }
      if (ClientAccnt.Length != 0) {
        output.WriteRawTag(162, 9);
        output.WriteString(ClientAccnt);
      }
      if (OtherDetail.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(OtherDetail);
      }
      if (MarketStatus != global::Spiderrock.Protobuf.MarketStatus.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) MarketStatus);
      }
      if (NumUpdates != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(NumUpdates);
      }
      if (AuctionFinalTimestamp != 0L) {
        output.WriteRawTag(128, 10);
        output.WriteInt64(AuctionFinalTimestamp);
      }
      if (AuctionStartSize != 0) {
        output.WriteRawTag(152, 10);
        output.WriteInt32(AuctionStartSize);
      }
      if (AuctionStartPrice != 0D) {
        output.WriteRawTag(177, 10);
        output.WriteDouble(AuctionStartPrice);
      }
      if (AuctionStartMatchedSize != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(AuctionStartMatchedSize);
      }
      if (NumResponses != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(NumResponses);
      }
      if (BestResponseSize != 0) {
        output.WriteRawTag(248, 10);
        output.WriteInt32(BestResponseSize);
      }
      if (BestResponsePrice != 0D) {
        output.WriteRawTag(145, 11);
        output.WriteDouble(BestResponsePrice);
      }
      if (CumFillQuantity != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(CumFillQuantity);
      }
      if (AvgFillPrice != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(AvgFillPrice);
      }
      if (AuctionFinalPrice != 0D) {
        output.WriteRawTag(217, 11);
        output.WriteDouble(AuctionFinalPrice);
      }
      if (SrcTimestamp != 0L) {
        output.WriteRawTag(240, 11);
        output.WriteInt64(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(136, 12);
        output.WriteInt64(NetTimestamp);
      }
      if (DgwTimestamp != 0L) {
        output.WriteRawTag(160, 12);
        output.WriteInt64(DgwTimestamp);
      }
      if (MmrTimestamp != 0L) {
        output.WriteRawTag(184, 12);
        output.WriteInt64(MmrTimestamp);
      }
      if (EngTimestamp != 0L) {
        output.WriteRawTag(208, 12);
        output.WriteInt64(EngTimestamp);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(234, 12);
        output.WriteMessage(Timestamp);
      }
      legs_.WriteTo(output, _repeated_legs_codec);
      if (AuctionStart != 0D) {
        output.WriteRawTag(249, 13);
        output.WriteDouble(AuctionStart);
      }
      if (AuctionNbboStance != global::Spiderrock.Protobuf.AuctionMktStance.Unspecified) {
        output.WriteRawTag(144, 14);
        output.WriteEnum((int) AuctionNbboStance);
      }
      if (AuctionExchStance != global::Spiderrock.Protobuf.AuctionMktStance.Unspecified) {
        output.WriteRawTag(168, 14);
        output.WriteEnum((int) AuctionExchStance);
      }
      if (BidPrice != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(BidPrice);
      }
      if (AskPrice != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(AskPrice);
      }
      if (CumBidSize != 0) {
        output.WriteRawTag(240, 14);
        output.WriteInt32(CumBidSize);
      }
      if (CumAskSize != 0) {
        output.WriteRawTag(136, 15);
        output.WriteInt32(CumAskSize);
      }
      if (ExchBidPrc != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(ExchBidPrc);
      }
      if (ExchAskPrc != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(ExchAskPrc);
      }
      if (ExchBidSize != 0) {
        output.WriteRawTag(208, 15);
        output.WriteInt32(ExchBidSize);
      }
      if (ExchAskSize != 0) {
        output.WriteRawTag(232, 15);
        output.WriteInt32(ExchAskSize);
      }
      if (RspProbability != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(RspProbability);
      }
      if (Svol != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(Svol);
      }
      if (Sprc != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(Sprc);
      }
      if (Vega != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(Vega);
      }
      if (Delta != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(Delta);
      }
      if (SEdgeStart != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(SEdgeStart);
      }
      if (SEdgePrint != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(SEdgePrint);
      }
      if (UBid != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(UBid);
      }
      if (UAsk != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(UAsk);
      }
      if (UBidT != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(UBidT);
      }
      if (UAskT != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(UAskT);
      }
      if (AuctionPrintResult != global::Spiderrock.Protobuf.AuctionPrintResult.Unspecified) {
        output.WriteRawTag(136, 18);
        output.WriteEnum((int) AuctionPrintResult);
      }
      if (FirstPrintSize != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(FirstPrintSize);
      }
      if (FirstPrintPrice != 0D) {
        output.WriteRawTag(185, 18);
        output.WriteDouble(FirstPrintPrice);
      }
      if (FirstPrintSide != global::Spiderrock.Protobuf.PrtSide.Unspecified) {
        output.WriteRawTag(208, 18);
        output.WriteEnum((int) FirstPrintSide);
      }
      if (FirstPrintType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        output.WriteRawTag(232, 18);
        output.WriteEnum((int) FirstPrintType);
      }
      if (FirstSrcTimestamp != 0L) {
        output.WriteRawTag(128, 19);
        output.WriteInt64(FirstSrcTimestamp);
      }
      if (FirstNetTimestamp != 0L) {
        output.WriteRawTag(152, 19);
        output.WriteInt64(FirstNetTimestamp);
      }
      if (FirstSrcLatency != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(FirstSrcLatency);
      }
      if (FirstNetLatency != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(FirstNetLatency);
      }
      if (FirstAwayPrtSize != 0) {
        output.WriteRawTag(224, 19);
        output.WriteInt32(FirstAwayPrtSize);
      }
      if (FirstAwayPrtPrice != 0D) {
        output.WriteRawTag(249, 19);
        output.WriteDouble(FirstAwayPrtPrice);
      }
      if (FirstAwayNetLatency != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(FirstAwayNetLatency);
      }
      if (NumPrints != 0) {
        output.WriteRawTag(168, 20);
        output.WriteInt32(NumPrints);
      }
      if (CumPrintSize != 0) {
        output.WriteRawTag(192, 20);
        output.WriteInt32(CumPrintSize);
      }
      if (AvgPrintPrice != 0D) {
        output.WriteRawTag(217, 20);
        output.WriteDouble(AvgPrintPrice);
      }
      if (NumPrintLegs != 0) {
        output.WriteRawTag(240, 20);
        output.WriteInt32(NumPrintLegs);
      }
      if (MarkM1 != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(MarkM1);
      }
      if (UMarkM1 != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(UMarkM1);
      }
      if (PnlM1 != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(PnlM1);
      }
      if (PnlM1Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(208, 21);
        output.WriteEnum((int) PnlM1Err);
      }
      if (MarkM10 != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(MarkM10);
      }
      if (UMarkM10 != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(UMarkM10);
      }
      if (PnlM10 != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(PnlM10);
      }
      if (PnlM10Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(176, 22);
        output.WriteEnum((int) PnlM10Err);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (SrAuctionID != 0L) {
        output.WriteRawTag(160, 6);
        output.WriteInt64(SrAuctionID);
      }
      if (ExchAuctionId.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(ExchAuctionId);
      }
      if (ExchAuctionType.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(ExchAuctionType);
      }
      if (AuctionShape != global::Spiderrock.Protobuf.NoticeShape.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) AuctionShape);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) AuctionType);
      }
      if (AuctionSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) AuctionSide);
      }
      if (MatchedSize != 0) {
        output.WriteRawTag(176, 7);
        output.WriteInt32(MatchedSize);
      }
      if (AuctionSize != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(AuctionSize);
      }
      if (AuctionPrice != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(AuctionPrice);
      }
      if (IsAuctionPriceValid != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) IsAuctionPriceValid);
      }
      if (AuctionDuration != 0) {
        output.WriteRawTag(144, 8);
        output.WriteInt32(AuctionDuration);
      }
      if (AuctionStartTimestamp != 0L) {
        output.WriteRawTag(168, 8);
        output.WriteInt64(AuctionStartTimestamp);
      }
      if (MinResponseSize != 0) {
        output.WriteRawTag(192, 8);
        output.WriteInt32(MinResponseSize);
      }
      if (ClientLimitType != global::Spiderrock.Protobuf.AuctionLimitType.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) ClientLimitType);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) FirmType);
      }
      if (MemberMPID.Length != 0) {
        output.WriteRawTag(138, 9);
        output.WriteString(MemberMPID);
      }
      if (ClientAccnt.Length != 0) {
        output.WriteRawTag(162, 9);
        output.WriteString(ClientAccnt);
      }
      if (OtherDetail.Length != 0) {
        output.WriteRawTag(186, 9);
        output.WriteString(OtherDetail);
      }
      if (MarketStatus != global::Spiderrock.Protobuf.MarketStatus.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) MarketStatus);
      }
      if (NumUpdates != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(NumUpdates);
      }
      if (AuctionFinalTimestamp != 0L) {
        output.WriteRawTag(128, 10);
        output.WriteInt64(AuctionFinalTimestamp);
      }
      if (AuctionStartSize != 0) {
        output.WriteRawTag(152, 10);
        output.WriteInt32(AuctionStartSize);
      }
      if (AuctionStartPrice != 0D) {
        output.WriteRawTag(177, 10);
        output.WriteDouble(AuctionStartPrice);
      }
      if (AuctionStartMatchedSize != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(AuctionStartMatchedSize);
      }
      if (NumResponses != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(NumResponses);
      }
      if (BestResponseSize != 0) {
        output.WriteRawTag(248, 10);
        output.WriteInt32(BestResponseSize);
      }
      if (BestResponsePrice != 0D) {
        output.WriteRawTag(145, 11);
        output.WriteDouble(BestResponsePrice);
      }
      if (CumFillQuantity != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(CumFillQuantity);
      }
      if (AvgFillPrice != 0D) {
        output.WriteRawTag(193, 11);
        output.WriteDouble(AvgFillPrice);
      }
      if (AuctionFinalPrice != 0D) {
        output.WriteRawTag(217, 11);
        output.WriteDouble(AuctionFinalPrice);
      }
      if (SrcTimestamp != 0L) {
        output.WriteRawTag(240, 11);
        output.WriteInt64(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(136, 12);
        output.WriteInt64(NetTimestamp);
      }
      if (DgwTimestamp != 0L) {
        output.WriteRawTag(160, 12);
        output.WriteInt64(DgwTimestamp);
      }
      if (MmrTimestamp != 0L) {
        output.WriteRawTag(184, 12);
        output.WriteInt64(MmrTimestamp);
      }
      if (EngTimestamp != 0L) {
        output.WriteRawTag(208, 12);
        output.WriteInt64(EngTimestamp);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(234, 12);
        output.WriteMessage(Timestamp);
      }
      legs_.WriteTo(ref output, _repeated_legs_codec);
      if (AuctionStart != 0D) {
        output.WriteRawTag(249, 13);
        output.WriteDouble(AuctionStart);
      }
      if (AuctionNbboStance != global::Spiderrock.Protobuf.AuctionMktStance.Unspecified) {
        output.WriteRawTag(144, 14);
        output.WriteEnum((int) AuctionNbboStance);
      }
      if (AuctionExchStance != global::Spiderrock.Protobuf.AuctionMktStance.Unspecified) {
        output.WriteRawTag(168, 14);
        output.WriteEnum((int) AuctionExchStance);
      }
      if (BidPrice != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(BidPrice);
      }
      if (AskPrice != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(AskPrice);
      }
      if (CumBidSize != 0) {
        output.WriteRawTag(240, 14);
        output.WriteInt32(CumBidSize);
      }
      if (CumAskSize != 0) {
        output.WriteRawTag(136, 15);
        output.WriteInt32(CumAskSize);
      }
      if (ExchBidPrc != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(ExchBidPrc);
      }
      if (ExchAskPrc != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(ExchAskPrc);
      }
      if (ExchBidSize != 0) {
        output.WriteRawTag(208, 15);
        output.WriteInt32(ExchBidSize);
      }
      if (ExchAskSize != 0) {
        output.WriteRawTag(232, 15);
        output.WriteInt32(ExchAskSize);
      }
      if (RspProbability != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(RspProbability);
      }
      if (Svol != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(Svol);
      }
      if (Sprc != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(Sprc);
      }
      if (Vega != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(Vega);
      }
      if (Delta != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(Delta);
      }
      if (SEdgeStart != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(SEdgeStart);
      }
      if (SEdgePrint != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(SEdgePrint);
      }
      if (UBid != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(UBid);
      }
      if (UAsk != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(UAsk);
      }
      if (UBidT != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(UBidT);
      }
      if (UAskT != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(UAskT);
      }
      if (AuctionPrintResult != global::Spiderrock.Protobuf.AuctionPrintResult.Unspecified) {
        output.WriteRawTag(136, 18);
        output.WriteEnum((int) AuctionPrintResult);
      }
      if (FirstPrintSize != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(FirstPrintSize);
      }
      if (FirstPrintPrice != 0D) {
        output.WriteRawTag(185, 18);
        output.WriteDouble(FirstPrintPrice);
      }
      if (FirstPrintSide != global::Spiderrock.Protobuf.PrtSide.Unspecified) {
        output.WriteRawTag(208, 18);
        output.WriteEnum((int) FirstPrintSide);
      }
      if (FirstPrintType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        output.WriteRawTag(232, 18);
        output.WriteEnum((int) FirstPrintType);
      }
      if (FirstSrcTimestamp != 0L) {
        output.WriteRawTag(128, 19);
        output.WriteInt64(FirstSrcTimestamp);
      }
      if (FirstNetTimestamp != 0L) {
        output.WriteRawTag(152, 19);
        output.WriteInt64(FirstNetTimestamp);
      }
      if (FirstSrcLatency != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(FirstSrcLatency);
      }
      if (FirstNetLatency != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(FirstNetLatency);
      }
      if (FirstAwayPrtSize != 0) {
        output.WriteRawTag(224, 19);
        output.WriteInt32(FirstAwayPrtSize);
      }
      if (FirstAwayPrtPrice != 0D) {
        output.WriteRawTag(249, 19);
        output.WriteDouble(FirstAwayPrtPrice);
      }
      if (FirstAwayNetLatency != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(FirstAwayNetLatency);
      }
      if (NumPrints != 0) {
        output.WriteRawTag(168, 20);
        output.WriteInt32(NumPrints);
      }
      if (CumPrintSize != 0) {
        output.WriteRawTag(192, 20);
        output.WriteInt32(CumPrintSize);
      }
      if (AvgPrintPrice != 0D) {
        output.WriteRawTag(217, 20);
        output.WriteDouble(AvgPrintPrice);
      }
      if (NumPrintLegs != 0) {
        output.WriteRawTag(240, 20);
        output.WriteInt32(NumPrintLegs);
      }
      if (MarkM1 != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(MarkM1);
      }
      if (UMarkM1 != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(UMarkM1);
      }
      if (PnlM1 != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(PnlM1);
      }
      if (PnlM1Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(208, 21);
        output.WriteEnum((int) PnlM1Err);
      }
      if (MarkM10 != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(MarkM10);
      }
      if (UMarkM10 != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(UMarkM10);
      }
      if (PnlM10 != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(PnlM10);
      }
      if (PnlM10Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(176, 22);
        output.WriteEnum((int) PnlM10Err);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (SrAuctionID != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SrAuctionID);
      }
      if (ExchAuctionId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExchAuctionId);
      }
      if (ExchAuctionType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExchAuctionType);
      }
      if (AuctionShape != global::Spiderrock.Protobuf.NoticeShape.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionShape);
      }
      if (AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionType);
      }
      if (AuctionSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionSide);
      }
      if (MatchedSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MatchedSize);
      }
      if (AuctionSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AuctionSize);
      }
      if (AuctionPrice != 0D) {
        size += 2 + 8;
      }
      if (IsAuctionPriceValid != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsAuctionPriceValid);
      }
      if (AuctionDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AuctionDuration);
      }
      if (AuctionStartTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AuctionStartTimestamp);
      }
      if (MinResponseSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MinResponseSize);
      }
      if (ClientLimitType != global::Spiderrock.Protobuf.AuctionLimitType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ClientLimitType);
      }
      if (FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FirmType);
      }
      if (MemberMPID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MemberMPID);
      }
      if (ClientAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientAccnt);
      }
      if (OtherDetail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OtherDetail);
      }
      if (MarketStatus != global::Spiderrock.Protobuf.MarketStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MarketStatus);
      }
      if (NumUpdates != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumUpdates);
      }
      if (AuctionFinalTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AuctionFinalTimestamp);
      }
      if (AuctionStartSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AuctionStartSize);
      }
      if (AuctionStartPrice != 0D) {
        size += 2 + 8;
      }
      if (AuctionStartMatchedSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AuctionStartMatchedSize);
      }
      if (NumResponses != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumResponses);
      }
      if (BestResponseSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BestResponseSize);
      }
      if (BestResponsePrice != 0D) {
        size += 2 + 8;
      }
      if (CumFillQuantity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CumFillQuantity);
      }
      if (AvgFillPrice != 0D) {
        size += 2 + 8;
      }
      if (AuctionFinalPrice != 0D) {
        size += 2 + 8;
      }
      if (SrcTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NetTimestamp);
      }
      if (DgwTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(DgwTimestamp);
      }
      if (MmrTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MmrTimestamp);
      }
      if (EngTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EngTimestamp);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (AuctionStart != 0D) {
        size += 2 + 8;
      }
      if (AuctionNbboStance != global::Spiderrock.Protobuf.AuctionMktStance.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionNbboStance);
      }
      if (AuctionExchStance != global::Spiderrock.Protobuf.AuctionMktStance.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionExchStance);
      }
      if (BidPrice != 0F) {
        size += 2 + 4;
      }
      if (AskPrice != 0F) {
        size += 2 + 4;
      }
      if (CumBidSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CumBidSize);
      }
      if (CumAskSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CumAskSize);
      }
      if (ExchBidPrc != 0F) {
        size += 2 + 4;
      }
      if (ExchAskPrc != 0F) {
        size += 2 + 4;
      }
      if (ExchBidSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExchBidSize);
      }
      if (ExchAskSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ExchAskSize);
      }
      if (RspProbability != 0F) {
        size += 2 + 4;
      }
      if (Svol != 0F) {
        size += 2 + 4;
      }
      if (Sprc != 0F) {
        size += 2 + 4;
      }
      if (Vega != 0F) {
        size += 2 + 4;
      }
      if (Delta != 0F) {
        size += 2 + 4;
      }
      if (SEdgeStart != 0F) {
        size += 2 + 4;
      }
      if (SEdgePrint != 0F) {
        size += 2 + 4;
      }
      if (UBid != 0F) {
        size += 2 + 4;
      }
      if (UAsk != 0F) {
        size += 2 + 4;
      }
      if (UBidT != 0F) {
        size += 2 + 4;
      }
      if (UAskT != 0F) {
        size += 2 + 4;
      }
      if (AuctionPrintResult != global::Spiderrock.Protobuf.AuctionPrintResult.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionPrintResult);
      }
      if (FirstPrintSize != 0F) {
        size += 2 + 4;
      }
      if (FirstPrintPrice != 0D) {
        size += 2 + 8;
      }
      if (FirstPrintSide != global::Spiderrock.Protobuf.PrtSide.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FirstPrintSide);
      }
      if (FirstPrintType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FirstPrintType);
      }
      if (FirstSrcTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FirstSrcTimestamp);
      }
      if (FirstNetTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FirstNetTimestamp);
      }
      if (FirstSrcLatency != 0F) {
        size += 2 + 4;
      }
      if (FirstNetLatency != 0F) {
        size += 2 + 4;
      }
      if (FirstAwayPrtSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FirstAwayPrtSize);
      }
      if (FirstAwayPrtPrice != 0D) {
        size += 2 + 8;
      }
      if (FirstAwayNetLatency != 0F) {
        size += 2 + 4;
      }
      if (NumPrints != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumPrints);
      }
      if (CumPrintSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CumPrintSize);
      }
      if (AvgPrintPrice != 0D) {
        size += 2 + 8;
      }
      if (NumPrintLegs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumPrintLegs);
      }
      if (MarkM1 != 0F) {
        size += 2 + 4;
      }
      if (UMarkM1 != 0F) {
        size += 2 + 4;
      }
      if (PnlM1 != 0F) {
        size += 2 + 4;
      }
      if (PnlM1Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PnlM1Err);
      }
      if (MarkM10 != 0F) {
        size += 2 + 4;
      }
      if (UMarkM10 != 0F) {
        size += 2 + 4;
      }
      if (PnlM10 != 0F) {
        size += 2 + 4;
      }
      if (PnlM10Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PnlM10Err);
      }
      size += legs_.CalculateSize(_repeated_legs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpdrAuctionResult other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SpdrAuctionResult.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.SrAuctionID != 0L) {
        SrAuctionID = other.SrAuctionID;
      }
      if (other.ExchAuctionId.Length != 0) {
        ExchAuctionId = other.ExchAuctionId;
      }
      if (other.ExchAuctionType.Length != 0) {
        ExchAuctionType = other.ExchAuctionType;
      }
      if (other.AuctionShape != global::Spiderrock.Protobuf.NoticeShape.Unspecified) {
        AuctionShape = other.AuctionShape;
      }
      if (other.AuctionType != global::Spiderrock.Protobuf.AuctionType.Unspecified) {
        AuctionType = other.AuctionType;
      }
      if (other.AuctionSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
        AuctionSide = other.AuctionSide;
      }
      if (other.MatchedSize != 0) {
        MatchedSize = other.MatchedSize;
      }
      if (other.AuctionSize != 0) {
        AuctionSize = other.AuctionSize;
      }
      if (other.AuctionPrice != 0D) {
        AuctionPrice = other.AuctionPrice;
      }
      if (other.IsAuctionPriceValid != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsAuctionPriceValid = other.IsAuctionPriceValid;
      }
      if (other.AuctionDuration != 0) {
        AuctionDuration = other.AuctionDuration;
      }
      if (other.AuctionStartTimestamp != 0L) {
        AuctionStartTimestamp = other.AuctionStartTimestamp;
      }
      if (other.MinResponseSize != 0) {
        MinResponseSize = other.MinResponseSize;
      }
      if (other.ClientLimitType != global::Spiderrock.Protobuf.AuctionLimitType.Unspecified) {
        ClientLimitType = other.ClientLimitType;
      }
      if (other.FirmType != global::Spiderrock.Protobuf.FirmType.Unspecified) {
        FirmType = other.FirmType;
      }
      if (other.MemberMPID.Length != 0) {
        MemberMPID = other.MemberMPID;
      }
      if (other.ClientAccnt.Length != 0) {
        ClientAccnt = other.ClientAccnt;
      }
      if (other.OtherDetail.Length != 0) {
        OtherDetail = other.OtherDetail;
      }
      if (other.MarketStatus != global::Spiderrock.Protobuf.MarketStatus.Unspecified) {
        MarketStatus = other.MarketStatus;
      }
      if (other.NumUpdates != 0) {
        NumUpdates = other.NumUpdates;
      }
      if (other.AuctionFinalTimestamp != 0L) {
        AuctionFinalTimestamp = other.AuctionFinalTimestamp;
      }
      if (other.AuctionStartSize != 0) {
        AuctionStartSize = other.AuctionStartSize;
      }
      if (other.AuctionStartPrice != 0D) {
        AuctionStartPrice = other.AuctionStartPrice;
      }
      if (other.AuctionStartMatchedSize != 0) {
        AuctionStartMatchedSize = other.AuctionStartMatchedSize;
      }
      if (other.NumResponses != 0) {
        NumResponses = other.NumResponses;
      }
      if (other.BestResponseSize != 0) {
        BestResponseSize = other.BestResponseSize;
      }
      if (other.BestResponsePrice != 0D) {
        BestResponsePrice = other.BestResponsePrice;
      }
      if (other.CumFillQuantity != 0) {
        CumFillQuantity = other.CumFillQuantity;
      }
      if (other.AvgFillPrice != 0D) {
        AvgFillPrice = other.AvgFillPrice;
      }
      if (other.AuctionFinalPrice != 0D) {
        AuctionFinalPrice = other.AuctionFinalPrice;
      }
      if (other.SrcTimestamp != 0L) {
        SrcTimestamp = other.SrcTimestamp;
      }
      if (other.NetTimestamp != 0L) {
        NetTimestamp = other.NetTimestamp;
      }
      if (other.DgwTimestamp != 0L) {
        DgwTimestamp = other.DgwTimestamp;
      }
      if (other.MmrTimestamp != 0L) {
        MmrTimestamp = other.MmrTimestamp;
      }
      if (other.EngTimestamp != 0L) {
        EngTimestamp = other.EngTimestamp;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.AuctionStart != 0D) {
        AuctionStart = other.AuctionStart;
      }
      if (other.AuctionNbboStance != global::Spiderrock.Protobuf.AuctionMktStance.Unspecified) {
        AuctionNbboStance = other.AuctionNbboStance;
      }
      if (other.AuctionExchStance != global::Spiderrock.Protobuf.AuctionMktStance.Unspecified) {
        AuctionExchStance = other.AuctionExchStance;
      }
      if (other.BidPrice != 0F) {
        BidPrice = other.BidPrice;
      }
      if (other.AskPrice != 0F) {
        AskPrice = other.AskPrice;
      }
      if (other.CumBidSize != 0) {
        CumBidSize = other.CumBidSize;
      }
      if (other.CumAskSize != 0) {
        CumAskSize = other.CumAskSize;
      }
      if (other.ExchBidPrc != 0F) {
        ExchBidPrc = other.ExchBidPrc;
      }
      if (other.ExchAskPrc != 0F) {
        ExchAskPrc = other.ExchAskPrc;
      }
      if (other.ExchBidSize != 0) {
        ExchBidSize = other.ExchBidSize;
      }
      if (other.ExchAskSize != 0) {
        ExchAskSize = other.ExchAskSize;
      }
      if (other.RspProbability != 0F) {
        RspProbability = other.RspProbability;
      }
      if (other.Svol != 0F) {
        Svol = other.Svol;
      }
      if (other.Sprc != 0F) {
        Sprc = other.Sprc;
      }
      if (other.Vega != 0F) {
        Vega = other.Vega;
      }
      if (other.Delta != 0F) {
        Delta = other.Delta;
      }
      if (other.SEdgeStart != 0F) {
        SEdgeStart = other.SEdgeStart;
      }
      if (other.SEdgePrint != 0F) {
        SEdgePrint = other.SEdgePrint;
      }
      if (other.UBid != 0F) {
        UBid = other.UBid;
      }
      if (other.UAsk != 0F) {
        UAsk = other.UAsk;
      }
      if (other.UBidT != 0F) {
        UBidT = other.UBidT;
      }
      if (other.UAskT != 0F) {
        UAskT = other.UAskT;
      }
      if (other.AuctionPrintResult != global::Spiderrock.Protobuf.AuctionPrintResult.Unspecified) {
        AuctionPrintResult = other.AuctionPrintResult;
      }
      if (other.FirstPrintSize != 0F) {
        FirstPrintSize = other.FirstPrintSize;
      }
      if (other.FirstPrintPrice != 0D) {
        FirstPrintPrice = other.FirstPrintPrice;
      }
      if (other.FirstPrintSide != global::Spiderrock.Protobuf.PrtSide.Unspecified) {
        FirstPrintSide = other.FirstPrintSide;
      }
      if (other.FirstPrintType != global::Spiderrock.Protobuf.PrtType.Unspecified) {
        FirstPrintType = other.FirstPrintType;
      }
      if (other.FirstSrcTimestamp != 0L) {
        FirstSrcTimestamp = other.FirstSrcTimestamp;
      }
      if (other.FirstNetTimestamp != 0L) {
        FirstNetTimestamp = other.FirstNetTimestamp;
      }
      if (other.FirstSrcLatency != 0F) {
        FirstSrcLatency = other.FirstSrcLatency;
      }
      if (other.FirstNetLatency != 0F) {
        FirstNetLatency = other.FirstNetLatency;
      }
      if (other.FirstAwayPrtSize != 0) {
        FirstAwayPrtSize = other.FirstAwayPrtSize;
      }
      if (other.FirstAwayPrtPrice != 0D) {
        FirstAwayPrtPrice = other.FirstAwayPrtPrice;
      }
      if (other.FirstAwayNetLatency != 0F) {
        FirstAwayNetLatency = other.FirstAwayNetLatency;
      }
      if (other.NumPrints != 0) {
        NumPrints = other.NumPrints;
      }
      if (other.CumPrintSize != 0) {
        CumPrintSize = other.CumPrintSize;
      }
      if (other.AvgPrintPrice != 0D) {
        AvgPrintPrice = other.AvgPrintPrice;
      }
      if (other.NumPrintLegs != 0) {
        NumPrintLegs = other.NumPrintLegs;
      }
      if (other.MarkM1 != 0F) {
        MarkM1 = other.MarkM1;
      }
      if (other.UMarkM1 != 0F) {
        UMarkM1 = other.UMarkM1;
      }
      if (other.PnlM1 != 0F) {
        PnlM1 = other.PnlM1;
      }
      if (other.PnlM1Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        PnlM1Err = other.PnlM1Err;
      }
      if (other.MarkM10 != 0F) {
        MarkM10 = other.MarkM10;
      }
      if (other.UMarkM10 != 0F) {
        UMarkM10 = other.UMarkM10;
      }
      if (other.PnlM10 != 0F) {
        PnlM10 = other.PnlM10;
      }
      if (other.PnlM10Err != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        PnlM10Err = other.PnlM10Err;
      }
      legs_.Add(other.legs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrAuctionResult.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SrAuctionID = input.ReadInt64();
            break;
          }
          case 826: {
            ExchAuctionId = input.ReadString();
            break;
          }
          case 850: {
            ExchAuctionType = input.ReadString();
            break;
          }
          case 872: {
            AuctionShape = (global::Spiderrock.Protobuf.NoticeShape) input.ReadEnum();
            break;
          }
          case 896: {
            AuctionType = (global::Spiderrock.Protobuf.AuctionType) input.ReadEnum();
            break;
          }
          case 920: {
            AuctionSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 944: {
            MatchedSize = input.ReadInt32();
            break;
          }
          case 968: {
            AuctionSize = input.ReadInt32();
            break;
          }
          case 993: {
            AuctionPrice = input.ReadDouble();
            break;
          }
          case 1016: {
            IsAuctionPriceValid = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1040: {
            AuctionDuration = input.ReadInt32();
            break;
          }
          case 1064: {
            AuctionStartTimestamp = input.ReadInt64();
            break;
          }
          case 1088: {
            MinResponseSize = input.ReadInt32();
            break;
          }
          case 1112: {
            ClientLimitType = (global::Spiderrock.Protobuf.AuctionLimitType) input.ReadEnum();
            break;
          }
          case 1136: {
            FirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 1162: {
            MemberMPID = input.ReadString();
            break;
          }
          case 1186: {
            ClientAccnt = input.ReadString();
            break;
          }
          case 1210: {
            OtherDetail = input.ReadString();
            break;
          }
          case 1232: {
            MarketStatus = (global::Spiderrock.Protobuf.MarketStatus) input.ReadEnum();
            break;
          }
          case 1256: {
            NumUpdates = input.ReadInt32();
            break;
          }
          case 1280: {
            AuctionFinalTimestamp = input.ReadInt64();
            break;
          }
          case 1304: {
            AuctionStartSize = input.ReadInt32();
            break;
          }
          case 1329: {
            AuctionStartPrice = input.ReadDouble();
            break;
          }
          case 1352: {
            AuctionStartMatchedSize = input.ReadInt32();
            break;
          }
          case 1376: {
            NumResponses = input.ReadInt32();
            break;
          }
          case 1400: {
            BestResponseSize = input.ReadInt32();
            break;
          }
          case 1425: {
            BestResponsePrice = input.ReadDouble();
            break;
          }
          case 1448: {
            CumFillQuantity = input.ReadInt32();
            break;
          }
          case 1473: {
            AvgFillPrice = input.ReadDouble();
            break;
          }
          case 1497: {
            AuctionFinalPrice = input.ReadDouble();
            break;
          }
          case 1520: {
            SrcTimestamp = input.ReadInt64();
            break;
          }
          case 1544: {
            NetTimestamp = input.ReadInt64();
            break;
          }
          case 1568: {
            DgwTimestamp = input.ReadInt64();
            break;
          }
          case 1592: {
            MmrTimestamp = input.ReadInt64();
            break;
          }
          case 1616: {
            EngTimestamp = input.ReadInt64();
            break;
          }
          case 1642: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1666: {
            legs_.AddEntriesFrom(input, _repeated_legs_codec);
            break;
          }
          case 1785: {
            AuctionStart = input.ReadDouble();
            break;
          }
          case 1808: {
            AuctionNbboStance = (global::Spiderrock.Protobuf.AuctionMktStance) input.ReadEnum();
            break;
          }
          case 1832: {
            AuctionExchStance = (global::Spiderrock.Protobuf.AuctionMktStance) input.ReadEnum();
            break;
          }
          case 1861: {
            BidPrice = input.ReadFloat();
            break;
          }
          case 1885: {
            AskPrice = input.ReadFloat();
            break;
          }
          case 1904: {
            CumBidSize = input.ReadInt32();
            break;
          }
          case 1928: {
            CumAskSize = input.ReadInt32();
            break;
          }
          case 1957: {
            ExchBidPrc = input.ReadFloat();
            break;
          }
          case 1981: {
            ExchAskPrc = input.ReadFloat();
            break;
          }
          case 2000: {
            ExchBidSize = input.ReadInt32();
            break;
          }
          case 2024: {
            ExchAskSize = input.ReadInt32();
            break;
          }
          case 2053: {
            RspProbability = input.ReadFloat();
            break;
          }
          case 2077: {
            Svol = input.ReadFloat();
            break;
          }
          case 2101: {
            Sprc = input.ReadFloat();
            break;
          }
          case 2125: {
            Vega = input.ReadFloat();
            break;
          }
          case 2149: {
            Delta = input.ReadFloat();
            break;
          }
          case 2173: {
            SEdgeStart = input.ReadFloat();
            break;
          }
          case 2197: {
            SEdgePrint = input.ReadFloat();
            break;
          }
          case 2221: {
            UBid = input.ReadFloat();
            break;
          }
          case 2245: {
            UAsk = input.ReadFloat();
            break;
          }
          case 2269: {
            UBidT = input.ReadFloat();
            break;
          }
          case 2293: {
            UAskT = input.ReadFloat();
            break;
          }
          case 2312: {
            AuctionPrintResult = (global::Spiderrock.Protobuf.AuctionPrintResult) input.ReadEnum();
            break;
          }
          case 2341: {
            FirstPrintSize = input.ReadFloat();
            break;
          }
          case 2361: {
            FirstPrintPrice = input.ReadDouble();
            break;
          }
          case 2384: {
            FirstPrintSide = (global::Spiderrock.Protobuf.PrtSide) input.ReadEnum();
            break;
          }
          case 2408: {
            FirstPrintType = (global::Spiderrock.Protobuf.PrtType) input.ReadEnum();
            break;
          }
          case 2432: {
            FirstSrcTimestamp = input.ReadInt64();
            break;
          }
          case 2456: {
            FirstNetTimestamp = input.ReadInt64();
            break;
          }
          case 2485: {
            FirstSrcLatency = input.ReadFloat();
            break;
          }
          case 2509: {
            FirstNetLatency = input.ReadFloat();
            break;
          }
          case 2528: {
            FirstAwayPrtSize = input.ReadInt32();
            break;
          }
          case 2553: {
            FirstAwayPrtPrice = input.ReadDouble();
            break;
          }
          case 2581: {
            FirstAwayNetLatency = input.ReadFloat();
            break;
          }
          case 2600: {
            NumPrints = input.ReadInt32();
            break;
          }
          case 2624: {
            CumPrintSize = input.ReadInt32();
            break;
          }
          case 2649: {
            AvgPrintPrice = input.ReadDouble();
            break;
          }
          case 2672: {
            NumPrintLegs = input.ReadInt32();
            break;
          }
          case 2701: {
            MarkM1 = input.ReadFloat();
            break;
          }
          case 2725: {
            UMarkM1 = input.ReadFloat();
            break;
          }
          case 2749: {
            PnlM1 = input.ReadFloat();
            break;
          }
          case 2768: {
            PnlM1Err = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 2797: {
            MarkM10 = input.ReadFloat();
            break;
          }
          case 2821: {
            UMarkM10 = input.ReadFloat();
            break;
          }
          case 2845: {
            PnlM10 = input.ReadFloat();
            break;
          }
          case 2864: {
            PnlM10Err = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrAuctionResult.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 800: {
            SrAuctionID = input.ReadInt64();
            break;
          }
          case 826: {
            ExchAuctionId = input.ReadString();
            break;
          }
          case 850: {
            ExchAuctionType = input.ReadString();
            break;
          }
          case 872: {
            AuctionShape = (global::Spiderrock.Protobuf.NoticeShape) input.ReadEnum();
            break;
          }
          case 896: {
            AuctionType = (global::Spiderrock.Protobuf.AuctionType) input.ReadEnum();
            break;
          }
          case 920: {
            AuctionSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
            break;
          }
          case 944: {
            MatchedSize = input.ReadInt32();
            break;
          }
          case 968: {
            AuctionSize = input.ReadInt32();
            break;
          }
          case 993: {
            AuctionPrice = input.ReadDouble();
            break;
          }
          case 1016: {
            IsAuctionPriceValid = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1040: {
            AuctionDuration = input.ReadInt32();
            break;
          }
          case 1064: {
            AuctionStartTimestamp = input.ReadInt64();
            break;
          }
          case 1088: {
            MinResponseSize = input.ReadInt32();
            break;
          }
          case 1112: {
            ClientLimitType = (global::Spiderrock.Protobuf.AuctionLimitType) input.ReadEnum();
            break;
          }
          case 1136: {
            FirmType = (global::Spiderrock.Protobuf.FirmType) input.ReadEnum();
            break;
          }
          case 1162: {
            MemberMPID = input.ReadString();
            break;
          }
          case 1186: {
            ClientAccnt = input.ReadString();
            break;
          }
          case 1210: {
            OtherDetail = input.ReadString();
            break;
          }
          case 1232: {
            MarketStatus = (global::Spiderrock.Protobuf.MarketStatus) input.ReadEnum();
            break;
          }
          case 1256: {
            NumUpdates = input.ReadInt32();
            break;
          }
          case 1280: {
            AuctionFinalTimestamp = input.ReadInt64();
            break;
          }
          case 1304: {
            AuctionStartSize = input.ReadInt32();
            break;
          }
          case 1329: {
            AuctionStartPrice = input.ReadDouble();
            break;
          }
          case 1352: {
            AuctionStartMatchedSize = input.ReadInt32();
            break;
          }
          case 1376: {
            NumResponses = input.ReadInt32();
            break;
          }
          case 1400: {
            BestResponseSize = input.ReadInt32();
            break;
          }
          case 1425: {
            BestResponsePrice = input.ReadDouble();
            break;
          }
          case 1448: {
            CumFillQuantity = input.ReadInt32();
            break;
          }
          case 1473: {
            AvgFillPrice = input.ReadDouble();
            break;
          }
          case 1497: {
            AuctionFinalPrice = input.ReadDouble();
            break;
          }
          case 1520: {
            SrcTimestamp = input.ReadInt64();
            break;
          }
          case 1544: {
            NetTimestamp = input.ReadInt64();
            break;
          }
          case 1568: {
            DgwTimestamp = input.ReadInt64();
            break;
          }
          case 1592: {
            MmrTimestamp = input.ReadInt64();
            break;
          }
          case 1616: {
            EngTimestamp = input.ReadInt64();
            break;
          }
          case 1642: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1666: {
            legs_.AddEntriesFrom(ref input, _repeated_legs_codec);
            break;
          }
          case 1785: {
            AuctionStart = input.ReadDouble();
            break;
          }
          case 1808: {
            AuctionNbboStance = (global::Spiderrock.Protobuf.AuctionMktStance) input.ReadEnum();
            break;
          }
          case 1832: {
            AuctionExchStance = (global::Spiderrock.Protobuf.AuctionMktStance) input.ReadEnum();
            break;
          }
          case 1861: {
            BidPrice = input.ReadFloat();
            break;
          }
          case 1885: {
            AskPrice = input.ReadFloat();
            break;
          }
          case 1904: {
            CumBidSize = input.ReadInt32();
            break;
          }
          case 1928: {
            CumAskSize = input.ReadInt32();
            break;
          }
          case 1957: {
            ExchBidPrc = input.ReadFloat();
            break;
          }
          case 1981: {
            ExchAskPrc = input.ReadFloat();
            break;
          }
          case 2000: {
            ExchBidSize = input.ReadInt32();
            break;
          }
          case 2024: {
            ExchAskSize = input.ReadInt32();
            break;
          }
          case 2053: {
            RspProbability = input.ReadFloat();
            break;
          }
          case 2077: {
            Svol = input.ReadFloat();
            break;
          }
          case 2101: {
            Sprc = input.ReadFloat();
            break;
          }
          case 2125: {
            Vega = input.ReadFloat();
            break;
          }
          case 2149: {
            Delta = input.ReadFloat();
            break;
          }
          case 2173: {
            SEdgeStart = input.ReadFloat();
            break;
          }
          case 2197: {
            SEdgePrint = input.ReadFloat();
            break;
          }
          case 2221: {
            UBid = input.ReadFloat();
            break;
          }
          case 2245: {
            UAsk = input.ReadFloat();
            break;
          }
          case 2269: {
            UBidT = input.ReadFloat();
            break;
          }
          case 2293: {
            UAskT = input.ReadFloat();
            break;
          }
          case 2312: {
            AuctionPrintResult = (global::Spiderrock.Protobuf.AuctionPrintResult) input.ReadEnum();
            break;
          }
          case 2341: {
            FirstPrintSize = input.ReadFloat();
            break;
          }
          case 2361: {
            FirstPrintPrice = input.ReadDouble();
            break;
          }
          case 2384: {
            FirstPrintSide = (global::Spiderrock.Protobuf.PrtSide) input.ReadEnum();
            break;
          }
          case 2408: {
            FirstPrintType = (global::Spiderrock.Protobuf.PrtType) input.ReadEnum();
            break;
          }
          case 2432: {
            FirstSrcTimestamp = input.ReadInt64();
            break;
          }
          case 2456: {
            FirstNetTimestamp = input.ReadInt64();
            break;
          }
          case 2485: {
            FirstSrcLatency = input.ReadFloat();
            break;
          }
          case 2509: {
            FirstNetLatency = input.ReadFloat();
            break;
          }
          case 2528: {
            FirstAwayPrtSize = input.ReadInt32();
            break;
          }
          case 2553: {
            FirstAwayPrtPrice = input.ReadDouble();
            break;
          }
          case 2581: {
            FirstAwayNetLatency = input.ReadFloat();
            break;
          }
          case 2600: {
            NumPrints = input.ReadInt32();
            break;
          }
          case 2624: {
            CumPrintSize = input.ReadInt32();
            break;
          }
          case 2649: {
            AvgPrintPrice = input.ReadDouble();
            break;
          }
          case 2672: {
            NumPrintLegs = input.ReadInt32();
            break;
          }
          case 2701: {
            MarkM1 = input.ReadFloat();
            break;
          }
          case 2725: {
            UMarkM1 = input.ReadFloat();
            break;
          }
          case 2749: {
            PnlM1 = input.ReadFloat();
            break;
          }
          case 2768: {
            PnlM1Err = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 2797: {
            MarkM10 = input.ReadFloat();
            break;
          }
          case 2821: {
            UMarkM10 = input.ReadFloat();
            break;
          }
          case 2845: {
            PnlM10 = input.ReadFloat();
            break;
          }
          case 2864: {
            PnlM10Err = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpdrAuctionResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrAuctionResult.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          secKey_ = other.secKey_ != null ? other.secKey_.Clone() : null;
          secType_ = other.secType_;
          auctionExch_ = other.auctionExch_;
          auctionExDest_ = other.auctionExDest_;
          runStatus_ = other.runStatus_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "sec_key" field.</summary>
        public const int SecKeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.OptionKey secKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey SecKey {
          get { return secKey_; }
          set {
            secKey_ = value;
          }
        }

        /// <summary>Field number for the "sec_type" field.</summary>
        public const int SecTypeFieldNumber = 11;
        private global::Spiderrock.Protobuf.SpdrKeyType secType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType SecType {
          get { return secType_; }
          set {
            secType_ = value;
          }
        }

        /// <summary>Field number for the "auction_exch" field.</summary>
        public const int AuctionExchFieldNumber = 12;
        private global::Spiderrock.Protobuf.OptExch auctionExch_ = global::Spiderrock.Protobuf.OptExch.Unspecified;
        /// <summary>
        /// exchange handling the auction
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptExch AuctionExch {
          get { return auctionExch_; }
          set {
            auctionExch_ = value;
          }
        }

        /// <summary>Field number for the "auction_ex_dest" field.</summary>
        public const int AuctionExDestFieldNumber = 13;
        private string auctionExDest_ = "";
        /// <summary>
        /// external exDest of auction (usually means auction is off-exchange)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string AuctionExDest {
          get { return auctionExDest_; }
          set {
            auctionExDest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "run_status" field.</summary>
        public const int RunStatusFieldNumber = 14;
        private global::Spiderrock.Protobuf.RunStatus runStatus_ = global::Spiderrock.Protobuf.RunStatus.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.RunStatus RunStatus {
          get { return runStatus_; }
          set {
            runStatus_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(SecKey, other.SecKey)) return false;
          if (SecType != other.SecType) return false;
          if (AuctionExch != other.AuctionExch) return false;
          if (AuctionExDest != other.AuctionExDest) return false;
          if (RunStatus != other.RunStatus) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (secKey_ != null) hash ^= SecKey.GetHashCode();
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType.GetHashCode();
          if (AuctionExch != global::Spiderrock.Protobuf.OptExch.Unspecified) hash ^= AuctionExch.GetHashCode();
          if (AuctionExDest.Length != 0) hash ^= AuctionExDest.GetHashCode();
          if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) hash ^= RunStatus.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (secKey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) SecType);
          }
          if (AuctionExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
            output.WriteRawTag(96);
            output.WriteEnum((int) AuctionExch);
          }
          if (AuctionExDest.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(AuctionExDest);
          }
          if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
            output.WriteRawTag(112);
            output.WriteEnum((int) RunStatus);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (secKey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) SecType);
          }
          if (AuctionExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
            output.WriteRawTag(96);
            output.WriteEnum((int) AuctionExch);
          }
          if (AuctionExDest.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(AuctionExDest);
          }
          if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
            output.WriteRawTag(112);
            output.WriteEnum((int) RunStatus);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (secKey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
          }
          if (AuctionExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionExch);
          }
          if (AuctionExDest.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AuctionExDest);
          }
          if (RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RunStatus);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.secKey_ != null) {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            SecKey.MergeFrom(other.SecKey);
          }
          if (other.SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            SecType = other.SecType;
          }
          if (other.AuctionExch != global::Spiderrock.Protobuf.OptExch.Unspecified) {
            AuctionExch = other.AuctionExch;
          }
          if (other.AuctionExDest.Length != 0) {
            AuctionExDest = other.AuctionExDest;
          }
          if (other.RunStatus != global::Spiderrock.Protobuf.RunStatus.Unspecified) {
            RunStatus = other.RunStatus;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 88: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 96: {
                AuctionExch = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
                break;
              }
              case 106: {
                AuctionExDest = input.ReadString();
                break;
              }
              case 112: {
                RunStatus = (global::Spiderrock.Protobuf.RunStatus) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 88: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 96: {
                AuctionExch = (global::Spiderrock.Protobuf.OptExch) input.ReadEnum();
                break;
              }
              case 106: {
                AuctionExDest = input.ReadString();
                break;
              }
              case 112: {
                RunStatus = (global::Spiderrock.Protobuf.RunStatus) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Legs : pb::IMessage<Legs>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Legs> _parser = new pb::MessageParser<Legs>(() => new Legs());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Legs> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrAuctionResult.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Legs() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Legs(Legs other) : this() {
          legSecKey_ = other.legSecKey_ != null ? other.legSecKey_.Clone() : null;
          legSecType_ = other.legSecType_;
          legSide_ = other.legSide_;
          legRatio_ = other.legRatio_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Legs Clone() {
          return new Legs(this);
        }

        /// <summary>Field number for the "leg_sec_key" field.</summary>
        public const int LegSecKeyFieldNumber = 211;
        private global::Spiderrock.Protobuf.OptionKey legSecKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey LegSecKey {
          get { return legSecKey_; }
          set {
            legSecKey_ = value;
          }
        }

        /// <summary>Field number for the "leg_sec_type" field.</summary>
        public const int LegSecTypeFieldNumber = 214;
        private global::Spiderrock.Protobuf.SpdrKeyType legSecType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType LegSecType {
          get { return legSecType_; }
          set {
            legSecType_ = value;
          }
        }

        /// <summary>Field number for the "leg_side" field.</summary>
        public const int LegSideFieldNumber = 217;
        private global::Spiderrock.Protobuf.BuySell legSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell LegSide {
          get { return legSide_; }
          set {
            legSide_ = value;
          }
        }

        /// <summary>Field number for the "leg_ratio" field.</summary>
        public const int LegRatioFieldNumber = 220;
        private uint legRatio_;
        /// <summary>
        /// leg ratio (1, 2, etc)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint LegRatio {
          get { return legRatio_; }
          set {
            legRatio_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Legs);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Legs other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(LegSecKey, other.LegSecKey)) return false;
          if (LegSecType != other.LegSecType) return false;
          if (LegSide != other.LegSide) return false;
          if (LegRatio != other.LegRatio) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (legSecKey_ != null) hash ^= LegSecKey.GetHashCode();
          if (LegSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= LegSecType.GetHashCode();
          if (LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= LegSide.GetHashCode();
          if (LegRatio != 0) hash ^= LegRatio.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (legSecKey_ != null) {
            output.WriteRawTag(154, 13);
            output.WriteMessage(LegSecKey);
          }
          if (LegSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(176, 13);
            output.WriteEnum((int) LegSecType);
          }
          if (LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(200, 13);
            output.WriteEnum((int) LegSide);
          }
          if (LegRatio != 0) {
            output.WriteRawTag(224, 13);
            output.WriteUInt32(LegRatio);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (legSecKey_ != null) {
            output.WriteRawTag(154, 13);
            output.WriteMessage(LegSecKey);
          }
          if (LegSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(176, 13);
            output.WriteEnum((int) LegSecType);
          }
          if (LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(200, 13);
            output.WriteEnum((int) LegSide);
          }
          if (LegRatio != 0) {
            output.WriteRawTag(224, 13);
            output.WriteUInt32(LegRatio);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (legSecKey_ != null) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(LegSecKey);
          }
          if (LegSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LegSecType);
          }
          if (LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LegSide);
          }
          if (LegRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LegRatio);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Legs other) {
          if (other == null) {
            return;
          }
          if (other.legSecKey_ != null) {
            if (legSecKey_ == null) {
              LegSecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            LegSecKey.MergeFrom(other.LegSecKey);
          }
          if (other.LegSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            LegSecType = other.LegSecType;
          }
          if (other.LegSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            LegSide = other.LegSide;
          }
          if (other.LegRatio != 0) {
            LegRatio = other.LegRatio;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 1690: {
                if (legSecKey_ == null) {
                  LegSecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(LegSecKey);
                break;
              }
              case 1712: {
                LegSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 1736: {
                LegSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 1760: {
                LegRatio = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 1690: {
                if (legSecKey_ == null) {
                  LegSecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(LegSecKey);
                break;
              }
              case 1712: {
                LegSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 1736: {
                LegSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
              case 1760: {
                LegRatio = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
