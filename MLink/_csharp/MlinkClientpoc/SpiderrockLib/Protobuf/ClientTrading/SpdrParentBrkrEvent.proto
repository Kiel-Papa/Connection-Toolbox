syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

/*
    SpdrParentBrkrEvent records are published when a new or cxl/replace parent order arrives causes a broker to begin working and again when a parent order terminates and the underlying broker stops working.  The initial version contains state and market data from just after the initial risk check and first attempt at generating child orders.
*/    
message SpdrParentBrkrEvent {
    message PKey {
        
        int64 parent_number = 10;
        EventRecType rec_type = 11; // type of record [New,Modify,Replace,Close,Reject]
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    OptionKey sec_key = 100;
    SpdrKeyType sec_type = 103;
    string accnt = 106;
    SpdrSource spdr_source = 109;
    int64 grouping_code = 112;
    BuySell order_side = 115;
    string client_firm = 118; // SR client firm code
    string alt_accnt = 121; // alternate (client assigned) "long" account string (optional)
    string alt_user_name = 124; // alternate (client assigned) user name (optional)
    uint32 event_number = 127;
    SpdrStageType stage_type = 130; // parent is a staged order [StageLock, StageModify, StageReview]
    int64 base_parent_number = 133; // SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)
    int64 prev_parent_number = 136; // SPDR order number (order being cancelled/replaced) (zero if none)
    string engine_name = 139; // server stripe
    TickerKey ticker = 142; // SpiderRock underlier stock key
    SpdrBrokerStatus spdr_broker_status = 145;
    SpdrOrderStatus spdr_order_status = 148; // parent order status
    SpdrCloseReason spdr_close_reason = 151; // parent order close reason (if closed)
    SpdrRejectReason spdr_reject_reason = 154; // parent order reject reason (if any)
    string spdr_comment = 157; // additional detail (close/reject reason; last child order error)
    double bid_prc = 160; // bid (nbbo) price @ record publish
    double ask_prc = 163; // ask (nbbo) price @ record publish
    float bid_iVol = 166; // bid (nbbo) ivol @ record publish
    float ask_iVol = 169; // ask (nbbo) ivol @ record publish
    int32 bid_size = 172; // bid size (nbbo cum) @ record publish
    int32 ask_size = 175; // ask size (nbbo cum) @ record publish
    double u_bid = 178; // underlier bid price @ record publish (options only)
    double u_ask = 181; // underlier ask price @ record publish (options only)
    float surface_prc = 184; // SR surface price @ record publish
    float surface_vol = 187; // SR surface volatility @ record publish
    float surface_yrs = 190; // SR surface calc value @ record publish
    float surface_sDiv = 193; // SR surface calc value @ record publish
    float surface_rate = 196; // SR surface calc value @ record publish
    float surface_uPrc = 199; // SR surface calc value @ record publish
    float surface_de = 202; // SR surface calc value @ record publish
    float surface_ga = 205; // SR surface calc value @ record publish
    float surface_th = 208; // SR surface calc value @ record publish
    float surface_ve = 211; // SR surface calc value @ record publish
    float surface_ro = 214; // SR surface calc value @ record publish
    float surface_ph = 217; // SR surface calc value @ record publish
    int32 arrive_nbbo_size = 220; // size of the single largest exchange @ parent order arrival
    OptExch arrive_nbbo_exch = 223; // exchange representing largest size @ order arrival
    int32 arrive_cum_size = 226; // cum size of all exchanges at NBBO price @ parent order arrival
    int32 arrive_num_exch = 229; // num exchanges making up cum size @ parent order arrival
    int32 arrive_limit_size = 232; // immediately marketable size up to limit price on parent order arrival
    double arrive_limit_prc = 235; // expected average fill price if all immediately marketable size executed as advertized
    double avg_fill_prc = 238; // average fill price of all fills attributed parent order
    int32 cum_fill_quan = 241; // cumulative fill quantity attributed to parent order
    uint32 num_child_orders = 244; // total number of child orders generated by this parent broker (parent number)
    uint32 num_day_child_orders = 247; // total number of child orders generated by this parent broker (all day; base parent number)
    int32 open_order_size = 250; // open order size
    int32 action_order_size = 253; // order size available for immediate action (note: not all algo combinations allow immediate action)
    int32 risk_limit_size = 256; // risk limit size (distance to most restrictive risk limit associated with this parent order)
    SpdrRisk risk_limit_desc = 259; // reason for size reduction (identifies the most restrictive risk limit)
    SpdrRiskLevel risk_limit_level = 262; // risk limit level responsible for reduction
    string risk_limit_detail = 265; // risk limit level responsible for reduction
    double limit_ref_uPrc = 268; // effective reference underlier price @ record publish (usually either mid or bid/ask depending on limit type)
    double limit_price = 271; // parent simple prc limit (if any)
    float limit_vol = 274; // parent simple vol limit (if any)
    double make_limit_price = 277; // effective order limit price @ record publish
    LimitError make_limit_err = 280; // limit price error code (if any)
    string make_limit_err_desc = 283; // additional limit price error descriptive text
    double take_limit_price = 286; // effective order limit price @ record publish
    LimitError take_limit_err = 289; // limit price error code (if any)
    string take_limit_err_desc = 292; // additional limit price error descriptive text
    BrokerState broker_state = 295; // broker monitor state
    AlgoState make_state = 298; // [enum] current state of non-marketable order handler (maker)
    AlgoState take_state = 301; // [enum] current state of marketable order handler (taker)
    MktCrossState mkt_cross_state = 304; // [enum] current state of mkt cross handler (if any)
    ChildEvent last_child_event = 307; // most recent child handling event
    SpdrMarketState spdr_mkt_state = 310; // market state code
    int32 num_orders = 313; // number active child orders @ record send
    int32 leaves_qty = 316; // number of active child order contracts (sum of all active child orders) @ record send
    int32 child_order_leaves = 319; // number of open child orders @ record send
    float arrival_sDiv = 322; // effective sdiv rate @ parent order arrival (fixed for life of parent order)
    float arrival_rate = 325; // effective interest rate @ parent order arrival (fixed for life of parent order)
    float arrival_dDiv = 328; // effective cumulative discrete dividend @ parent order arrival (fixed for life of parent order)
    ExpiryKey hedge_sec_key = 331; // auto-hedge sec key
    SpdrKeyType hedge_sec_type = 334; // auto-hedge sec type
    float theo_opx = 337; // option theo prc (from theoVol)
    float theo_vol = 340; // option theo vol (from theoModel;if any)
    uint32 child_order_mask = 343; // bit-mask of all exchange for which a child order was generated
    PriceFormat price_format = 346; // price display format code
    PriceFormat u_price_format = 349; // underlier price display format code
    string user_name = 352; // user associated with the most recent parent order
    google.protobuf.Timestamp timestamp = 355; // timestamp of last modification
}


