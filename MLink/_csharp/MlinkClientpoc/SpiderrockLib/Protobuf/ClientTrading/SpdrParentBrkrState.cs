// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientTrading/SpdrParentBrkrState.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientTrading/SpdrParentBrkrState.proto</summary>
  public static partial class SpdrParentBrkrStateReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientTrading/SpdrParentBrkrState.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpdrParentBrkrStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBQcm90b2J1Zi9DbGllbnRUcmFkaW5nL1NwZHJQYXJlbnRCcmtyU3RhdGUu",
            "cHJvdG8SE3NwaWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29tbW9u",
            "LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIscpChNT",
            "cGRyUGFyZW50QnJrclN0YXRlEjMKBV9tZXRhGAEgASgLMiQuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5NZXNzYWdlTWV0YWRhdGESOwoEcGtleRgCIAEoCzItLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuU3BkclBhcmVudEJya3JTdGF0ZS5QS2V5EhEK",
            "CXVzZXJfbmFtZRhkIAEoCRITCgtjbGllbnRfZmlybRhnIAEoCRIVCg1wYXJl",
            "bnRfbnVtYmVyGGogASgDEhoKEmJhc2VfcGFyZW50X251bWJlchhtIAEoAxIV",
            "Cg1yaXNrX2dyb3VwX2lkGHAgASgDEhgKEHRyaWdnZXJfZ3JvdXBfaWQYcyAB",
            "KAMSEAoIc3RyYXRlZ3kYdiABKAkSFAoMYWx0X29yZGVyX2lkGHkgASgJEhIK",
            "CnBhY2thZ2VfaWQYfCABKAMSEQoJYWx0X2FjY250GH8gASgJEhYKDWFsdF91",
            "c2VyX25hbWUYggEgASgJEjcKCnN0YWdlX3R5cGUYhQEgASgOMiIuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5TcGRyU3RhZ2VUeXBlEi8KCmlzX2ZsYWdnZWQYiAEg",
            "ASgOMhouc3BpZGVycm9jay5wcm90b2J1Zi5ZZXNObxIvCgZ0aWNrZXIYiwEg",
            "ASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5UaWNrZXJLZXkSDgoFdV9wcmMY",
            "jgEgASgBEhQKC3VfcHJjX29yZGVyGJEBIAEoARIRCghuYmJvX2JpZBiUASAB",
            "KAESEQoIbmJib19hc2sYlwEgASgBEhQKC25iYm9fYmlkX3N6GJoBIAEoBRIU",
            "CgtuYmJvX2Fza19zehidASABKAUSFAoLc3VyZmFjZV9wcmMYoAEgASgCEhQK",
            "C3N1cmZhY2Vfdm9sGKMBIAEoAhIXCg5vcmRlcl9yZWZfc0RpdhimASABKAIS",
            "PgoTb3JkZXJfcmVmX3NEaXZfdHlwZRipASABKA4yIC5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlJlZlNEaXZUeXBlEkIKEnNwZHJfYnJva2VyX3N0YXR1cxisASAB",
            "KA4yJS5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJCcm9rZXJTdGF0dXMSQAoR",
            "c3Bkcl9vcmRlcl9zdGF0dXMYrwEgASgOMiQuc3BpZGVycm9jay5wcm90b2J1",
            "Zi5TcGRyT3JkZXJTdGF0dXMSQAoRc3Bkcl9jbG9zZV9yZWFzb24YsgEgASgO",
            "MiQuc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyQ2xvc2VSZWFzb24SQgoSc3Bk",
            "cl9yZWplY3RfcmVhc29uGLUBIAEoDjIlLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "U3BkclJlamVjdFJlYXNvbhI+ChFzcGRyX3JlamVjdF9sZXZlbBi4ASABKA4y",
            "Ii5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJSaXNrTGV2ZWwSOgoVaXNfcGVy",
            "bWFuZW50bHlfY2xvc2VkGLsBIAEoDjIaLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "WWVzTm8SHQoUbnVtX2V4dGVybl9yaXNrX2hvbGQYvgEgASgFEh4KFWxhc3Rf",
            "ZXh0ZXJuX3Jpc2tfdGV4dBjBASABKAkSPAoXbGFzdF9leHRlcm5fcmlza19y",
            "ZWplY3QYxAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIVCgxz",
            "cGRyX2NvbW1lbnQYxwEgASgJEhMKCm9yZGVyX3NpemUYygEgASgFEhoKEW9y",
            "ZGVyX2FjdGl2ZV9zaXplGM0BIAEoBRIwCgt1cGRhdGVfZHR0bRjQASABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjMKDmdvb2RfdGlsbF9kdHRt",
            "GNMBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASGAoPbGVhdmVz",
            "X3F1YW50aXR5GNYBIAEoBRIXCg5hdmdfZmlsbF9wcmljZRjZASABKAESGAoP",
            "YXZnX2ZpbGxfdVByaWNlGNwBIAEoARIaChFjdW1fZmlsbF9xdWFudGl0eRjf",
            "ASABKAUSFQoMYXZnX2ZpbGxfdm9sGOIBIAEoAhIWCg1jdW1fZmlsbF92ZWdh",
            "GOUBIAEoAhIXCg5jdW1fZmlsbF90aGV0YRjoASABKAISGAoPY3VtX2ZpbGxf",
            "ZERlbHRhGOsBIAEoAhIVCgxjdW1fZXhjaF9mZWUY7gEgASgCEhQKC2N1bV9t",
            "MTBfcG5sGPEBIAEoAhIYCg9jdW1fYXJyaXZhbF9wbmwY9AEgASgCEjMKDmxh",
            "c3RfZmlsbF9kdHRtGPcBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXASGAoPcmlza19saW1pdF9zaXplGPoBIAEoBRI3Cg9yaXNrX2xpbWl0X2Rl",
            "c2MY/QEgASgOMh0uc3BpZGVycm9jay5wcm90b2J1Zi5TcGRyUmlzaxI9ChBy",
            "aXNrX2xpbWl0X2xldmVsGIACIAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYu",
            "U3BkclJpc2tMZXZlbBIaChFyaXNrX2xpbWl0X2RldGFpbBiDAiABKAkSFAoL",
            "bGltaXRfcHJpY2UYhgIgASgBEjMKCWxpbWl0X2VychiJAiABKA4yHy5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLkxpbWl0RXJyb3ISFwoObGltaXRfZXJyX2Rlc2MY",
            "jAIgASgJEhoKEWJlc3RfbGltaXRfb2Zmc2V0GI8CIAEoAhIYCg9tYWtlX3By",
            "b2JfbGltaXQYkgIgASgCEhkKEG1ha2Vfc3VyZl9vZmZzZXQYlQIgASgCEhkK",
            "EG1ha2VfbGltaXRfcHJpY2UYmAIgASgBEjgKDm1ha2VfbGltaXRfZXJyGJsC",
            "IAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuTGltaXRFcnJvchIYCg90YWtl",
            "X3Byb2JfbGltaXQYngIgASgCEhkKEHRha2Vfc3VyZl9vZmZzZXQYoQIgASgC",
            "EhkKEHRha2VfbGltaXRfcHJpY2UYpAIgASgBEjgKDnRha2VfbGltaXRfZXJy",
            "GKcCIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuTGltaXRFcnJvchIzCgph",
            "dXRvX2hlZGdlGKoCIAEoDjIeLnNwaWRlcnJvY2sucHJvdG9idWYuQXV0b0hl",
            "ZGdlEjkKEGhlZGdlX2luc3RydW1lbnQYrQIgASgOMh4uc3BpZGVycm9jay5w",
            "cm90b2J1Zi5IZWRnZUluc3QSNgoNaGVkZ2Vfc2VjX2tleRiwAiABKAsyHi5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLkV4cGlyeUtleRI5Cg5oZWRnZV9zZWNfdHlw",
            "ZRizAiABKA4yIC5zcGlkZXJyb2NrLnByb3RvYnVmLlNwZHJLZXlUeXBlEhkK",
            "EGhlZGdlX2JldGFfcmF0aW8YtgIgASgCEjUKC2hlZGdlX3Njb3BlGLkCIAEo",
            "DjIfLnNwaWRlcnJvY2sucHJvdG9idWYuSGVkZ2VTY29wZRI0CgloZWRnZV90",
            "SUYYvAIgASgOMiAuc3BpZGVycm9jay5wcm90b2J1Zi5UaW1lSW5Gb3JjZRId",
            "ChRleHRlcm5faGVkZ2VfZXhfZGVzdBi/AiABKAkSHAoTZXh0ZXJuX2hlZGdl",
            "X3BhcmFtcxjCAiABKAkSEwoKdXNlcl9kYXRhMRjFAiABKAkSEwoKdXNlcl9k",
            "YXRhMhjIAiABKAkSNwoMbWF4X3Byb2dyZXNzGMsCIAEoDjIgLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuTWF4UHJvZ3Jlc3MSHAoTbWF4X3Byb2dyZXNzX2RldGFp",
            "bBjOAiABKAkSNgoRbWF4X3Byb2dyZXNzX3RpbWUY0QIgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBI3Cgxicm9rZXJfc3RhdGUY1AIgASgOMiAu",
            "c3BpZGVycm9jay5wcm90b2J1Zi5Ccm9rZXJTdGF0ZRIXCg5icm9rZXJfY291",
            "bnRlchjXAiABKAUSMwoKbWFrZV9zdGF0ZRjaAiABKA4yHi5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLkFsZ29TdGF0ZRIVCgxtYWtlX2NvdW50ZXIY3QIgASgFEjMK",
            "CnRha2Vfc3RhdGUY4AIgASgOMh4uc3BpZGVycm9jay5wcm90b2J1Zi5BbGdv",
            "U3RhdGUSFQoMdGFrZV9jb3VudGVyGOMCIAEoBRI6Cg5ta3RfcmVzcF9zdGF0",
            "ZRjmAiABKA4yIS5zcGlkZXJyb2NrLnByb3RvYnVmLk1rdFJlc3BTdGF0ZRIZ",
            "ChBta3RfcmVzcF9jb3VudGVyGOkCIAEoBRI8Cg9ta3RfY3Jvc3Nfc3RhdGUY",
            "7AIgASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5Na3RDcm9zc1N0YXRlEhoK",
            "EW1rdF9jcm9zc19jb3VudGVyGO8CIAEoBRIdChRwcm9ncmVzc19ydWxlX2Rl",
            "dGFpbBjyAiABKAkSOgoQbGFzdF9jaGlsZF9ldmVudBj1AiABKA4yHy5zcGlk",
            "ZXJyb2NrLnByb3RvYnVmLkNoaWxkRXZlbnQSOwoWbGFzdF9jaGlsZF9yZWpl",
            "Y3RfZHR0bRj4AiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEh8K",
            "Fmxhc3RfY2hpbGRfcmVqZWN0X3RleHQY+wIgASgJEj0KDnNwZHJfbWt0X3N0",
            "YXRlGP4CIAEoDjIkLnNwaWRlcnJvY2sucHJvdG9idWYuU3Bkck1hcmtldFN0",
            "YXRlEg0KBGNweDEYgQMgASgCEg0KBGNzejEYhAMgASgFEg0KBGNleDEYhwMg",
            "ASgNEg0KBGNudDEYigMgASgFEg0KBGNweDIYjQMgASgCEg0KBGNzejIYkAMg",
            "ASgFEg0KBGNleDIYkwMgASgNEg0KBGNudDIYlgMgASgFEg8KBmNfbW9yZRiZ",
            "AyABKAUSEwoKZXhwaXJ5X2tleRicAyABKAkSDwoGY25fdm9sGJ8DIAEoAhIP",
            "CgZjbl95cnMYogMgASgCEhAKB2NuX3VQcmMYpQMgASgCEg4KBWNuX2RlGKgD",
            "IAEoAhIOCgVjbl9kZBirAyABKAISDgoFY25fdmUYrgMgASgCEg4KBWNuX2dh",
            "GLEDIAEoAhIOCgVjbl90aBi0AyABKAISDgoFY25fcHIYtwMgASgCEhAKB2Rk",
            "X211bHQYugMgASgCEjcKDHByaWNlX2Zvcm1hdBi9AyABKA4yIC5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlByaWNlRm9ybWF0EjkKDnVfcHJpY2VfZm9ybWF0GMAD",
            "IAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuUHJpY2VGb3JtYXQSGgoRdW5k",
            "ZXJsaWVyc19wZXJfY24YwwMgASgFEjsKDnVuZGVybGllcl90eXBlGMYDIAEo",
            "DjIiLnNwaWRlcnJvY2sucHJvdG9idWYuVW5kZXJsaWVyVHlwZRITCgp0aWNr",
            "X3ZhbHVlGMkDIAEoAhIUCgtwb2ludF92YWx1ZRjMAyABKAISNgoOcG9pbnRf",
            "Y3VycmVuY3kYzwMgASgOMh0uc3BpZGVycm9jay5wcm90b2J1Zi5DdXJyZW5j",
            "eRIRCgh0aGVvX3ZvbBjSAyABKAISEQoIdGhlb19wcmMY1QMgASgCEhcKDm51",
            "bV9uZXdfb3JkZXJzGNgDIAEoBRIaChFudW1fcGFyZW50X2xpbWl0cxjbAyAB",
            "KA0SGQoQYnJva2VyX3Z3YXBfbWFyaxjeAyABKAISGgoRYnJva2VyX3Z3YXBf",
            "dU1hcmsY4QMgASgCEhkKEGJyb2tlcl9xd2FwX21hcmsY5AMgASgCEhoKEWJy",
            "b2tlcl9xd2FwX3VNYXJrGOcDIAEoAhISCgl2d2FwX3BuX2wY6gMgASgCEhUK",
            "DHZ3YXBfZG5fcG5fbBjtAyABKAISGgoRdV9kcmlmdF92d2FwX3BuX2wY8AMg",
            "ASgCEhIKCXF3YXBfcG5fbBjzAyABKAISFQoMcXdhcF9kbl9wbl9sGPYDIAEo",
            "AhIaChF1X2RyaWZ0X3F3YXBfcG5fbBj5AyABKAISFwoObnVtX2ltcHJ2X2No",
            "bGQY/AMgASgFEhcKDmFjdGl2ZV9zZWNvbmRzGP8DIAEoAhIVCgx3aXRoX3Nl",
            "Y29uZHMYggQgASgCEhYKDWFsb25lX3NlY29uZHMYhQQgASgCEhgKD3dvcmtp",
            "bmdfc2Vjb25kcxiIBCABKAISGQoQbnVtX3Jpc2tfY2FuY2VscxiLBCABKAUS",
            "GgoRcmlza19ob2xkX3NlY29uZHMYjgQgASgCEhsKEnJpc2tfdGhydGxfc2Vj",
            "b25kcxiRBCABKAISIAoXbnVtX21ha2VfdGhyb3R0bGVfc2tpcHMYlAQgASgF",
            "EiAKF3N1bV9tYWtlX3Rocm90dGxlX2RlbGF5GJcEIAEoAhIUCgt1X3ByY19k",
            "cmlmdBiaBCABKAISFAoLc192b2xfZHJpZnQYnQQgASgCEjYKCnVwZGF0ZV9z",
            "cmMYoAQgASgOMiEuc3BpZGVycm9jay5wcm90b2J1Zi5VcGRhdGVTb3VyY2US",
            "FAoLbnVtX3VwZGF0ZXMYowQgASgFEi4KCXRpbWVzdGFtcBimBCABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wGvkBCgRQS2V5Eg0KBWFjY250GAog",
            "ASgJEi8KB3NlY19rZXkYCyABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLk9w",
            "dGlvbktleRIyCghzZWNfdHlwZRgMIAEoDjIgLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuU3BkcktleVR5cGUSNAoLc3Bkcl9zb3VyY2UYDSABKA4yHy5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlNwZHJTb3VyY2USFQoNZ3JvdXBpbmdfY29kZRgOIAEo",
            "AxIwCgpvcmRlcl9zaWRlGA8gASgOMhwuc3BpZGVycm9jay5wcm90b2J1Zi5C",
            "dXlTZWxsYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrParentBrkrState), global::Spiderrock.Protobuf.SpdrParentBrkrState.Parser, new[]{ "Meta", "Pkey", "UserName", "ClientFirm", "ParentNumber", "BaseParentNumber", "RiskGroupId", "TriggerGroupId", "Strategy", "AltOrderId", "PackageId", "AltAccnt", "AltUserName", "StageType", "IsFlagged", "Ticker", "UPrc", "UPrcOrder", "NbboBid", "NbboAsk", "NbboBidSz", "NbboAskSz", "SurfacePrc", "SurfaceVol", "OrderRefSDiv", "OrderRefSDivType", "SpdrBrokerStatus", "SpdrOrderStatus", "SpdrCloseReason", "SpdrRejectReason", "SpdrRejectLevel", "IsPermanentlyClosed", "NumExternRiskHold", "LastExternRiskText", "LastExternRiskReject", "SpdrComment", "OrderSize", "OrderActiveSize", "UpdateDttm", "GoodTillDttm", "LeavesQuantity", "AvgFillPrice", "AvgFillUPrice", "CumFillQuantity", "AvgFillVol", "CumFillVega", "CumFillTheta", "CumFillDDelta", "CumExchFee", "CumM10Pnl", "CumArrivalPnl", "LastFillDttm", "RiskLimitSize", "RiskLimitDesc", "RiskLimitLevel", "RiskLimitDetail", "LimitPrice", "LimitErr", "LimitErrDesc", "BestLimitOffset", "MakeProbLimit", "MakeSurfOffset", "MakeLimitPrice", "MakeLimitErr", "TakeProbLimit", "TakeSurfOffset", "TakeLimitPrice", "TakeLimitErr", "AutoHedge", "HedgeInstrument", "HedgeSecKey", "HedgeSecType", "HedgeBetaRatio", "HedgeScope", "HedgeTIF", "ExternHedgeExDest", "ExternHedgeParams", "UserData1", "UserData2", "MaxProgress", "MaxProgressDetail", "MaxProgressTime", "BrokerState", "BrokerCounter", "MakeState", "MakeCounter", "TakeState", "TakeCounter", "MktRespState", "MktRespCounter", "MktCrossState", "MktCrossCounter", "ProgressRuleDetail", "LastChildEvent", "LastChildRejectDttm", "LastChildRejectText", "SpdrMktState", "Cpx1", "Csz1", "Cex1", "Cnt1", "Cpx2", "Csz2", "Cex2", "Cnt2", "CMore", "ExpiryKey", "CnVol", "CnYrs", "CnUPrc", "CnDe", "CnDd", "CnVe", "CnGa", "CnTh", "CnPr", "DdMult", "PriceFormat", "UPriceFormat", "UnderliersPerCn", "UnderlierType", "TickValue", "PointValue", "PointCurrency", "TheoVol", "TheoPrc", "NumNewOrders", "NumParentLimits", "BrokerVwapMark", "BrokerVwapUMark", "BrokerQwapMark", "BrokerQwapUMark", "VwapPnL", "VwapDnPnL", "UDriftVwapPnL", "QwapPnL", "QwapDnPnL", "UDriftQwapPnL", "NumImprvChld", "ActiveSeconds", "WithSeconds", "AloneSeconds", "WorkingSeconds", "NumRiskCancels", "RiskHoldSeconds", "RiskThrtlSeconds", "NumMakeThrottleSkips", "SumMakeThrottleDelay", "UPrcDrift", "SVolDrift", "UpdateSrc", "NumUpdates", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.SpdrParentBrkrState.Types.PKey), global::Spiderrock.Protobuf.SpdrParentBrkrState.Types.PKey.Parser, new[]{ "Accnt", "SecKey", "SecType", "SpdrSource", "GroupingCode", "OrderSide" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///SpdrParentBrkrState records are created/published by SpiderRock Execution Engines. Each record describes the current state of one (or more) parent orders. If a parent order is canceled/replaced then entire chain is represented by a single broker state record.
  /// </summary>
  public sealed partial class SpdrParentBrkrState : pb::IMessage<SpdrParentBrkrState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpdrParentBrkrState> _parser = new pb::MessageParser<SpdrParentBrkrState>(() => new SpdrParentBrkrState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpdrParentBrkrState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.SpdrParentBrkrStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrParentBrkrState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrParentBrkrState(SpdrParentBrkrState other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      userName_ = other.userName_;
      clientFirm_ = other.clientFirm_;
      parentNumber_ = other.parentNumber_;
      baseParentNumber_ = other.baseParentNumber_;
      riskGroupId_ = other.riskGroupId_;
      triggerGroupId_ = other.triggerGroupId_;
      strategy_ = other.strategy_;
      altOrderId_ = other.altOrderId_;
      packageId_ = other.packageId_;
      altAccnt_ = other.altAccnt_;
      altUserName_ = other.altUserName_;
      stageType_ = other.stageType_;
      isFlagged_ = other.isFlagged_;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      uPrc_ = other.uPrc_;
      uPrcOrder_ = other.uPrcOrder_;
      nbboBid_ = other.nbboBid_;
      nbboAsk_ = other.nbboAsk_;
      nbboBidSz_ = other.nbboBidSz_;
      nbboAskSz_ = other.nbboAskSz_;
      surfacePrc_ = other.surfacePrc_;
      surfaceVol_ = other.surfaceVol_;
      orderRefSDiv_ = other.orderRefSDiv_;
      orderRefSDivType_ = other.orderRefSDivType_;
      spdrBrokerStatus_ = other.spdrBrokerStatus_;
      spdrOrderStatus_ = other.spdrOrderStatus_;
      spdrCloseReason_ = other.spdrCloseReason_;
      spdrRejectReason_ = other.spdrRejectReason_;
      spdrRejectLevel_ = other.spdrRejectLevel_;
      isPermanentlyClosed_ = other.isPermanentlyClosed_;
      numExternRiskHold_ = other.numExternRiskHold_;
      lastExternRiskText_ = other.lastExternRiskText_;
      lastExternRiskReject_ = other.lastExternRiskReject_ != null ? other.lastExternRiskReject_.Clone() : null;
      spdrComment_ = other.spdrComment_;
      orderSize_ = other.orderSize_;
      orderActiveSize_ = other.orderActiveSize_;
      updateDttm_ = other.updateDttm_ != null ? other.updateDttm_.Clone() : null;
      goodTillDttm_ = other.goodTillDttm_ != null ? other.goodTillDttm_.Clone() : null;
      leavesQuantity_ = other.leavesQuantity_;
      avgFillPrice_ = other.avgFillPrice_;
      avgFillUPrice_ = other.avgFillUPrice_;
      cumFillQuantity_ = other.cumFillQuantity_;
      avgFillVol_ = other.avgFillVol_;
      cumFillVega_ = other.cumFillVega_;
      cumFillTheta_ = other.cumFillTheta_;
      cumFillDDelta_ = other.cumFillDDelta_;
      cumExchFee_ = other.cumExchFee_;
      cumM10Pnl_ = other.cumM10Pnl_;
      cumArrivalPnl_ = other.cumArrivalPnl_;
      lastFillDttm_ = other.lastFillDttm_ != null ? other.lastFillDttm_.Clone() : null;
      riskLimitSize_ = other.riskLimitSize_;
      riskLimitDesc_ = other.riskLimitDesc_;
      riskLimitLevel_ = other.riskLimitLevel_;
      riskLimitDetail_ = other.riskLimitDetail_;
      limitPrice_ = other.limitPrice_;
      limitErr_ = other.limitErr_;
      limitErrDesc_ = other.limitErrDesc_;
      bestLimitOffset_ = other.bestLimitOffset_;
      makeProbLimit_ = other.makeProbLimit_;
      makeSurfOffset_ = other.makeSurfOffset_;
      makeLimitPrice_ = other.makeLimitPrice_;
      makeLimitErr_ = other.makeLimitErr_;
      takeProbLimit_ = other.takeProbLimit_;
      takeSurfOffset_ = other.takeSurfOffset_;
      takeLimitPrice_ = other.takeLimitPrice_;
      takeLimitErr_ = other.takeLimitErr_;
      autoHedge_ = other.autoHedge_;
      hedgeInstrument_ = other.hedgeInstrument_;
      hedgeSecKey_ = other.hedgeSecKey_ != null ? other.hedgeSecKey_.Clone() : null;
      hedgeSecType_ = other.hedgeSecType_;
      hedgeBetaRatio_ = other.hedgeBetaRatio_;
      hedgeScope_ = other.hedgeScope_;
      hedgeTIF_ = other.hedgeTIF_;
      externHedgeExDest_ = other.externHedgeExDest_;
      externHedgeParams_ = other.externHedgeParams_;
      userData1_ = other.userData1_;
      userData2_ = other.userData2_;
      maxProgress_ = other.maxProgress_;
      maxProgressDetail_ = other.maxProgressDetail_;
      maxProgressTime_ = other.maxProgressTime_ != null ? other.maxProgressTime_.Clone() : null;
      brokerState_ = other.brokerState_;
      brokerCounter_ = other.brokerCounter_;
      makeState_ = other.makeState_;
      makeCounter_ = other.makeCounter_;
      takeState_ = other.takeState_;
      takeCounter_ = other.takeCounter_;
      mktRespState_ = other.mktRespState_;
      mktRespCounter_ = other.mktRespCounter_;
      mktCrossState_ = other.mktCrossState_;
      mktCrossCounter_ = other.mktCrossCounter_;
      progressRuleDetail_ = other.progressRuleDetail_;
      lastChildEvent_ = other.lastChildEvent_;
      lastChildRejectDttm_ = other.lastChildRejectDttm_ != null ? other.lastChildRejectDttm_.Clone() : null;
      lastChildRejectText_ = other.lastChildRejectText_;
      spdrMktState_ = other.spdrMktState_;
      cpx1_ = other.cpx1_;
      csz1_ = other.csz1_;
      cex1_ = other.cex1_;
      cnt1_ = other.cnt1_;
      cpx2_ = other.cpx2_;
      csz2_ = other.csz2_;
      cex2_ = other.cex2_;
      cnt2_ = other.cnt2_;
      cMore_ = other.cMore_;
      expiryKey_ = other.expiryKey_;
      cnVol_ = other.cnVol_;
      cnYrs_ = other.cnYrs_;
      cnUPrc_ = other.cnUPrc_;
      cnDe_ = other.cnDe_;
      cnDd_ = other.cnDd_;
      cnVe_ = other.cnVe_;
      cnGa_ = other.cnGa_;
      cnTh_ = other.cnTh_;
      cnPr_ = other.cnPr_;
      ddMult_ = other.ddMult_;
      priceFormat_ = other.priceFormat_;
      uPriceFormat_ = other.uPriceFormat_;
      underliersPerCn_ = other.underliersPerCn_;
      underlierType_ = other.underlierType_;
      tickValue_ = other.tickValue_;
      pointValue_ = other.pointValue_;
      pointCurrency_ = other.pointCurrency_;
      theoVol_ = other.theoVol_;
      theoPrc_ = other.theoPrc_;
      numNewOrders_ = other.numNewOrders_;
      numParentLimits_ = other.numParentLimits_;
      brokerVwapMark_ = other.brokerVwapMark_;
      brokerVwapUMark_ = other.brokerVwapUMark_;
      brokerQwapMark_ = other.brokerQwapMark_;
      brokerQwapUMark_ = other.brokerQwapUMark_;
      vwapPnL_ = other.vwapPnL_;
      vwapDnPnL_ = other.vwapDnPnL_;
      uDriftVwapPnL_ = other.uDriftVwapPnL_;
      qwapPnL_ = other.qwapPnL_;
      qwapDnPnL_ = other.qwapDnPnL_;
      uDriftQwapPnL_ = other.uDriftQwapPnL_;
      numImprvChld_ = other.numImprvChld_;
      activeSeconds_ = other.activeSeconds_;
      withSeconds_ = other.withSeconds_;
      aloneSeconds_ = other.aloneSeconds_;
      workingSeconds_ = other.workingSeconds_;
      numRiskCancels_ = other.numRiskCancels_;
      riskHoldSeconds_ = other.riskHoldSeconds_;
      riskThrtlSeconds_ = other.riskThrtlSeconds_;
      numMakeThrottleSkips_ = other.numMakeThrottleSkips_;
      sumMakeThrottleDelay_ = other.sumMakeThrottleDelay_;
      uPrcDrift_ = other.uPrcDrift_;
      sVolDrift_ = other.sVolDrift_;
      updateSrc_ = other.updateSrc_;
      numUpdates_ = other.numUpdates_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpdrParentBrkrState Clone() {
      return new SpdrParentBrkrState(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.SpdrParentBrkrState.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrParentBrkrState.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 100;
    private string userName_ = "";
    /// <summary>
    /// SR user name string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_firm" field.</summary>
    public const int ClientFirmFieldNumber = 103;
    private string clientFirm_ = "";
    /// <summary>
    /// SR client firm string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientFirm {
      get { return clientFirm_; }
      set {
        clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_number" field.</summary>
    public const int ParentNumberFieldNumber = 106;
    private long parentNumber_;
    /// <summary>
    /// SR parent number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ParentNumber {
      get { return parentNumber_; }
      set {
        parentNumber_ = value;
      }
    }

    /// <summary>Field number for the "base_parent_number" field.</summary>
    public const int BaseParentNumberFieldNumber = 109;
    private long baseParentNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long BaseParentNumber {
      get { return baseParentNumber_; }
      set {
        baseParentNumber_ = value;
      }
    }

    /// <summary>Field number for the "risk_group_id" field.</summary>
    public const int RiskGroupIdFieldNumber = 112;
    private long riskGroupId_;
    /// <summary>
    /// all orders with the same riskGroupId share a common set of risk counters;.Grp. risk limits apply to these shared counters
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RiskGroupId {
      get { return riskGroupId_; }
      set {
        riskGroupId_ = value;
      }
    }

    /// <summary>Field number for the "trigger_group_id" field.</summary>
    public const int TriggerGroupIdFieldNumber = 115;
    private long triggerGroupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TriggerGroupId {
      get { return triggerGroupId_; }
      set {
        triggerGroupId_ = value;
      }
    }

    /// <summary>Field number for the "strategy" field.</summary>
    public const int StrategyFieldNumber = 118;
    private string strategy_ = "";
    /// <summary>
    /// parent order strategy string (can be user supplied)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Strategy {
      get { return strategy_; }
      set {
        strategy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_order_id" field.</summary>
    public const int AltOrderIdFieldNumber = 121;
    private string altOrderId_ = "";
    /// <summary>
    /// alternate order ID (usually clOrdId from client)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltOrderId {
      get { return altOrderId_; }
      set {
        altOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "package_id" field.</summary>
    public const int PackageIdFieldNumber = 124;
    private long packageId_;
    /// <summary>
    /// groups related order/brokers together (eg. Legger w/MLeg Parent)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PackageId {
      get { return packageId_; }
      set {
        packageId_ = value;
      }
    }

    /// <summary>Field number for the "alt_accnt" field.</summary>
    public const int AltAccntFieldNumber = 127;
    private string altAccnt_ = "";
    /// <summary>
    /// alternate (client assigned) "long" account string (optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltAccnt {
      get { return altAccnt_; }
      set {
        altAccnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alt_user_name" field.</summary>
    public const int AltUserNameFieldNumber = 130;
    private string altUserName_ = "";
    /// <summary>
    /// alternate (client assigned) user name (optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AltUserName {
      get { return altUserName_; }
      set {
        altUserName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stage_type" field.</summary>
    public const int StageTypeFieldNumber = 133;
    private global::Spiderrock.Protobuf.SpdrStageType stageType_ = global::Spiderrock.Protobuf.SpdrStageType.Unspecified;
    /// <summary>
    /// parent is a staged order [StageLock, StageModify, StageReview]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrStageType StageType {
      get { return stageType_; }
      set {
        stageType_ = value;
      }
    }

    /// <summary>Field number for the "is_flagged" field.</summary>
    public const int IsFlaggedFieldNumber = 136;
    private global::Spiderrock.Protobuf.YesNo isFlagged_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// broker state records is flagged for action (user alert only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsFlagged {
      get { return isFlagged_; }
      set {
        isFlagged_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 139;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// underlier ticker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "u_prc" field.</summary>
    public const int UPrcFieldNumber = 142;
    private double uPrc_;
    /// <summary>
    /// underlier price (usually mid-market)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrc {
      get { return uPrc_; }
      set {
        uPrc_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_order" field.</summary>
    public const int UPrcOrderFieldNumber = 145;
    private double uPrcOrder_;
    /// <summary>
    /// underlier price at the time of last parent order arrival
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrcOrder {
      get { return uPrcOrder_; }
      set {
        uPrcOrder_ = value;
      }
    }

    /// <summary>Field number for the "nbbo_bid" field.</summary>
    public const int NbboBidFieldNumber = 148;
    private double nbboBid_;
    /// <summary>
    /// current option nbbo bid (at time of record publish)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NbboBid {
      get { return nbboBid_; }
      set {
        nbboBid_ = value;
      }
    }

    /// <summary>Field number for the "nbbo_ask" field.</summary>
    public const int NbboAskFieldNumber = 151;
    private double nbboAsk_;
    /// <summary>
    /// current option nbbo ask (at time of record publish)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NbboAsk {
      get { return nbboAsk_; }
      set {
        nbboAsk_ = value;
      }
    }

    /// <summary>Field number for the "nbbo_bid_sz" field.</summary>
    public const int NbboBidSzFieldNumber = 154;
    private int nbboBidSz_;
    /// <summary>
    /// current option nbbo cum bid size (at time of record publish)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NbboBidSz {
      get { return nbboBidSz_; }
      set {
        nbboBidSz_ = value;
      }
    }

    /// <summary>Field number for the "nbbo_ask_sz" field.</summary>
    public const int NbboAskSzFieldNumber = 157;
    private int nbboAskSz_;
    /// <summary>
    /// current option nbbo cum ask size (at time of record publish)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NbboAskSz {
      get { return nbboAskSz_; }
      set {
        nbboAskSz_ = value;
      }
    }

    /// <summary>Field number for the "surface_prc" field.</summary>
    public const int SurfacePrcFieldNumber = 160;
    private float surfacePrc_;
    /// <summary>
    /// SR surface price @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfacePrc {
      get { return surfacePrc_; }
      set {
        surfacePrc_ = value;
      }
    }

    /// <summary>Field number for the "surface_vol" field.</summary>
    public const int SurfaceVolFieldNumber = 163;
    private float surfaceVol_;
    /// <summary>
    /// SR surface volatility @ record publish
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SurfaceVol {
      get { return surfaceVol_; }
      set {
        surfaceVol_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_sDiv" field.</summary>
    public const int OrderRefSDivFieldNumber = 166;
    private float orderRefSDiv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OrderRefSDiv {
      get { return orderRefSDiv_; }
      set {
        orderRefSDiv_ = value;
      }
    }

    /// <summary>Field number for the "order_ref_sDiv_type" field.</summary>
    public const int OrderRefSDivTypeFieldNumber = 169;
    private global::Spiderrock.Protobuf.RefSDivType orderRefSDivType_ = global::Spiderrock.Protobuf.RefSDivType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.RefSDivType OrderRefSDivType {
      get { return orderRefSDivType_; }
      set {
        orderRefSDivType_ = value;
      }
    }

    /// <summary>Field number for the "spdr_broker_status" field.</summary>
    public const int SpdrBrokerStatusFieldNumber = 172;
    private global::Spiderrock.Protobuf.SpdrBrokerStatus spdrBrokerStatus_ = global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrBrokerStatus SpdrBrokerStatus {
      get { return spdrBrokerStatus_; }
      set {
        spdrBrokerStatus_ = value;
      }
    }

    /// <summary>Field number for the "spdr_order_status" field.</summary>
    public const int SpdrOrderStatusFieldNumber = 175;
    private global::Spiderrock.Protobuf.SpdrOrderStatus spdrOrderStatus_ = global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified;
    /// <summary>
    /// status of the most recent parent order handled by this broker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrOrderStatus SpdrOrderStatus {
      get { return spdrOrderStatus_; }
      set {
        spdrOrderStatus_ = value;
      }
    }

    /// <summary>Field number for the "spdr_close_reason" field.</summary>
    public const int SpdrCloseReasonFieldNumber = 178;
    private global::Spiderrock.Protobuf.SpdrCloseReason spdrCloseReason_ = global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified;
    /// <summary>
    /// close reason of most recent parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrCloseReason SpdrCloseReason {
      get { return spdrCloseReason_; }
      set {
        spdrCloseReason_ = value;
      }
    }

    /// <summary>Field number for the "spdr_reject_reason" field.</summary>
    public const int SpdrRejectReasonFieldNumber = 181;
    private global::Spiderrock.Protobuf.SpdrRejectReason spdrRejectReason_ = global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified;
    /// <summary>
    /// reject reason (if any) of most recent parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrRejectReason SpdrRejectReason {
      get { return spdrRejectReason_; }
      set {
        spdrRejectReason_ = value;
      }
    }

    /// <summary>Field number for the "spdr_reject_level" field.</summary>
    public const int SpdrRejectLevelFieldNumber = 184;
    private global::Spiderrock.Protobuf.SpdrRiskLevel spdrRejectLevel_ = global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified;
    /// <summary>
    /// reject level (if any) of most recent parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrRiskLevel SpdrRejectLevel {
      get { return spdrRejectLevel_; }
      set {
        spdrRejectLevel_ = value;
      }
    }

    /// <summary>Field number for the "is_permanently_closed" field.</summary>
    public const int IsPermanentlyClosedFieldNumber = 187;
    private global::Spiderrock.Protobuf.YesNo isPermanentlyClosed_ = global::Spiderrock.Protobuf.YesNo.Unspecified;
    /// <summary>
    /// indicates that this broker is permanently closed (cannot be cxl/replaced or re-opened) [auto-hedge orders only]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.YesNo IsPermanentlyClosed {
      get { return isPermanentlyClosed_; }
      set {
        isPermanentlyClosed_ = value;
      }
    }

    /// <summary>Field number for the "num_extern_risk_hold" field.</summary>
    public const int NumExternRiskHoldFieldNumber = 190;
    private int numExternRiskHold_;
    /// <summary>
    /// num external risk management rejects received
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumExternRiskHold {
      get { return numExternRiskHold_; }
      set {
        numExternRiskHold_ = value;
      }
    }

    /// <summary>Field number for the "last_extern_risk_text" field.</summary>
    public const int LastExternRiskTextFieldNumber = 193;
    private string lastExternRiskText_ = "";
    /// <summary>
    /// last external (exch?) risk management reject
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LastExternRiskText {
      get { return lastExternRiskText_; }
      set {
        lastExternRiskText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_extern_risk_reject" field.</summary>
    public const int LastExternRiskRejectFieldNumber = 196;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastExternRiskReject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastExternRiskReject {
      get { return lastExternRiskReject_; }
      set {
        lastExternRiskReject_ = value;
      }
    }

    /// <summary>Field number for the "spdr_comment" field.</summary>
    public const int SpdrCommentFieldNumber = 199;
    private string spdrComment_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpdrComment {
      get { return spdrComment_; }
      set {
        spdrComment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_size" field.</summary>
    public const int OrderSizeFieldNumber = 202;
    private int orderSize_;
    /// <summary>
    /// order size of most recent parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrderSize {
      get { return orderSize_; }
      set {
        orderSize_ = value;
      }
    }

    /// <summary>Field number for the "order_active_size" field.</summary>
    public const int OrderActiveSizeFieldNumber = 205;
    private int orderActiveSize_;
    /// <summary>
    /// total activated size (total size released for execution) (-1 = all available size)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OrderActiveSize {
      get { return orderActiveSize_; }
      set {
        orderActiveSize_ = value;
      }
    }

    /// <summary>Field number for the "update_dttm" field.</summary>
    public const int UpdateDttmFieldNumber = 208;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateDttm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateDttm {
      get { return updateDttm_; }
      set {
        updateDttm_ = value;
      }
    }

    /// <summary>Field number for the "good_till_dttm" field.</summary>
    public const int GoodTillDttmFieldNumber = 211;
    private global::Google.Protobuf.WellKnownTypes.Timestamp goodTillDttm_;
    /// <summary>
    /// [expected] order expiration date/time (most recent parent order in cxl/replace chain)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp GoodTillDttm {
      get { return goodTillDttm_; }
      set {
        goodTillDttm_ = value;
      }
    }

    /// <summary>Field number for the "leaves_quantity" field.</summary>
    public const int LeavesQuantityFieldNumber = 214;
    private int leavesQuantity_;
    /// <summary>
    /// current child order leaves quantity (quantity actively working in the market;all child orders)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LeavesQuantity {
      get { return leavesQuantity_; }
      set {
        leavesQuantity_ = value;
      }
    }

    /// <summary>Field number for the "avg_fill_price" field.</summary>
    public const int AvgFillPriceFieldNumber = 217;
    private double avgFillPrice_;
    /// <summary>
    /// average fill price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillPrice {
      get { return avgFillPrice_; }
      set {
        avgFillPrice_ = value;
      }
    }

    /// <summary>Field number for the "avg_fill_uPrice" field.</summary>
    public const int AvgFillUPriceFieldNumber = 220;
    private double avgFillUPrice_;
    /// <summary>
    /// average fill underlier price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AvgFillUPrice {
      get { return avgFillUPrice_; }
      set {
        avgFillUPrice_ = value;
      }
    }

    /// <summary>Field number for the "cum_fill_quantity" field.</summary>
    public const int CumFillQuantityFieldNumber = 223;
    private int cumFillQuantity_;
    /// <summary>
    /// cumulative fill quantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CumFillQuantity {
      get { return cumFillQuantity_; }
      set {
        cumFillQuantity_ = value;
      }
    }

    /// <summary>Field number for the "avg_fill_vol" field.</summary>
    public const int AvgFillVolFieldNumber = 226;
    private float avgFillVol_;
    /// <summary>
    /// average fill volatility
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AvgFillVol {
      get { return avgFillVol_; }
      set {
        avgFillVol_ = value;
      }
    }

    /// <summary>Field number for the "cum_fill_vega" field.</summary>
    public const int CumFillVegaFieldNumber = 229;
    private float cumFillVega_;
    /// <summary>
    /// cumulative fill vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CumFillVega {
      get { return cumFillVega_; }
      set {
        cumFillVega_ = value;
      }
    }

    /// <summary>Field number for the "cum_fill_theta" field.</summary>
    public const int CumFillThetaFieldNumber = 232;
    private float cumFillTheta_;
    /// <summary>
    /// cumulative fill theta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CumFillTheta {
      get { return cumFillTheta_; }
      set {
        cumFillTheta_ = value;
      }
    }

    /// <summary>Field number for the "cum_fill_dDelta" field.</summary>
    public const int CumFillDDeltaFieldNumber = 235;
    private float cumFillDDelta_;
    /// <summary>
    /// cumulative fill $Delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CumFillDDelta {
      get { return cumFillDDelta_; }
      set {
        cumFillDDelta_ = value;
      }
    }

    /// <summary>Field number for the "cum_exch_fee" field.</summary>
    public const int CumExchFeeFieldNumber = 238;
    private float cumExchFee_;
    /// <summary>
    /// cumulative fill exch fee
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CumExchFee {
      get { return cumExchFee_; }
      set {
        cumExchFee_ = value;
      }
    }

    /// <summary>Field number for the "cum_m10_pnl" field.</summary>
    public const int CumM10PnlFieldNumber = 241;
    private float cumM10Pnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CumM10Pnl {
      get { return cumM10Pnl_; }
      set {
        cumM10Pnl_ = value;
      }
    }

    /// <summary>Field number for the "cum_arrival_pnl" field.</summary>
    public const int CumArrivalPnlFieldNumber = 244;
    private float cumArrivalPnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CumArrivalPnl {
      get { return cumArrivalPnl_; }
      set {
        cumArrivalPnl_ = value;
      }
    }

    /// <summary>Field number for the "last_fill_dttm" field.</summary>
    public const int LastFillDttmFieldNumber = 247;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastFillDttm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastFillDttm {
      get { return lastFillDttm_; }
      set {
        lastFillDttm_ = value;
      }
    }

    /// <summary>Field number for the "risk_limit_size" field.</summary>
    public const int RiskLimitSizeFieldNumber = 250;
    private int riskLimitSize_;
    /// <summary>
    /// risk limit size (maximum size to nearest risk limit)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RiskLimitSize {
      get { return riskLimitSize_; }
      set {
        riskLimitSize_ = value;
      }
    }

    /// <summary>Field number for the "risk_limit_desc" field.</summary>
    public const int RiskLimitDescFieldNumber = 253;
    private global::Spiderrock.Protobuf.SpdrRisk riskLimitDesc_ = global::Spiderrock.Protobuf.SpdrRisk.Unspecified;
    /// <summary>
    /// reason for size reduction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrRisk RiskLimitDesc {
      get { return riskLimitDesc_; }
      set {
        riskLimitDesc_ = value;
      }
    }

    /// <summary>Field number for the "risk_limit_level" field.</summary>
    public const int RiskLimitLevelFieldNumber = 256;
    private global::Spiderrock.Protobuf.SpdrRiskLevel riskLimitLevel_ = global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified;
    /// <summary>
    /// risk limit level responsible for reduction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrRiskLevel RiskLimitLevel {
      get { return riskLimitLevel_; }
      set {
        riskLimitLevel_ = value;
      }
    }

    /// <summary>Field number for the "risk_limit_detail" field.</summary>
    public const int RiskLimitDetailFieldNumber = 259;
    private string riskLimitDetail_ = "";
    /// <summary>
    /// risk limit detail
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RiskLimitDetail {
      get { return riskLimitDetail_; }
      set {
        riskLimitDetail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "limit_price" field.</summary>
    public const int LimitPriceFieldNumber = 262;
    private double limitPrice_;
    /// <summary>
    /// simple limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LimitPrice {
      get { return limitPrice_; }
      set {
        limitPrice_ = value;
      }
    }

    /// <summary>Field number for the "limit_err" field.</summary>
    public const int LimitErrFieldNumber = 265;
    private global::Spiderrock.Protobuf.LimitError limitErr_ = global::Spiderrock.Protobuf.LimitError.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.LimitError LimitErr {
      get { return limitErr_; }
      set {
        limitErr_ = value;
      }
    }

    /// <summary>Field number for the "limit_err_desc" field.</summary>
    public const int LimitErrDescFieldNumber = 268;
    private string limitErrDesc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LimitErrDesc {
      get { return limitErrDesc_; }
      set {
        limitErrDesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "best_limit_offset" field.</summary>
    public const int BestLimitOffsetFieldNumber = 271;
    private float bestLimitOffset_;
    /// <summary>
    /// (possible price improvement) (gap between best price and init/limit price) (Face/Matrix orders)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BestLimitOffset {
      get { return bestLimitOffset_; }
      set {
        bestLimitOffset_ = value;
      }
    }

    /// <summary>Field number for the "make_prob_limit" field.</summary>
    public const int MakeProbLimitFieldNumber = 274;
    private float makeProbLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MakeProbLimit {
      get { return makeProbLimit_; }
      set {
        makeProbLimit_ = value;
      }
    }

    /// <summary>Field number for the "make_surf_offset" field.</summary>
    public const int MakeSurfOffsetFieldNumber = 277;
    private float makeSurfOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MakeSurfOffset {
      get { return makeSurfOffset_; }
      set {
        makeSurfOffset_ = value;
      }
    }

    /// <summary>Field number for the "make_limit_price" field.</summary>
    public const int MakeLimitPriceFieldNumber = 280;
    private double makeLimitPrice_;
    /// <summary>
    /// make limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MakeLimitPrice {
      get { return makeLimitPrice_; }
      set {
        makeLimitPrice_ = value;
      }
    }

    /// <summary>Field number for the "make_limit_err" field.</summary>
    public const int MakeLimitErrFieldNumber = 283;
    private global::Spiderrock.Protobuf.LimitError makeLimitErr_ = global::Spiderrock.Protobuf.LimitError.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.LimitError MakeLimitErr {
      get { return makeLimitErr_; }
      set {
        makeLimitErr_ = value;
      }
    }

    /// <summary>Field number for the "take_prob_limit" field.</summary>
    public const int TakeProbLimitFieldNumber = 286;
    private float takeProbLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TakeProbLimit {
      get { return takeProbLimit_; }
      set {
        takeProbLimit_ = value;
      }
    }

    /// <summary>Field number for the "take_surf_offset" field.</summary>
    public const int TakeSurfOffsetFieldNumber = 289;
    private float takeSurfOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TakeSurfOffset {
      get { return takeSurfOffset_; }
      set {
        takeSurfOffset_ = value;
      }
    }

    /// <summary>Field number for the "take_limit_price" field.</summary>
    public const int TakeLimitPriceFieldNumber = 292;
    private double takeLimitPrice_;
    /// <summary>
    /// take limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TakeLimitPrice {
      get { return takeLimitPrice_; }
      set {
        takeLimitPrice_ = value;
      }
    }

    /// <summary>Field number for the "take_limit_err" field.</summary>
    public const int TakeLimitErrFieldNumber = 295;
    private global::Spiderrock.Protobuf.LimitError takeLimitErr_ = global::Spiderrock.Protobuf.LimitError.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.LimitError TakeLimitErr {
      get { return takeLimitErr_; }
      set {
        takeLimitErr_ = value;
      }
    }

    /// <summary>Field number for the "auto_hedge" field.</summary>
    public const int AutoHedgeFieldNumber = 298;
    private global::Spiderrock.Protobuf.AutoHedge autoHedge_ = global::Spiderrock.Protobuf.AutoHedge.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AutoHedge AutoHedge {
      get { return autoHedge_; }
      set {
        autoHedge_ = value;
      }
    }

    /// <summary>Field number for the "hedge_instrument" field.</summary>
    public const int HedgeInstrumentFieldNumber = 301;
    private global::Spiderrock.Protobuf.HedgeInst hedgeInstrument_ = global::Spiderrock.Protobuf.HedgeInst.Unspecified;
    /// <summary>
    /// auto-hedge instrument (from parent order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.HedgeInst HedgeInstrument {
      get { return hedgeInstrument_; }
      set {
        hedgeInstrument_ = value;
      }
    }

    /// <summary>Field number for the "hedge_sec_key" field.</summary>
    public const int HedgeSecKeyFieldNumber = 304;
    private global::Spiderrock.Protobuf.ExpiryKey hedgeSecKey_;
    /// <summary>
    /// auto-hedge sec key (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey HedgeSecKey {
      get { return hedgeSecKey_; }
      set {
        hedgeSecKey_ = value;
      }
    }

    /// <summary>Field number for the "hedge_sec_type" field.</summary>
    public const int HedgeSecTypeFieldNumber = 307;
    private global::Spiderrock.Protobuf.SpdrKeyType hedgeSecType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    /// <summary>
    /// auto-hedge sec type (Stock or Future)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType HedgeSecType {
      get { return hedgeSecType_; }
      set {
        hedgeSecType_ = value;
      }
    }

    /// <summary>Field number for the "hedge_beta_ratio" field.</summary>
    public const int HedgeBetaRatioFieldNumber = 310;
    private float hedgeBetaRatio_;
    /// <summary>
    /// auto-hedge ratio [from parent order (if supplied) or computed by SR]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HedgeBetaRatio {
      get { return hedgeBetaRatio_; }
      set {
        hedgeBetaRatio_ = value;
      }
    }

    /// <summary>Field number for the "hedge_scope" field.</summary>
    public const int HedgeScopeFieldNumber = 313;
    private global::Spiderrock.Protobuf.HedgeScope hedgeScope_ = global::Spiderrock.Protobuf.HedgeScope.Unspecified;
    /// <summary>
    /// hedge group scope [RiskGroup or Accnt]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.HedgeScope HedgeScope {
      get { return hedgeScope_; }
      set {
        hedgeScope_ = value;
      }
    }

    /// <summary>Field number for the "hedge_tIF" field.</summary>
    public const int HedgeTIFFieldNumber = 316;
    private global::Spiderrock.Protobuf.TimeInForce hedgeTIF_ = global::Spiderrock.Protobuf.TimeInForce.Unspecified;
    /// <summary>
    /// time in force for the autohedge order (can be Day or ExtDay) [None defaults to pOrder.timeInForce]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TimeInForce HedgeTIF {
      get { return hedgeTIF_; }
      set {
        hedgeTIF_ = value;
      }
    }

    /// <summary>Field number for the "extern_hedge_ex_dest" field.</summary>
    public const int ExternHedgeExDestFieldNumber = 319;
    private string externHedgeExDest_ = "";
    /// <summary>
    /// external broker exDest (only used if orderHandling=Extern)			# Should match FixRoutingTable.destination type (eg. #Nighthawk)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExternHedgeExDest {
      get { return externHedgeExDest_; }
      set {
        externHedgeExDest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extern_hedge_params" field.</summary>
    public const int ExternHedgeParamsFieldNumber = 322;
    private string externHedgeParams_ = "";
    /// <summary>
    /// external algo names/parameters (usually just an algo name)			# usually copied from the FixRoutingTable.externParams
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExternHedgeParams {
      get { return externHedgeParams_; }
      set {
        externHedgeParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_data1" field.</summary>
    public const int UserData1FieldNumber = 325;
    private string userData1_ = "";
    /// <summary>
    /// client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserData1 {
      get { return userData1_; }
      set {
        userData1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_data2" field.</summary>
    public const int UserData2FieldNumber = 328;
    private string userData2_ = "";
    /// <summary>
    /// client supplied data field; passes through to parent and child executions and reports as well as FIX drops
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserData2 {
      get { return userData2_; }
      set {
        userData2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_progress" field.</summary>
    public const int MaxProgressFieldNumber = 331;
    private global::Spiderrock.Protobuf.MaxProgress maxProgress_ = global::Spiderrock.Protobuf.MaxProgress.Unspecified;
    /// <summary>
    /// maximum point of progress for most recent parent order
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MaxProgress MaxProgress {
      get { return maxProgress_; }
      set {
        maxProgress_ = value;
      }
    }

    /// <summary>Field number for the "max_progress_detail" field.</summary>
    public const int MaxProgressDetailFieldNumber = 334;
    private string maxProgressDetail_ = "";
    /// <summary>
    /// additional detail on point of maximum progress
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MaxProgressDetail {
      get { return maxProgressDetail_; }
      set {
        maxProgressDetail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_progress_time" field.</summary>
    public const int MaxProgressTimeFieldNumber = 337;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maxProgressTime_;
    /// <summary>
    /// time of last max progress advance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaxProgressTime {
      get { return maxProgressTime_; }
      set {
        maxProgressTime_ = value;
      }
    }

    /// <summary>Field number for the "broker_state" field.</summary>
    public const int BrokerStateFieldNumber = 340;
    private global::Spiderrock.Protobuf.BrokerState brokerState_ = global::Spiderrock.Protobuf.BrokerState.Unspecified;
    /// <summary>
    /// broker monitor state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BrokerState BrokerState {
      get { return brokerState_; }
      set {
        brokerState_ = value;
      }
    }

    /// <summary>Field number for the "broker_counter" field.</summary>
    public const int BrokerCounterFieldNumber = 343;
    private int brokerCounter_;
    /// <summary>
    /// number of times order checked by broker monitor (note: most checks result in no action)]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BrokerCounter {
      get { return brokerCounter_; }
      set {
        brokerCounter_ = value;
      }
    }

    /// <summary>Field number for the "make_state" field.</summary>
    public const int MakeStateFieldNumber = 346;
    private global::Spiderrock.Protobuf.AlgoState makeState_ = global::Spiderrock.Protobuf.AlgoState.Unspecified;
    /// <summary>
    /// [enum] current state of non-marketable order handler (maker)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlgoState MakeState {
      get { return makeState_; }
      set {
        makeState_ = value;
      }
    }

    /// <summary>Field number for the "make_counter" field.</summary>
    public const int MakeCounterFieldNumber = 349;
    private int makeCounter_;
    /// <summary>
    /// number of times order checked by post handler (note: most checks result in no action)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MakeCounter {
      get { return makeCounter_; }
      set {
        makeCounter_ = value;
      }
    }

    /// <summary>Field number for the "take_state" field.</summary>
    public const int TakeStateFieldNumber = 352;
    private global::Spiderrock.Protobuf.AlgoState takeState_ = global::Spiderrock.Protobuf.AlgoState.Unspecified;
    /// <summary>
    /// [enum] current state of marketable order handler (taker)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.AlgoState TakeState {
      get { return takeState_; }
      set {
        takeState_ = value;
      }
    }

    /// <summary>Field number for the "take_counter" field.</summary>
    public const int TakeCounterFieldNumber = 355;
    private int takeCounter_;
    /// <summary>
    /// number of times order checked by take handler (note: most checks result in no action)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TakeCounter {
      get { return takeCounter_; }
      set {
        takeCounter_ = value;
      }
    }

    /// <summary>Field number for the "mkt_resp_state" field.</summary>
    public const int MktRespStateFieldNumber = 358;
    private global::Spiderrock.Protobuf.MktRespState mktRespState_ = global::Spiderrock.Protobuf.MktRespState.Unspecified;
    /// <summary>
    /// [enum] current state of response handler (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MktRespState MktRespState {
      get { return mktRespState_; }
      set {
        mktRespState_ = value;
      }
    }

    /// <summary>Field number for the "mkt_resp_counter" field.</summary>
    public const int MktRespCounterFieldNumber = 361;
    private int mktRespCounter_;
    /// <summary>
    /// number of times order checked by market response handler (note: most checks result in no action)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MktRespCounter {
      get { return mktRespCounter_; }
      set {
        mktRespCounter_ = value;
      }
    }

    /// <summary>Field number for the "mkt_cross_state" field.</summary>
    public const int MktCrossStateFieldNumber = 364;
    private global::Spiderrock.Protobuf.MktCrossState mktCrossState_ = global::Spiderrock.Protobuf.MktCrossState.Unspecified;
    /// <summary>
    /// [enum] current state of mkt cross handler (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MktCrossState MktCrossState {
      get { return mktCrossState_; }
      set {
        mktCrossState_ = value;
      }
    }

    /// <summary>Field number for the "mkt_cross_counter" field.</summary>
    public const int MktCrossCounterFieldNumber = 367;
    private int mktCrossCounter_;
    /// <summary>
    /// number of times order checked by market cross handler (note: most checks result in no action)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MktCrossCounter {
      get { return mktCrossCounter_; }
      set {
        mktCrossCounter_ = value;
      }
    }

    /// <summary>Field number for the "progress_rule_detail" field.</summary>
    public const int ProgressRuleDetailFieldNumber = 370;
    private string progressRuleDetail_ = "";
    /// <summary>
    /// Twap/Vwap progress detail
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ProgressRuleDetail {
      get { return progressRuleDetail_; }
      set {
        progressRuleDetail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_child_event" field.</summary>
    public const int LastChildEventFieldNumber = 373;
    private global::Spiderrock.Protobuf.ChildEvent lastChildEvent_ = global::Spiderrock.Protobuf.ChildEvent.Unspecified;
    /// <summary>
    /// [enum] last event code from broker/child order handler(s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ChildEvent LastChildEvent {
      get { return lastChildEvent_; }
      set {
        lastChildEvent_ = value;
      }
    }

    /// <summary>Field number for the "last_child_reject_dttm" field.</summary>
    public const int LastChildRejectDttmFieldNumber = 376;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastChildRejectDttm_;
    /// <summary>
    /// last child order reject dttm (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastChildRejectDttm {
      get { return lastChildRejectDttm_; }
      set {
        lastChildRejectDttm_ = value;
      }
    }

    /// <summary>Field number for the "last_child_reject_text" field.</summary>
    public const int LastChildRejectTextFieldNumber = 379;
    private string lastChildRejectText_ = "";
    /// <summary>
    /// last child order reject reason/text (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LastChildRejectText {
      get { return lastChildRejectText_; }
      set {
        lastChildRejectText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spdr_mkt_state" field.</summary>
    public const int SpdrMktStateFieldNumber = 382;
    private global::Spiderrock.Protobuf.SpdrMarketState spdrMktState_ = global::Spiderrock.Protobuf.SpdrMarketState.Unspecified;
    /// <summary>
    /// [enum] market state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrMarketState SpdrMktState {
      get { return spdrMktState_; }
      set {
        spdrMktState_ = value;
      }
    }

    /// <summary>Field number for the "cpx1" field.</summary>
    public const int Cpx1FieldNumber = 385;
    private float cpx1_;
    /// <summary>
    /// child price level #1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Cpx1 {
      get { return cpx1_; }
      set {
        cpx1_ = value;
      }
    }

    /// <summary>Field number for the "csz1" field.</summary>
    public const int Csz1FieldNumber = 388;
    private int csz1_;
    /// <summary>
    /// cumulative size represented at this price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Csz1 {
      get { return csz1_; }
      set {
        csz1_ = value;
      }
    }

    /// <summary>Field number for the "cex1" field.</summary>
    public const int Cex1FieldNumber = 391;
    private uint cex1_;
    /// <summary>
    /// bit mask of all exchanges where we are at this price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Cex1 {
      get { return cex1_; }
      set {
        cex1_ = value;
      }
    }

    /// <summary>Field number for the "cnt1" field.</summary>
    public const int Cnt1FieldNumber = 394;
    private int cnt1_;
    /// <summary>
    /// number of child orders at price level #1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cnt1 {
      get { return cnt1_; }
      set {
        cnt1_ = value;
      }
    }

    /// <summary>Field number for the "cpx2" field.</summary>
    public const int Cpx2FieldNumber = 397;
    private float cpx2_;
    /// <summary>
    /// child price level #2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Cpx2 {
      get { return cpx2_; }
      set {
        cpx2_ = value;
      }
    }

    /// <summary>Field number for the "csz2" field.</summary>
    public const int Csz2FieldNumber = 400;
    private int csz2_;
    /// <summary>
    /// cumulative size represented at this price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Csz2 {
      get { return csz2_; }
      set {
        csz2_ = value;
      }
    }

    /// <summary>Field number for the "cex2" field.</summary>
    public const int Cex2FieldNumber = 403;
    private uint cex2_;
    /// <summary>
    /// bit mask of all exchanges where we are at this price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Cex2 {
      get { return cex2_; }
      set {
        cex2_ = value;
      }
    }

    /// <summary>Field number for the "cnt2" field.</summary>
    public const int Cnt2FieldNumber = 406;
    private int cnt2_;
    /// <summary>
    /// number of child orders at price level #2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Cnt2 {
      get { return cnt2_; }
      set {
        cnt2_ = value;
      }
    }

    /// <summary>Field number for the "c_more" field.</summary>
    public const int CMoreFieldNumber = 409;
    private int cMore_;
    /// <summary>
    /// number of additional child orders at inferior prices (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CMore {
      get { return cMore_; }
      set {
        cMore_ = value;
      }
    }

    /// <summary>Field number for the "expiry_key" field.</summary>
    public const int ExpiryKeyFieldNumber = 412;
    private string expiryKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExpiryKey {
      get { return expiryKey_; }
      set {
        expiryKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cn_vol" field.</summary>
    public const int CnVolFieldNumber = 415;
    private float cnVol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CnVol {
      get { return cnVol_; }
      set {
        cnVol_ = value;
      }
    }

    /// <summary>Field number for the "cn_yrs" field.</summary>
    public const int CnYrsFieldNumber = 418;
    private float cnYrs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CnYrs {
      get { return cnYrs_; }
      set {
        cnYrs_ = value;
      }
    }

    /// <summary>Field number for the "cn_uPrc" field.</summary>
    public const int CnUPrcFieldNumber = 421;
    private float cnUPrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CnUPrc {
      get { return cnUPrc_; }
      set {
        cnUPrc_ = value;
      }
    }

    /// <summary>Field number for the "cn_de" field.</summary>
    public const int CnDeFieldNumber = 424;
    private float cnDe_;
    /// <summary>
    /// delta per contract
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CnDe {
      get { return cnDe_; }
      set {
        cnDe_ = value;
      }
    }

    /// <summary>Field number for the "cn_dd" field.</summary>
    public const int CnDdFieldNumber = 427;
    private float cnDd_;
    /// <summary>
    /// $delta per contract
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CnDd {
      get { return cnDd_; }
      set {
        cnDd_ = value;
      }
    }

    /// <summary>Field number for the "cn_ve" field.</summary>
    public const int CnVeFieldNumber = 430;
    private float cnVe_;
    /// <summary>
    /// vega per contract
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CnVe {
      get { return cnVe_; }
      set {
        cnVe_ = value;
      }
    }

    /// <summary>Field number for the "cn_ga" field.</summary>
    public const int CnGaFieldNumber = 433;
    private float cnGa_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CnGa {
      get { return cnGa_; }
      set {
        cnGa_ = value;
      }
    }

    /// <summary>Field number for the "cn_th" field.</summary>
    public const int CnThFieldNumber = 436;
    private float cnTh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CnTh {
      get { return cnTh_; }
      set {
        cnTh_ = value;
      }
    }

    /// <summary>Field number for the "cn_pr" field.</summary>
    public const int CnPrFieldNumber = 439;
    private float cnPr_;
    /// <summary>
    /// premium per contract
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CnPr {
      get { return cnPr_; }
      set {
        cnPr_ = value;
      }
    }

    /// <summary>Field number for the "dd_mult" field.</summary>
    public const int DdMultFieldNumber = 442;
    private float ddMult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DdMult {
      get { return ddMult_; }
      set {
        ddMult_ = value;
      }
    }

    /// <summary>Field number for the "price_format" field.</summary>
    public const int PriceFormatFieldNumber = 445;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// option price format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat {
      get { return priceFormat_; }
      set {
        priceFormat_ = value;
      }
    }

    /// <summary>Field number for the "u_price_format" field.</summary>
    public const int UPriceFormatFieldNumber = 448;
    private global::Spiderrock.Protobuf.PriceFormat uPriceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// underlier price format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat UPriceFormat {
      get { return uPriceFormat_; }
      set {
        uPriceFormat_ = value;
      }
    }

    /// <summary>Field number for the "underliers_per_cn" field.</summary>
    public const int UnderliersPerCnFieldNumber = 451;
    private int underliersPerCn_;
    /// <summary>
    /// option delivery underliers per contract
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnderliersPerCn {
      get { return underliersPerCn_; }
      set {
        underliersPerCn_ = value;
      }
    }

    /// <summary>Field number for the "underlier_type" field.</summary>
    public const int UnderlierTypeFieldNumber = 454;
    private global::Spiderrock.Protobuf.UnderlierType underlierType_ = global::Spiderrock.Protobuf.UnderlierType.Unspecified;
    /// <summary>
    /// type of underlier (affects $greek calculations)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UnderlierType UnderlierType {
      get { return underlierType_; }
      set {
        underlierType_ = value;
      }
    }

    /// <summary>Field number for the "tick_value" field.</summary>
    public const int TickValueFieldNumber = 457;
    private float tickValue_;
    /// <summary>
    /// $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TickValue {
      get { return tickValue_; }
      set {
        tickValue_ = value;
      }
    }

    /// <summary>Field number for the "point_value" field.</summary>
    public const int PointValueFieldNumber = 460;
    private float pointValue_;
    /// <summary>
    /// $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PointValue {
      get { return pointValue_; }
      set {
        pointValue_ = value;
      }
    }

    /// <summary>Field number for the "point_currency" field.</summary>
    public const int PointCurrencyFieldNumber = 463;
    private global::Spiderrock.Protobuf.Currency pointCurrency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency PointCurrency {
      get { return pointCurrency_; }
      set {
        pointCurrency_ = value;
      }
    }

    /// <summary>Field number for the "theo_vol" field.</summary>
    public const int TheoVolFieldNumber = 466;
    private float theoVol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TheoVol {
      get { return theoVol_; }
      set {
        theoVol_ = value;
      }
    }

    /// <summary>Field number for the "theo_prc" field.</summary>
    public const int TheoPrcFieldNumber = 469;
    private float theoPrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TheoPrc {
      get { return theoPrc_; }
      set {
        theoPrc_ = value;
      }
    }

    /// <summary>Field number for the "num_new_orders" field.</summary>
    public const int NumNewOrdersFieldNumber = 472;
    private int numNewOrders_;
    /// <summary>
    /// number of child orders generated by this broker (all parent orders)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumNewOrders {
      get { return numNewOrders_; }
      set {
        numNewOrders_ = value;
      }
    }

    /// <summary>Field number for the "num_parent_limits" field.</summary>
    public const int NumParentLimitsFieldNumber = 475;
    private uint numParentLimits_;
    /// <summary>
    /// number of parent limit messages received for this broker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumParentLimits {
      get { return numParentLimits_; }
      set {
        numParentLimits_ = value;
      }
    }

    /// <summary>Field number for the "broker_vwap_mark" field.</summary>
    public const int BrokerVwapMarkFieldNumber = 478;
    private float brokerVwapMark_;
    /// <summary>
    /// trade weighted average price (duration of parent order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BrokerVwapMark {
      get { return brokerVwapMark_; }
      set {
        brokerVwapMark_ = value;
      }
    }

    /// <summary>Field number for the "broker_vwap_uMark" field.</summary>
    public const int BrokerVwapUMarkFieldNumber = 481;
    private float brokerVwapUMark_;
    /// <summary>
    /// option-trade weighted average underlier price (duration of parent order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BrokerVwapUMark {
      get { return brokerVwapUMark_; }
      set {
        brokerVwapUMark_ = value;
      }
    }

    /// <summary>Field number for the "broker_qwap_mark" field.</summary>
    public const int BrokerQwapMarkFieldNumber = 484;
    private float brokerQwapMark_;
    /// <summary>
    /// average quote mid-market (duration of parent order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BrokerQwapMark {
      get { return brokerQwapMark_; }
      set {
        brokerQwapMark_ = value;
      }
    }

    /// <summary>Field number for the "broker_qwap_uMark" field.</summary>
    public const int BrokerQwapUMarkFieldNumber = 487;
    private float brokerQwapUMark_;
    /// <summary>
    /// average underlier quote mid-market (duration of parent order)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BrokerQwapUMark {
      get { return brokerQwapUMark_; }
      set {
        brokerQwapUMark_ = value;
      }
    }

    /// <summary>Field number for the "vwap_pn_l" field.</summary>
    public const int VwapPnLFieldNumber = 490;
    private float vwapPnL_;
    /// <summary>
    /// dir * qty * (brokerVwapMark - avgFillPrice)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VwapPnL {
      get { return vwapPnL_; }
      set {
        vwapPnL_ = value;
      }
    }

    /// <summary>Field number for the "vwap_dn_pn_l" field.</summary>
    public const int VwapDnPnLFieldNumber = 493;
    private float vwapDnPnL_;
    /// <summary>
    /// vwapPnL - uDriftVwapPnL
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VwapDnPnL {
      get { return vwapDnPnL_; }
      set {
        vwapDnPnL_ = value;
      }
    }

    /// <summary>Field number for the "u_drift_vwap_pn_l" field.</summary>
    public const int UDriftVwapPnLFieldNumber = 496;
    private float uDriftVwapPnL_;
    /// <summary>
    /// (dir * (de * qty * (brokerVwapUMark - avgFillUPrice)))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UDriftVwapPnL {
      get { return uDriftVwapPnL_; }
      set {
        uDriftVwapPnL_ = value;
      }
    }

    /// <summary>Field number for the "qwap_pn_l" field.</summary>
    public const int QwapPnLFieldNumber = 499;
    private float qwapPnL_;
    /// <summary>
    /// dir * qty * (brokerQwapMark - avgFillPrice)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float QwapPnL {
      get { return qwapPnL_; }
      set {
        qwapPnL_ = value;
      }
    }

    /// <summary>Field number for the "qwap_dn_pn_l" field.</summary>
    public const int QwapDnPnLFieldNumber = 502;
    private float qwapDnPnL_;
    /// <summary>
    /// qwapPnL - uDriftQwapPnL
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float QwapDnPnL {
      get { return qwapDnPnL_; }
      set {
        qwapDnPnL_ = value;
      }
    }

    /// <summary>Field number for the "u_drift_qwap_pn_l" field.</summary>
    public const int UDriftQwapPnLFieldNumber = 505;
    private float uDriftQwapPnL_;
    /// <summary>
    /// (dir * (de * qty * (brokerQwapUMark - avgFillUPrice)))
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UDriftQwapPnL {
      get { return uDriftQwapPnL_; }
      set {
        uDriftQwapPnL_ = value;
      }
    }

    /// <summary>Field number for the "num_imprv_chld" field.</summary>
    public const int NumImprvChldFieldNumber = 508;
    private int numImprvChld_;
    /// <summary>
    /// number of child orders that improved an existing market
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumImprvChld {
      get { return numImprvChld_; }
      set {
        numImprvChld_ = value;
      }
    }

    /// <summary>Field number for the "active_seconds" field.</summary>
    public const int ActiveSecondsFieldNumber = 511;
    private float activeSeconds_;
    /// <summary>
    /// number of seconds that the parent order was active
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ActiveSeconds {
      get { return activeSeconds_; }
      set {
        activeSeconds_ = value;
      }
    }

    /// <summary>Field number for the "with_seconds" field.</summary>
    public const int WithSecondsFieldNumber = 514;
    private float withSeconds_;
    /// <summary>
    /// number of seconds with one or more working child orders that are with of nbbo
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WithSeconds {
      get { return withSeconds_; }
      set {
        withSeconds_ = value;
      }
    }

    /// <summary>Field number for the "alone_seconds" field.</summary>
    public const int AloneSecondsFieldNumber = 517;
    private float aloneSeconds_;
    /// <summary>
    /// number of seconds with one or more working child orders that make up 100% of nbbo
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AloneSeconds {
      get { return aloneSeconds_; }
      set {
        aloneSeconds_ = value;
      }
    }

    /// <summary>Field number for the "working_seconds" field.</summary>
    public const int WorkingSecondsFieldNumber = 520;
    private float workingSeconds_;
    /// <summary>
    /// number of child order seconds (can be greater than activeSeconds if working on more than one exchange)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WorkingSeconds {
      get { return workingSeconds_; }
      set {
        workingSeconds_ = value;
      }
    }

    /// <summary>Field number for the "num_risk_cancels" field.</summary>
    public const int NumRiskCancelsFieldNumber = 523;
    private int numRiskCancels_;
    /// <summary>
    /// number of child orders cancels for risk reasons
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumRiskCancels {
      get { return numRiskCancels_; }
      set {
        numRiskCancels_ = value;
      }
    }

    /// <summary>Field number for the "risk_hold_seconds" field.</summary>
    public const int RiskHoldSecondsFieldNumber = 526;
    private float riskHoldSeconds_;
    /// <summary>
    /// number of seconds with parent order active but on risk hold (zero child order risk size)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskHoldSeconds {
      get { return riskHoldSeconds_; }
      set {
        riskHoldSeconds_ = value;
      }
    }

    /// <summary>Field number for the "risk_thrtl_seconds" field.</summary>
    public const int RiskThrtlSecondsFieldNumber = 529;
    private float riskThrtlSeconds_;
    /// <summary>
    /// number of seconds with parent order active but in risk throttle condition (temporary hold after fast/mass risk cancel)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RiskThrtlSeconds {
      get { return riskThrtlSeconds_; }
      set {
        riskThrtlSeconds_ = value;
      }
    }

    /// <summary>Field number for the "num_make_throttle_skips" field.</summary>
    public const int NumMakeThrottleSkipsFieldNumber = 532;
    private int numMakeThrottleSkips_;
    /// <summary>
    /// number of childs orders not send to market dues to outbound lines being in a queued/throttled state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumMakeThrottleSkips {
      get { return numMakeThrottleSkips_; }
      set {
        numMakeThrottleSkips_ = value;
      }
    }

    /// <summary>Field number for the "sum_make_throttle_delay" field.</summary>
    public const int SumMakeThrottleDelayFieldNumber = 535;
    private float sumMakeThrottleDelay_;
    /// <summary>
    /// cumulative seconds of queue skip delay (seconds that a child order was not in the market dues to outbound lines being in a queued/throttled state)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SumMakeThrottleDelay {
      get { return sumMakeThrottleDelay_; }
      set {
        sumMakeThrottleDelay_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_drift" field.</summary>
    public const int UPrcDriftFieldNumber = 538;
    private float uPrcDrift_;
    /// <summary>
    /// underlier drift (since parent order start)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UPrcDrift {
      get { return uPrcDrift_; }
      set {
        uPrcDrift_ = value;
      }
    }

    /// <summary>Field number for the "s_vol_drift" field.</summary>
    public const int SVolDriftFieldNumber = 541;
    private float sVolDrift_;
    /// <summary>
    /// surface vol drift (since parent order start)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SVolDrift {
      get { return sVolDrift_; }
      set {
        sVolDrift_ = value;
      }
    }

    /// <summary>Field number for the "update_src" field.</summary>
    public const int UpdateSrcFieldNumber = 544;
    private global::Spiderrock.Protobuf.UpdateSource updateSrc_ = global::Spiderrock.Protobuf.UpdateSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UpdateSource UpdateSrc {
      get { return updateSrc_; }
      set {
        updateSrc_ = value;
      }
    }

    /// <summary>Field number for the "num_updates" field.</summary>
    public const int NumUpdatesFieldNumber = 547;
    private int numUpdates_;
    /// <summary>
    /// number of record updates (cumulative for the day)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumUpdates {
      get { return numUpdates_; }
      set {
        numUpdates_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 550;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// SR system timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpdrParentBrkrState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpdrParentBrkrState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (UserName != other.UserName) return false;
      if (ClientFirm != other.ClientFirm) return false;
      if (ParentNumber != other.ParentNumber) return false;
      if (BaseParentNumber != other.BaseParentNumber) return false;
      if (RiskGroupId != other.RiskGroupId) return false;
      if (TriggerGroupId != other.TriggerGroupId) return false;
      if (Strategy != other.Strategy) return false;
      if (AltOrderId != other.AltOrderId) return false;
      if (PackageId != other.PackageId) return false;
      if (AltAccnt != other.AltAccnt) return false;
      if (AltUserName != other.AltUserName) return false;
      if (StageType != other.StageType) return false;
      if (IsFlagged != other.IsFlagged) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrc, other.UPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrcOrder, other.UPrcOrder)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NbboBid, other.NbboBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NbboAsk, other.NbboAsk)) return false;
      if (NbboBidSz != other.NbboBidSz) return false;
      if (NbboAskSz != other.NbboAskSz) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfacePrc, other.SurfacePrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SurfaceVol, other.SurfaceVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OrderRefSDiv, other.OrderRefSDiv)) return false;
      if (OrderRefSDivType != other.OrderRefSDivType) return false;
      if (SpdrBrokerStatus != other.SpdrBrokerStatus) return false;
      if (SpdrOrderStatus != other.SpdrOrderStatus) return false;
      if (SpdrCloseReason != other.SpdrCloseReason) return false;
      if (SpdrRejectReason != other.SpdrRejectReason) return false;
      if (SpdrRejectLevel != other.SpdrRejectLevel) return false;
      if (IsPermanentlyClosed != other.IsPermanentlyClosed) return false;
      if (NumExternRiskHold != other.NumExternRiskHold) return false;
      if (LastExternRiskText != other.LastExternRiskText) return false;
      if (!object.Equals(LastExternRiskReject, other.LastExternRiskReject)) return false;
      if (SpdrComment != other.SpdrComment) return false;
      if (OrderSize != other.OrderSize) return false;
      if (OrderActiveSize != other.OrderActiveSize) return false;
      if (!object.Equals(UpdateDttm, other.UpdateDttm)) return false;
      if (!object.Equals(GoodTillDttm, other.GoodTillDttm)) return false;
      if (LeavesQuantity != other.LeavesQuantity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillPrice, other.AvgFillPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgFillUPrice, other.AvgFillUPrice)) return false;
      if (CumFillQuantity != other.CumFillQuantity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AvgFillVol, other.AvgFillVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CumFillVega, other.CumFillVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CumFillTheta, other.CumFillTheta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CumFillDDelta, other.CumFillDDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CumExchFee, other.CumExchFee)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CumM10Pnl, other.CumM10Pnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CumArrivalPnl, other.CumArrivalPnl)) return false;
      if (!object.Equals(LastFillDttm, other.LastFillDttm)) return false;
      if (RiskLimitSize != other.RiskLimitSize) return false;
      if (RiskLimitDesc != other.RiskLimitDesc) return false;
      if (RiskLimitLevel != other.RiskLimitLevel) return false;
      if (RiskLimitDetail != other.RiskLimitDetail) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LimitPrice, other.LimitPrice)) return false;
      if (LimitErr != other.LimitErr) return false;
      if (LimitErrDesc != other.LimitErrDesc) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BestLimitOffset, other.BestLimitOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MakeProbLimit, other.MakeProbLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MakeSurfOffset, other.MakeSurfOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MakeLimitPrice, other.MakeLimitPrice)) return false;
      if (MakeLimitErr != other.MakeLimitErr) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeProbLimit, other.TakeProbLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TakeSurfOffset, other.TakeSurfOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TakeLimitPrice, other.TakeLimitPrice)) return false;
      if (TakeLimitErr != other.TakeLimitErr) return false;
      if (AutoHedge != other.AutoHedge) return false;
      if (HedgeInstrument != other.HedgeInstrument) return false;
      if (!object.Equals(HedgeSecKey, other.HedgeSecKey)) return false;
      if (HedgeSecType != other.HedgeSecType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HedgeBetaRatio, other.HedgeBetaRatio)) return false;
      if (HedgeScope != other.HedgeScope) return false;
      if (HedgeTIF != other.HedgeTIF) return false;
      if (ExternHedgeExDest != other.ExternHedgeExDest) return false;
      if (ExternHedgeParams != other.ExternHedgeParams) return false;
      if (UserData1 != other.UserData1) return false;
      if (UserData2 != other.UserData2) return false;
      if (MaxProgress != other.MaxProgress) return false;
      if (MaxProgressDetail != other.MaxProgressDetail) return false;
      if (!object.Equals(MaxProgressTime, other.MaxProgressTime)) return false;
      if (BrokerState != other.BrokerState) return false;
      if (BrokerCounter != other.BrokerCounter) return false;
      if (MakeState != other.MakeState) return false;
      if (MakeCounter != other.MakeCounter) return false;
      if (TakeState != other.TakeState) return false;
      if (TakeCounter != other.TakeCounter) return false;
      if (MktRespState != other.MktRespState) return false;
      if (MktRespCounter != other.MktRespCounter) return false;
      if (MktCrossState != other.MktCrossState) return false;
      if (MktCrossCounter != other.MktCrossCounter) return false;
      if (ProgressRuleDetail != other.ProgressRuleDetail) return false;
      if (LastChildEvent != other.LastChildEvent) return false;
      if (!object.Equals(LastChildRejectDttm, other.LastChildRejectDttm)) return false;
      if (LastChildRejectText != other.LastChildRejectText) return false;
      if (SpdrMktState != other.SpdrMktState) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cpx1, other.Cpx1)) return false;
      if (Csz1 != other.Csz1) return false;
      if (Cex1 != other.Cex1) return false;
      if (Cnt1 != other.Cnt1) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cpx2, other.Cpx2)) return false;
      if (Csz2 != other.Csz2) return false;
      if (Cex2 != other.Cex2) return false;
      if (Cnt2 != other.Cnt2) return false;
      if (CMore != other.CMore) return false;
      if (ExpiryKey != other.ExpiryKey) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CnVol, other.CnVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CnYrs, other.CnYrs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CnUPrc, other.CnUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CnDe, other.CnDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CnDd, other.CnDd)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CnVe, other.CnVe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CnGa, other.CnGa)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CnTh, other.CnTh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CnPr, other.CnPr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DdMult, other.DdMult)) return false;
      if (PriceFormat != other.PriceFormat) return false;
      if (UPriceFormat != other.UPriceFormat) return false;
      if (UnderliersPerCn != other.UnderliersPerCn) return false;
      if (UnderlierType != other.UnderlierType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TickValue, other.TickValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointValue, other.PointValue)) return false;
      if (PointCurrency != other.PointCurrency) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TheoVol, other.TheoVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TheoPrc, other.TheoPrc)) return false;
      if (NumNewOrders != other.NumNewOrders) return false;
      if (NumParentLimits != other.NumParentLimits) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrokerVwapMark, other.BrokerVwapMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrokerVwapUMark, other.BrokerVwapUMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrokerQwapMark, other.BrokerQwapMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BrokerQwapUMark, other.BrokerQwapUMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VwapPnL, other.VwapPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VwapDnPnL, other.VwapDnPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UDriftVwapPnL, other.UDriftVwapPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(QwapPnL, other.QwapPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(QwapDnPnL, other.QwapDnPnL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UDriftQwapPnL, other.UDriftQwapPnL)) return false;
      if (NumImprvChld != other.NumImprvChld) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ActiveSeconds, other.ActiveSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WithSeconds, other.WithSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AloneSeconds, other.AloneSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WorkingSeconds, other.WorkingSeconds)) return false;
      if (NumRiskCancels != other.NumRiskCancels) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskHoldSeconds, other.RiskHoldSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RiskThrtlSeconds, other.RiskThrtlSeconds)) return false;
      if (NumMakeThrottleSkips != other.NumMakeThrottleSkips) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SumMakeThrottleDelay, other.SumMakeThrottleDelay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UPrcDrift, other.UPrcDrift)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SVolDrift, other.SVolDrift)) return false;
      if (UpdateSrc != other.UpdateSrc) return false;
      if (NumUpdates != other.NumUpdates) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
      if (ParentNumber != 0L) hash ^= ParentNumber.GetHashCode();
      if (BaseParentNumber != 0L) hash ^= BaseParentNumber.GetHashCode();
      if (RiskGroupId != 0L) hash ^= RiskGroupId.GetHashCode();
      if (TriggerGroupId != 0L) hash ^= TriggerGroupId.GetHashCode();
      if (Strategy.Length != 0) hash ^= Strategy.GetHashCode();
      if (AltOrderId.Length != 0) hash ^= AltOrderId.GetHashCode();
      if (PackageId != 0L) hash ^= PackageId.GetHashCode();
      if (AltAccnt.Length != 0) hash ^= AltAccnt.GetHashCode();
      if (AltUserName.Length != 0) hash ^= AltUserName.GetHashCode();
      if (StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) hash ^= StageType.GetHashCode();
      if (IsFlagged != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsFlagged.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (UPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrc);
      if (UPrcOrder != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrcOrder);
      if (NbboBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NbboBid);
      if (NbboAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NbboAsk);
      if (NbboBidSz != 0) hash ^= NbboBidSz.GetHashCode();
      if (NbboAskSz != 0) hash ^= NbboAskSz.GetHashCode();
      if (SurfacePrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfacePrc);
      if (SurfaceVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SurfaceVol);
      if (OrderRefSDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OrderRefSDiv);
      if (OrderRefSDivType != global::Spiderrock.Protobuf.RefSDivType.Unspecified) hash ^= OrderRefSDivType.GetHashCode();
      if (SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) hash ^= SpdrBrokerStatus.GetHashCode();
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) hash ^= SpdrOrderStatus.GetHashCode();
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) hash ^= SpdrCloseReason.GetHashCode();
      if (SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) hash ^= SpdrRejectReason.GetHashCode();
      if (SpdrRejectLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) hash ^= SpdrRejectLevel.GetHashCode();
      if (IsPermanentlyClosed != global::Spiderrock.Protobuf.YesNo.Unspecified) hash ^= IsPermanentlyClosed.GetHashCode();
      if (NumExternRiskHold != 0) hash ^= NumExternRiskHold.GetHashCode();
      if (LastExternRiskText.Length != 0) hash ^= LastExternRiskText.GetHashCode();
      if (lastExternRiskReject_ != null) hash ^= LastExternRiskReject.GetHashCode();
      if (SpdrComment.Length != 0) hash ^= SpdrComment.GetHashCode();
      if (OrderSize != 0) hash ^= OrderSize.GetHashCode();
      if (OrderActiveSize != 0) hash ^= OrderActiveSize.GetHashCode();
      if (updateDttm_ != null) hash ^= UpdateDttm.GetHashCode();
      if (goodTillDttm_ != null) hash ^= GoodTillDttm.GetHashCode();
      if (LeavesQuantity != 0) hash ^= LeavesQuantity.GetHashCode();
      if (AvgFillPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillPrice);
      if (AvgFillUPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgFillUPrice);
      if (CumFillQuantity != 0) hash ^= CumFillQuantity.GetHashCode();
      if (AvgFillVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AvgFillVol);
      if (CumFillVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CumFillVega);
      if (CumFillTheta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CumFillTheta);
      if (CumFillDDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CumFillDDelta);
      if (CumExchFee != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CumExchFee);
      if (CumM10Pnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CumM10Pnl);
      if (CumArrivalPnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CumArrivalPnl);
      if (lastFillDttm_ != null) hash ^= LastFillDttm.GetHashCode();
      if (RiskLimitSize != 0) hash ^= RiskLimitSize.GetHashCode();
      if (RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) hash ^= RiskLimitDesc.GetHashCode();
      if (RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) hash ^= RiskLimitLevel.GetHashCode();
      if (RiskLimitDetail.Length != 0) hash ^= RiskLimitDetail.GetHashCode();
      if (LimitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LimitPrice);
      if (LimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) hash ^= LimitErr.GetHashCode();
      if (LimitErrDesc.Length != 0) hash ^= LimitErrDesc.GetHashCode();
      if (BestLimitOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BestLimitOffset);
      if (MakeProbLimit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MakeProbLimit);
      if (MakeSurfOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MakeSurfOffset);
      if (MakeLimitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MakeLimitPrice);
      if (MakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) hash ^= MakeLimitErr.GetHashCode();
      if (TakeProbLimit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeProbLimit);
      if (TakeSurfOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TakeSurfOffset);
      if (TakeLimitPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TakeLimitPrice);
      if (TakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) hash ^= TakeLimitErr.GetHashCode();
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) hash ^= AutoHedge.GetHashCode();
      if (HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) hash ^= HedgeInstrument.GetHashCode();
      if (hedgeSecKey_ != null) hash ^= HedgeSecKey.GetHashCode();
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= HedgeSecType.GetHashCode();
      if (HedgeBetaRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HedgeBetaRatio);
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) hash ^= HedgeScope.GetHashCode();
      if (HedgeTIF != global::Spiderrock.Protobuf.TimeInForce.Unspecified) hash ^= HedgeTIF.GetHashCode();
      if (ExternHedgeExDest.Length != 0) hash ^= ExternHedgeExDest.GetHashCode();
      if (ExternHedgeParams.Length != 0) hash ^= ExternHedgeParams.GetHashCode();
      if (UserData1.Length != 0) hash ^= UserData1.GetHashCode();
      if (UserData2.Length != 0) hash ^= UserData2.GetHashCode();
      if (MaxProgress != global::Spiderrock.Protobuf.MaxProgress.Unspecified) hash ^= MaxProgress.GetHashCode();
      if (MaxProgressDetail.Length != 0) hash ^= MaxProgressDetail.GetHashCode();
      if (maxProgressTime_ != null) hash ^= MaxProgressTime.GetHashCode();
      if (BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) hash ^= BrokerState.GetHashCode();
      if (BrokerCounter != 0) hash ^= BrokerCounter.GetHashCode();
      if (MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) hash ^= MakeState.GetHashCode();
      if (MakeCounter != 0) hash ^= MakeCounter.GetHashCode();
      if (TakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) hash ^= TakeState.GetHashCode();
      if (TakeCounter != 0) hash ^= TakeCounter.GetHashCode();
      if (MktRespState != global::Spiderrock.Protobuf.MktRespState.Unspecified) hash ^= MktRespState.GetHashCode();
      if (MktRespCounter != 0) hash ^= MktRespCounter.GetHashCode();
      if (MktCrossState != global::Spiderrock.Protobuf.MktCrossState.Unspecified) hash ^= MktCrossState.GetHashCode();
      if (MktCrossCounter != 0) hash ^= MktCrossCounter.GetHashCode();
      if (ProgressRuleDetail.Length != 0) hash ^= ProgressRuleDetail.GetHashCode();
      if (LastChildEvent != global::Spiderrock.Protobuf.ChildEvent.Unspecified) hash ^= LastChildEvent.GetHashCode();
      if (lastChildRejectDttm_ != null) hash ^= LastChildRejectDttm.GetHashCode();
      if (LastChildRejectText.Length != 0) hash ^= LastChildRejectText.GetHashCode();
      if (SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) hash ^= SpdrMktState.GetHashCode();
      if (Cpx1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cpx1);
      if (Csz1 != 0) hash ^= Csz1.GetHashCode();
      if (Cex1 != 0) hash ^= Cex1.GetHashCode();
      if (Cnt1 != 0) hash ^= Cnt1.GetHashCode();
      if (Cpx2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cpx2);
      if (Csz2 != 0) hash ^= Csz2.GetHashCode();
      if (Cex2 != 0) hash ^= Cex2.GetHashCode();
      if (Cnt2 != 0) hash ^= Cnt2.GetHashCode();
      if (CMore != 0) hash ^= CMore.GetHashCode();
      if (ExpiryKey.Length != 0) hash ^= ExpiryKey.GetHashCode();
      if (CnVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CnVol);
      if (CnYrs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CnYrs);
      if (CnUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CnUPrc);
      if (CnDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CnDe);
      if (CnDd != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CnDd);
      if (CnVe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CnVe);
      if (CnGa != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CnGa);
      if (CnTh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CnTh);
      if (CnPr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CnPr);
      if (DdMult != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DdMult);
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat.GetHashCode();
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= UPriceFormat.GetHashCode();
      if (UnderliersPerCn != 0) hash ^= UnderliersPerCn.GetHashCode();
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) hash ^= UnderlierType.GetHashCode();
      if (TickValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TickValue);
      if (PointValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointValue);
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= PointCurrency.GetHashCode();
      if (TheoVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TheoVol);
      if (TheoPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TheoPrc);
      if (NumNewOrders != 0) hash ^= NumNewOrders.GetHashCode();
      if (NumParentLimits != 0) hash ^= NumParentLimits.GetHashCode();
      if (BrokerVwapMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrokerVwapMark);
      if (BrokerVwapUMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrokerVwapUMark);
      if (BrokerQwapMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrokerQwapMark);
      if (BrokerQwapUMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BrokerQwapUMark);
      if (VwapPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VwapPnL);
      if (VwapDnPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VwapDnPnL);
      if (UDriftVwapPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UDriftVwapPnL);
      if (QwapPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(QwapPnL);
      if (QwapDnPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(QwapDnPnL);
      if (UDriftQwapPnL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UDriftQwapPnL);
      if (NumImprvChld != 0) hash ^= NumImprvChld.GetHashCode();
      if (ActiveSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ActiveSeconds);
      if (WithSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WithSeconds);
      if (AloneSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AloneSeconds);
      if (WorkingSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WorkingSeconds);
      if (NumRiskCancels != 0) hash ^= NumRiskCancels.GetHashCode();
      if (RiskHoldSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskHoldSeconds);
      if (RiskThrtlSeconds != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RiskThrtlSeconds);
      if (NumMakeThrottleSkips != 0) hash ^= NumMakeThrottleSkips.GetHashCode();
      if (SumMakeThrottleDelay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SumMakeThrottleDelay);
      if (UPrcDrift != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UPrcDrift);
      if (SVolDrift != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SVolDrift);
      if (UpdateSrc != global::Spiderrock.Protobuf.UpdateSource.Unspecified) hash ^= UpdateSrc.GetHashCode();
      if (NumUpdates != 0) hash ^= NumUpdates.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(UserName);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(ClientFirm);
      }
      if (ParentNumber != 0L) {
        output.WriteRawTag(208, 6);
        output.WriteInt64(ParentNumber);
      }
      if (BaseParentNumber != 0L) {
        output.WriteRawTag(232, 6);
        output.WriteInt64(BaseParentNumber);
      }
      if (RiskGroupId != 0L) {
        output.WriteRawTag(128, 7);
        output.WriteInt64(RiskGroupId);
      }
      if (TriggerGroupId != 0L) {
        output.WriteRawTag(152, 7);
        output.WriteInt64(TriggerGroupId);
      }
      if (Strategy.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(Strategy);
      }
      if (AltOrderId.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(AltOrderId);
      }
      if (PackageId != 0L) {
        output.WriteRawTag(224, 7);
        output.WriteInt64(PackageId);
      }
      if (AltAccnt.Length != 0) {
        output.WriteRawTag(250, 7);
        output.WriteString(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        output.WriteRawTag(146, 8);
        output.WriteString(AltUserName);
      }
      if (StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) StageType);
      }
      if (IsFlagged != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) IsFlagged);
      }
      if (ticker_ != null) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(Ticker);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(241, 8);
        output.WriteDouble(UPrc);
      }
      if (UPrcOrder != 0D) {
        output.WriteRawTag(137, 9);
        output.WriteDouble(UPrcOrder);
      }
      if (NbboBid != 0D) {
        output.WriteRawTag(161, 9);
        output.WriteDouble(NbboBid);
      }
      if (NbboAsk != 0D) {
        output.WriteRawTag(185, 9);
        output.WriteDouble(NbboAsk);
      }
      if (NbboBidSz != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(NbboBidSz);
      }
      if (NbboAskSz != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(NbboAskSz);
      }
      if (SurfacePrc != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(SurfacePrc);
      }
      if (SurfaceVol != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(SurfaceVol);
      }
      if (OrderRefSDiv != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(OrderRefSDiv);
      }
      if (OrderRefSDivType != global::Spiderrock.Protobuf.RefSDivType.Unspecified) {
        output.WriteRawTag(200, 10);
        output.WriteEnum((int) OrderRefSDivType);
      }
      if (SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) {
        output.WriteRawTag(224, 10);
        output.WriteEnum((int) SpdrBrokerStatus);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        output.WriteRawTag(248, 10);
        output.WriteEnum((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        output.WriteRawTag(144, 11);
        output.WriteEnum((int) SpdrCloseReason);
      }
      if (SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) {
        output.WriteRawTag(168, 11);
        output.WriteEnum((int) SpdrRejectReason);
      }
      if (SpdrRejectLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) SpdrRejectLevel);
      }
      if (IsPermanentlyClosed != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) IsPermanentlyClosed);
      }
      if (NumExternRiskHold != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(NumExternRiskHold);
      }
      if (LastExternRiskText.Length != 0) {
        output.WriteRawTag(138, 12);
        output.WriteString(LastExternRiskText);
      }
      if (lastExternRiskReject_ != null) {
        output.WriteRawTag(162, 12);
        output.WriteMessage(LastExternRiskReject);
      }
      if (SpdrComment.Length != 0) {
        output.WriteRawTag(186, 12);
        output.WriteString(SpdrComment);
      }
      if (OrderSize != 0) {
        output.WriteRawTag(208, 12);
        output.WriteInt32(OrderSize);
      }
      if (OrderActiveSize != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(OrderActiveSize);
      }
      if (updateDttm_ != null) {
        output.WriteRawTag(130, 13);
        output.WriteMessage(UpdateDttm);
      }
      if (goodTillDttm_ != null) {
        output.WriteRawTag(154, 13);
        output.WriteMessage(GoodTillDttm);
      }
      if (LeavesQuantity != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(LeavesQuantity);
      }
      if (AvgFillPrice != 0D) {
        output.WriteRawTag(201, 13);
        output.WriteDouble(AvgFillPrice);
      }
      if (AvgFillUPrice != 0D) {
        output.WriteRawTag(225, 13);
        output.WriteDouble(AvgFillUPrice);
      }
      if (CumFillQuantity != 0) {
        output.WriteRawTag(248, 13);
        output.WriteInt32(CumFillQuantity);
      }
      if (AvgFillVol != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(AvgFillVol);
      }
      if (CumFillVega != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(CumFillVega);
      }
      if (CumFillTheta != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(CumFillTheta);
      }
      if (CumFillDDelta != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(CumFillDDelta);
      }
      if (CumExchFee != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(CumExchFee);
      }
      if (CumM10Pnl != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(CumM10Pnl);
      }
      if (CumArrivalPnl != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(CumArrivalPnl);
      }
      if (lastFillDttm_ != null) {
        output.WriteRawTag(186, 15);
        output.WriteMessage(LastFillDttm);
      }
      if (RiskLimitSize != 0) {
        output.WriteRawTag(208, 15);
        output.WriteInt32(RiskLimitSize);
      }
      if (RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) {
        output.WriteRawTag(232, 15);
        output.WriteEnum((int) RiskLimitDesc);
      }
      if (RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        output.WriteRawTag(128, 16);
        output.WriteEnum((int) RiskLimitLevel);
      }
      if (RiskLimitDetail.Length != 0) {
        output.WriteRawTag(154, 16);
        output.WriteString(RiskLimitDetail);
      }
      if (LimitPrice != 0D) {
        output.WriteRawTag(177, 16);
        output.WriteDouble(LimitPrice);
      }
      if (LimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        output.WriteRawTag(200, 16);
        output.WriteEnum((int) LimitErr);
      }
      if (LimitErrDesc.Length != 0) {
        output.WriteRawTag(226, 16);
        output.WriteString(LimitErrDesc);
      }
      if (BestLimitOffset != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(BestLimitOffset);
      }
      if (MakeProbLimit != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(MakeProbLimit);
      }
      if (MakeSurfOffset != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(MakeSurfOffset);
      }
      if (MakeLimitPrice != 0D) {
        output.WriteRawTag(193, 17);
        output.WriteDouble(MakeLimitPrice);
      }
      if (MakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        output.WriteRawTag(216, 17);
        output.WriteEnum((int) MakeLimitErr);
      }
      if (TakeProbLimit != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(TakeProbLimit);
      }
      if (TakeSurfOffset != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(TakeSurfOffset);
      }
      if (TakeLimitPrice != 0D) {
        output.WriteRawTag(161, 18);
        output.WriteDouble(TakeLimitPrice);
      }
      if (TakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        output.WriteRawTag(184, 18);
        output.WriteEnum((int) TakeLimitErr);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        output.WriteRawTag(208, 18);
        output.WriteEnum((int) AutoHedge);
      }
      if (HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) {
        output.WriteRawTag(232, 18);
        output.WriteEnum((int) HedgeInstrument);
      }
      if (hedgeSecKey_ != null) {
        output.WriteRawTag(130, 19);
        output.WriteMessage(HedgeSecKey);
      }
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(152, 19);
        output.WriteEnum((int) HedgeSecType);
      }
      if (HedgeBetaRatio != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(HedgeBetaRatio);
      }
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        output.WriteRawTag(200, 19);
        output.WriteEnum((int) HedgeScope);
      }
      if (HedgeTIF != global::Spiderrock.Protobuf.TimeInForce.Unspecified) {
        output.WriteRawTag(224, 19);
        output.WriteEnum((int) HedgeTIF);
      }
      if (ExternHedgeExDest.Length != 0) {
        output.WriteRawTag(250, 19);
        output.WriteString(ExternHedgeExDest);
      }
      if (ExternHedgeParams.Length != 0) {
        output.WriteRawTag(146, 20);
        output.WriteString(ExternHedgeParams);
      }
      if (UserData1.Length != 0) {
        output.WriteRawTag(170, 20);
        output.WriteString(UserData1);
      }
      if (UserData2.Length != 0) {
        output.WriteRawTag(194, 20);
        output.WriteString(UserData2);
      }
      if (MaxProgress != global::Spiderrock.Protobuf.MaxProgress.Unspecified) {
        output.WriteRawTag(216, 20);
        output.WriteEnum((int) MaxProgress);
      }
      if (MaxProgressDetail.Length != 0) {
        output.WriteRawTag(242, 20);
        output.WriteString(MaxProgressDetail);
      }
      if (maxProgressTime_ != null) {
        output.WriteRawTag(138, 21);
        output.WriteMessage(MaxProgressTime);
      }
      if (BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) {
        output.WriteRawTag(160, 21);
        output.WriteEnum((int) BrokerState);
      }
      if (BrokerCounter != 0) {
        output.WriteRawTag(184, 21);
        output.WriteInt32(BrokerCounter);
      }
      if (MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        output.WriteRawTag(208, 21);
        output.WriteEnum((int) MakeState);
      }
      if (MakeCounter != 0) {
        output.WriteRawTag(232, 21);
        output.WriteInt32(MakeCounter);
      }
      if (TakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        output.WriteRawTag(128, 22);
        output.WriteEnum((int) TakeState);
      }
      if (TakeCounter != 0) {
        output.WriteRawTag(152, 22);
        output.WriteInt32(TakeCounter);
      }
      if (MktRespState != global::Spiderrock.Protobuf.MktRespState.Unspecified) {
        output.WriteRawTag(176, 22);
        output.WriteEnum((int) MktRespState);
      }
      if (MktRespCounter != 0) {
        output.WriteRawTag(200, 22);
        output.WriteInt32(MktRespCounter);
      }
      if (MktCrossState != global::Spiderrock.Protobuf.MktCrossState.Unspecified) {
        output.WriteRawTag(224, 22);
        output.WriteEnum((int) MktCrossState);
      }
      if (MktCrossCounter != 0) {
        output.WriteRawTag(248, 22);
        output.WriteInt32(MktCrossCounter);
      }
      if (ProgressRuleDetail.Length != 0) {
        output.WriteRawTag(146, 23);
        output.WriteString(ProgressRuleDetail);
      }
      if (LastChildEvent != global::Spiderrock.Protobuf.ChildEvent.Unspecified) {
        output.WriteRawTag(168, 23);
        output.WriteEnum((int) LastChildEvent);
      }
      if (lastChildRejectDttm_ != null) {
        output.WriteRawTag(194, 23);
        output.WriteMessage(LastChildRejectDttm);
      }
      if (LastChildRejectText.Length != 0) {
        output.WriteRawTag(218, 23);
        output.WriteString(LastChildRejectText);
      }
      if (SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) {
        output.WriteRawTag(240, 23);
        output.WriteEnum((int) SpdrMktState);
      }
      if (Cpx1 != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(Cpx1);
      }
      if (Csz1 != 0) {
        output.WriteRawTag(160, 24);
        output.WriteInt32(Csz1);
      }
      if (Cex1 != 0) {
        output.WriteRawTag(184, 24);
        output.WriteUInt32(Cex1);
      }
      if (Cnt1 != 0) {
        output.WriteRawTag(208, 24);
        output.WriteInt32(Cnt1);
      }
      if (Cpx2 != 0F) {
        output.WriteRawTag(237, 24);
        output.WriteFloat(Cpx2);
      }
      if (Csz2 != 0) {
        output.WriteRawTag(128, 25);
        output.WriteInt32(Csz2);
      }
      if (Cex2 != 0) {
        output.WriteRawTag(152, 25);
        output.WriteUInt32(Cex2);
      }
      if (Cnt2 != 0) {
        output.WriteRawTag(176, 25);
        output.WriteInt32(Cnt2);
      }
      if (CMore != 0) {
        output.WriteRawTag(200, 25);
        output.WriteInt32(CMore);
      }
      if (ExpiryKey.Length != 0) {
        output.WriteRawTag(226, 25);
        output.WriteString(ExpiryKey);
      }
      if (CnVol != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(CnVol);
      }
      if (CnYrs != 0F) {
        output.WriteRawTag(149, 26);
        output.WriteFloat(CnYrs);
      }
      if (CnUPrc != 0F) {
        output.WriteRawTag(173, 26);
        output.WriteFloat(CnUPrc);
      }
      if (CnDe != 0F) {
        output.WriteRawTag(197, 26);
        output.WriteFloat(CnDe);
      }
      if (CnDd != 0F) {
        output.WriteRawTag(221, 26);
        output.WriteFloat(CnDd);
      }
      if (CnVe != 0F) {
        output.WriteRawTag(245, 26);
        output.WriteFloat(CnVe);
      }
      if (CnGa != 0F) {
        output.WriteRawTag(141, 27);
        output.WriteFloat(CnGa);
      }
      if (CnTh != 0F) {
        output.WriteRawTag(165, 27);
        output.WriteFloat(CnTh);
      }
      if (CnPr != 0F) {
        output.WriteRawTag(189, 27);
        output.WriteFloat(CnPr);
      }
      if (DdMult != 0F) {
        output.WriteRawTag(213, 27);
        output.WriteFloat(DdMult);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(232, 27);
        output.WriteEnum((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(128, 28);
        output.WriteEnum((int) UPriceFormat);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(152, 28);
        output.WriteInt32(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(176, 28);
        output.WriteEnum((int) UnderlierType);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(205, 28);
        output.WriteFloat(TickValue);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(229, 28);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(248, 28);
        output.WriteEnum((int) PointCurrency);
      }
      if (TheoVol != 0F) {
        output.WriteRawTag(149, 29);
        output.WriteFloat(TheoVol);
      }
      if (TheoPrc != 0F) {
        output.WriteRawTag(173, 29);
        output.WriteFloat(TheoPrc);
      }
      if (NumNewOrders != 0) {
        output.WriteRawTag(192, 29);
        output.WriteInt32(NumNewOrders);
      }
      if (NumParentLimits != 0) {
        output.WriteRawTag(216, 29);
        output.WriteUInt32(NumParentLimits);
      }
      if (BrokerVwapMark != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(BrokerVwapMark);
      }
      if (BrokerVwapUMark != 0F) {
        output.WriteRawTag(141, 30);
        output.WriteFloat(BrokerVwapUMark);
      }
      if (BrokerQwapMark != 0F) {
        output.WriteRawTag(165, 30);
        output.WriteFloat(BrokerQwapMark);
      }
      if (BrokerQwapUMark != 0F) {
        output.WriteRawTag(189, 30);
        output.WriteFloat(BrokerQwapUMark);
      }
      if (VwapPnL != 0F) {
        output.WriteRawTag(213, 30);
        output.WriteFloat(VwapPnL);
      }
      if (VwapDnPnL != 0F) {
        output.WriteRawTag(237, 30);
        output.WriteFloat(VwapDnPnL);
      }
      if (UDriftVwapPnL != 0F) {
        output.WriteRawTag(133, 31);
        output.WriteFloat(UDriftVwapPnL);
      }
      if (QwapPnL != 0F) {
        output.WriteRawTag(157, 31);
        output.WriteFloat(QwapPnL);
      }
      if (QwapDnPnL != 0F) {
        output.WriteRawTag(181, 31);
        output.WriteFloat(QwapDnPnL);
      }
      if (UDriftQwapPnL != 0F) {
        output.WriteRawTag(205, 31);
        output.WriteFloat(UDriftQwapPnL);
      }
      if (NumImprvChld != 0) {
        output.WriteRawTag(224, 31);
        output.WriteInt32(NumImprvChld);
      }
      if (ActiveSeconds != 0F) {
        output.WriteRawTag(253, 31);
        output.WriteFloat(ActiveSeconds);
      }
      if (WithSeconds != 0F) {
        output.WriteRawTag(149, 32);
        output.WriteFloat(WithSeconds);
      }
      if (AloneSeconds != 0F) {
        output.WriteRawTag(173, 32);
        output.WriteFloat(AloneSeconds);
      }
      if (WorkingSeconds != 0F) {
        output.WriteRawTag(197, 32);
        output.WriteFloat(WorkingSeconds);
      }
      if (NumRiskCancels != 0) {
        output.WriteRawTag(216, 32);
        output.WriteInt32(NumRiskCancels);
      }
      if (RiskHoldSeconds != 0F) {
        output.WriteRawTag(245, 32);
        output.WriteFloat(RiskHoldSeconds);
      }
      if (RiskThrtlSeconds != 0F) {
        output.WriteRawTag(141, 33);
        output.WriteFloat(RiskThrtlSeconds);
      }
      if (NumMakeThrottleSkips != 0) {
        output.WriteRawTag(160, 33);
        output.WriteInt32(NumMakeThrottleSkips);
      }
      if (SumMakeThrottleDelay != 0F) {
        output.WriteRawTag(189, 33);
        output.WriteFloat(SumMakeThrottleDelay);
      }
      if (UPrcDrift != 0F) {
        output.WriteRawTag(213, 33);
        output.WriteFloat(UPrcDrift);
      }
      if (SVolDrift != 0F) {
        output.WriteRawTag(237, 33);
        output.WriteFloat(SVolDrift);
      }
      if (UpdateSrc != global::Spiderrock.Protobuf.UpdateSource.Unspecified) {
        output.WriteRawTag(128, 34);
        output.WriteEnum((int) UpdateSrc);
      }
      if (NumUpdates != 0) {
        output.WriteRawTag(152, 34);
        output.WriteInt32(NumUpdates);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(178, 34);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(UserName);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(ClientFirm);
      }
      if (ParentNumber != 0L) {
        output.WriteRawTag(208, 6);
        output.WriteInt64(ParentNumber);
      }
      if (BaseParentNumber != 0L) {
        output.WriteRawTag(232, 6);
        output.WriteInt64(BaseParentNumber);
      }
      if (RiskGroupId != 0L) {
        output.WriteRawTag(128, 7);
        output.WriteInt64(RiskGroupId);
      }
      if (TriggerGroupId != 0L) {
        output.WriteRawTag(152, 7);
        output.WriteInt64(TriggerGroupId);
      }
      if (Strategy.Length != 0) {
        output.WriteRawTag(178, 7);
        output.WriteString(Strategy);
      }
      if (AltOrderId.Length != 0) {
        output.WriteRawTag(202, 7);
        output.WriteString(AltOrderId);
      }
      if (PackageId != 0L) {
        output.WriteRawTag(224, 7);
        output.WriteInt64(PackageId);
      }
      if (AltAccnt.Length != 0) {
        output.WriteRawTag(250, 7);
        output.WriteString(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        output.WriteRawTag(146, 8);
        output.WriteString(AltUserName);
      }
      if (StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        output.WriteRawTag(168, 8);
        output.WriteEnum((int) StageType);
      }
      if (IsFlagged != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(192, 8);
        output.WriteEnum((int) IsFlagged);
      }
      if (ticker_ != null) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(Ticker);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(241, 8);
        output.WriteDouble(UPrc);
      }
      if (UPrcOrder != 0D) {
        output.WriteRawTag(137, 9);
        output.WriteDouble(UPrcOrder);
      }
      if (NbboBid != 0D) {
        output.WriteRawTag(161, 9);
        output.WriteDouble(NbboBid);
      }
      if (NbboAsk != 0D) {
        output.WriteRawTag(185, 9);
        output.WriteDouble(NbboAsk);
      }
      if (NbboBidSz != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(NbboBidSz);
      }
      if (NbboAskSz != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(NbboAskSz);
      }
      if (SurfacePrc != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(SurfacePrc);
      }
      if (SurfaceVol != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(SurfaceVol);
      }
      if (OrderRefSDiv != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(OrderRefSDiv);
      }
      if (OrderRefSDivType != global::Spiderrock.Protobuf.RefSDivType.Unspecified) {
        output.WriteRawTag(200, 10);
        output.WriteEnum((int) OrderRefSDivType);
      }
      if (SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) {
        output.WriteRawTag(224, 10);
        output.WriteEnum((int) SpdrBrokerStatus);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        output.WriteRawTag(248, 10);
        output.WriteEnum((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        output.WriteRawTag(144, 11);
        output.WriteEnum((int) SpdrCloseReason);
      }
      if (SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) {
        output.WriteRawTag(168, 11);
        output.WriteEnum((int) SpdrRejectReason);
      }
      if (SpdrRejectLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        output.WriteRawTag(192, 11);
        output.WriteEnum((int) SpdrRejectLevel);
      }
      if (IsPermanentlyClosed != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        output.WriteRawTag(216, 11);
        output.WriteEnum((int) IsPermanentlyClosed);
      }
      if (NumExternRiskHold != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(NumExternRiskHold);
      }
      if (LastExternRiskText.Length != 0) {
        output.WriteRawTag(138, 12);
        output.WriteString(LastExternRiskText);
      }
      if (lastExternRiskReject_ != null) {
        output.WriteRawTag(162, 12);
        output.WriteMessage(LastExternRiskReject);
      }
      if (SpdrComment.Length != 0) {
        output.WriteRawTag(186, 12);
        output.WriteString(SpdrComment);
      }
      if (OrderSize != 0) {
        output.WriteRawTag(208, 12);
        output.WriteInt32(OrderSize);
      }
      if (OrderActiveSize != 0) {
        output.WriteRawTag(232, 12);
        output.WriteInt32(OrderActiveSize);
      }
      if (updateDttm_ != null) {
        output.WriteRawTag(130, 13);
        output.WriteMessage(UpdateDttm);
      }
      if (goodTillDttm_ != null) {
        output.WriteRawTag(154, 13);
        output.WriteMessage(GoodTillDttm);
      }
      if (LeavesQuantity != 0) {
        output.WriteRawTag(176, 13);
        output.WriteInt32(LeavesQuantity);
      }
      if (AvgFillPrice != 0D) {
        output.WriteRawTag(201, 13);
        output.WriteDouble(AvgFillPrice);
      }
      if (AvgFillUPrice != 0D) {
        output.WriteRawTag(225, 13);
        output.WriteDouble(AvgFillUPrice);
      }
      if (CumFillQuantity != 0) {
        output.WriteRawTag(248, 13);
        output.WriteInt32(CumFillQuantity);
      }
      if (AvgFillVol != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(AvgFillVol);
      }
      if (CumFillVega != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(CumFillVega);
      }
      if (CumFillTheta != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(CumFillTheta);
      }
      if (CumFillDDelta != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(CumFillDDelta);
      }
      if (CumExchFee != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(CumExchFee);
      }
      if (CumM10Pnl != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(CumM10Pnl);
      }
      if (CumArrivalPnl != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(CumArrivalPnl);
      }
      if (lastFillDttm_ != null) {
        output.WriteRawTag(186, 15);
        output.WriteMessage(LastFillDttm);
      }
      if (RiskLimitSize != 0) {
        output.WriteRawTag(208, 15);
        output.WriteInt32(RiskLimitSize);
      }
      if (RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) {
        output.WriteRawTag(232, 15);
        output.WriteEnum((int) RiskLimitDesc);
      }
      if (RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        output.WriteRawTag(128, 16);
        output.WriteEnum((int) RiskLimitLevel);
      }
      if (RiskLimitDetail.Length != 0) {
        output.WriteRawTag(154, 16);
        output.WriteString(RiskLimitDetail);
      }
      if (LimitPrice != 0D) {
        output.WriteRawTag(177, 16);
        output.WriteDouble(LimitPrice);
      }
      if (LimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        output.WriteRawTag(200, 16);
        output.WriteEnum((int) LimitErr);
      }
      if (LimitErrDesc.Length != 0) {
        output.WriteRawTag(226, 16);
        output.WriteString(LimitErrDesc);
      }
      if (BestLimitOffset != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(BestLimitOffset);
      }
      if (MakeProbLimit != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(MakeProbLimit);
      }
      if (MakeSurfOffset != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(MakeSurfOffset);
      }
      if (MakeLimitPrice != 0D) {
        output.WriteRawTag(193, 17);
        output.WriteDouble(MakeLimitPrice);
      }
      if (MakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        output.WriteRawTag(216, 17);
        output.WriteEnum((int) MakeLimitErr);
      }
      if (TakeProbLimit != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(TakeProbLimit);
      }
      if (TakeSurfOffset != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(TakeSurfOffset);
      }
      if (TakeLimitPrice != 0D) {
        output.WriteRawTag(161, 18);
        output.WriteDouble(TakeLimitPrice);
      }
      if (TakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        output.WriteRawTag(184, 18);
        output.WriteEnum((int) TakeLimitErr);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        output.WriteRawTag(208, 18);
        output.WriteEnum((int) AutoHedge);
      }
      if (HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) {
        output.WriteRawTag(232, 18);
        output.WriteEnum((int) HedgeInstrument);
      }
      if (hedgeSecKey_ != null) {
        output.WriteRawTag(130, 19);
        output.WriteMessage(HedgeSecKey);
      }
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(152, 19);
        output.WriteEnum((int) HedgeSecType);
      }
      if (HedgeBetaRatio != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(HedgeBetaRatio);
      }
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        output.WriteRawTag(200, 19);
        output.WriteEnum((int) HedgeScope);
      }
      if (HedgeTIF != global::Spiderrock.Protobuf.TimeInForce.Unspecified) {
        output.WriteRawTag(224, 19);
        output.WriteEnum((int) HedgeTIF);
      }
      if (ExternHedgeExDest.Length != 0) {
        output.WriteRawTag(250, 19);
        output.WriteString(ExternHedgeExDest);
      }
      if (ExternHedgeParams.Length != 0) {
        output.WriteRawTag(146, 20);
        output.WriteString(ExternHedgeParams);
      }
      if (UserData1.Length != 0) {
        output.WriteRawTag(170, 20);
        output.WriteString(UserData1);
      }
      if (UserData2.Length != 0) {
        output.WriteRawTag(194, 20);
        output.WriteString(UserData2);
      }
      if (MaxProgress != global::Spiderrock.Protobuf.MaxProgress.Unspecified) {
        output.WriteRawTag(216, 20);
        output.WriteEnum((int) MaxProgress);
      }
      if (MaxProgressDetail.Length != 0) {
        output.WriteRawTag(242, 20);
        output.WriteString(MaxProgressDetail);
      }
      if (maxProgressTime_ != null) {
        output.WriteRawTag(138, 21);
        output.WriteMessage(MaxProgressTime);
      }
      if (BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) {
        output.WriteRawTag(160, 21);
        output.WriteEnum((int) BrokerState);
      }
      if (BrokerCounter != 0) {
        output.WriteRawTag(184, 21);
        output.WriteInt32(BrokerCounter);
      }
      if (MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        output.WriteRawTag(208, 21);
        output.WriteEnum((int) MakeState);
      }
      if (MakeCounter != 0) {
        output.WriteRawTag(232, 21);
        output.WriteInt32(MakeCounter);
      }
      if (TakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        output.WriteRawTag(128, 22);
        output.WriteEnum((int) TakeState);
      }
      if (TakeCounter != 0) {
        output.WriteRawTag(152, 22);
        output.WriteInt32(TakeCounter);
      }
      if (MktRespState != global::Spiderrock.Protobuf.MktRespState.Unspecified) {
        output.WriteRawTag(176, 22);
        output.WriteEnum((int) MktRespState);
      }
      if (MktRespCounter != 0) {
        output.WriteRawTag(200, 22);
        output.WriteInt32(MktRespCounter);
      }
      if (MktCrossState != global::Spiderrock.Protobuf.MktCrossState.Unspecified) {
        output.WriteRawTag(224, 22);
        output.WriteEnum((int) MktCrossState);
      }
      if (MktCrossCounter != 0) {
        output.WriteRawTag(248, 22);
        output.WriteInt32(MktCrossCounter);
      }
      if (ProgressRuleDetail.Length != 0) {
        output.WriteRawTag(146, 23);
        output.WriteString(ProgressRuleDetail);
      }
      if (LastChildEvent != global::Spiderrock.Protobuf.ChildEvent.Unspecified) {
        output.WriteRawTag(168, 23);
        output.WriteEnum((int) LastChildEvent);
      }
      if (lastChildRejectDttm_ != null) {
        output.WriteRawTag(194, 23);
        output.WriteMessage(LastChildRejectDttm);
      }
      if (LastChildRejectText.Length != 0) {
        output.WriteRawTag(218, 23);
        output.WriteString(LastChildRejectText);
      }
      if (SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) {
        output.WriteRawTag(240, 23);
        output.WriteEnum((int) SpdrMktState);
      }
      if (Cpx1 != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(Cpx1);
      }
      if (Csz1 != 0) {
        output.WriteRawTag(160, 24);
        output.WriteInt32(Csz1);
      }
      if (Cex1 != 0) {
        output.WriteRawTag(184, 24);
        output.WriteUInt32(Cex1);
      }
      if (Cnt1 != 0) {
        output.WriteRawTag(208, 24);
        output.WriteInt32(Cnt1);
      }
      if (Cpx2 != 0F) {
        output.WriteRawTag(237, 24);
        output.WriteFloat(Cpx2);
      }
      if (Csz2 != 0) {
        output.WriteRawTag(128, 25);
        output.WriteInt32(Csz2);
      }
      if (Cex2 != 0) {
        output.WriteRawTag(152, 25);
        output.WriteUInt32(Cex2);
      }
      if (Cnt2 != 0) {
        output.WriteRawTag(176, 25);
        output.WriteInt32(Cnt2);
      }
      if (CMore != 0) {
        output.WriteRawTag(200, 25);
        output.WriteInt32(CMore);
      }
      if (ExpiryKey.Length != 0) {
        output.WriteRawTag(226, 25);
        output.WriteString(ExpiryKey);
      }
      if (CnVol != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(CnVol);
      }
      if (CnYrs != 0F) {
        output.WriteRawTag(149, 26);
        output.WriteFloat(CnYrs);
      }
      if (CnUPrc != 0F) {
        output.WriteRawTag(173, 26);
        output.WriteFloat(CnUPrc);
      }
      if (CnDe != 0F) {
        output.WriteRawTag(197, 26);
        output.WriteFloat(CnDe);
      }
      if (CnDd != 0F) {
        output.WriteRawTag(221, 26);
        output.WriteFloat(CnDd);
      }
      if (CnVe != 0F) {
        output.WriteRawTag(245, 26);
        output.WriteFloat(CnVe);
      }
      if (CnGa != 0F) {
        output.WriteRawTag(141, 27);
        output.WriteFloat(CnGa);
      }
      if (CnTh != 0F) {
        output.WriteRawTag(165, 27);
        output.WriteFloat(CnTh);
      }
      if (CnPr != 0F) {
        output.WriteRawTag(189, 27);
        output.WriteFloat(CnPr);
      }
      if (DdMult != 0F) {
        output.WriteRawTag(213, 27);
        output.WriteFloat(DdMult);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(232, 27);
        output.WriteEnum((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(128, 28);
        output.WriteEnum((int) UPriceFormat);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(152, 28);
        output.WriteInt32(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(176, 28);
        output.WriteEnum((int) UnderlierType);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(205, 28);
        output.WriteFloat(TickValue);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(229, 28);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(248, 28);
        output.WriteEnum((int) PointCurrency);
      }
      if (TheoVol != 0F) {
        output.WriteRawTag(149, 29);
        output.WriteFloat(TheoVol);
      }
      if (TheoPrc != 0F) {
        output.WriteRawTag(173, 29);
        output.WriteFloat(TheoPrc);
      }
      if (NumNewOrders != 0) {
        output.WriteRawTag(192, 29);
        output.WriteInt32(NumNewOrders);
      }
      if (NumParentLimits != 0) {
        output.WriteRawTag(216, 29);
        output.WriteUInt32(NumParentLimits);
      }
      if (BrokerVwapMark != 0F) {
        output.WriteRawTag(245, 29);
        output.WriteFloat(BrokerVwapMark);
      }
      if (BrokerVwapUMark != 0F) {
        output.WriteRawTag(141, 30);
        output.WriteFloat(BrokerVwapUMark);
      }
      if (BrokerQwapMark != 0F) {
        output.WriteRawTag(165, 30);
        output.WriteFloat(BrokerQwapMark);
      }
      if (BrokerQwapUMark != 0F) {
        output.WriteRawTag(189, 30);
        output.WriteFloat(BrokerQwapUMark);
      }
      if (VwapPnL != 0F) {
        output.WriteRawTag(213, 30);
        output.WriteFloat(VwapPnL);
      }
      if (VwapDnPnL != 0F) {
        output.WriteRawTag(237, 30);
        output.WriteFloat(VwapDnPnL);
      }
      if (UDriftVwapPnL != 0F) {
        output.WriteRawTag(133, 31);
        output.WriteFloat(UDriftVwapPnL);
      }
      if (QwapPnL != 0F) {
        output.WriteRawTag(157, 31);
        output.WriteFloat(QwapPnL);
      }
      if (QwapDnPnL != 0F) {
        output.WriteRawTag(181, 31);
        output.WriteFloat(QwapDnPnL);
      }
      if (UDriftQwapPnL != 0F) {
        output.WriteRawTag(205, 31);
        output.WriteFloat(UDriftQwapPnL);
      }
      if (NumImprvChld != 0) {
        output.WriteRawTag(224, 31);
        output.WriteInt32(NumImprvChld);
      }
      if (ActiveSeconds != 0F) {
        output.WriteRawTag(253, 31);
        output.WriteFloat(ActiveSeconds);
      }
      if (WithSeconds != 0F) {
        output.WriteRawTag(149, 32);
        output.WriteFloat(WithSeconds);
      }
      if (AloneSeconds != 0F) {
        output.WriteRawTag(173, 32);
        output.WriteFloat(AloneSeconds);
      }
      if (WorkingSeconds != 0F) {
        output.WriteRawTag(197, 32);
        output.WriteFloat(WorkingSeconds);
      }
      if (NumRiskCancels != 0) {
        output.WriteRawTag(216, 32);
        output.WriteInt32(NumRiskCancels);
      }
      if (RiskHoldSeconds != 0F) {
        output.WriteRawTag(245, 32);
        output.WriteFloat(RiskHoldSeconds);
      }
      if (RiskThrtlSeconds != 0F) {
        output.WriteRawTag(141, 33);
        output.WriteFloat(RiskThrtlSeconds);
      }
      if (NumMakeThrottleSkips != 0) {
        output.WriteRawTag(160, 33);
        output.WriteInt32(NumMakeThrottleSkips);
      }
      if (SumMakeThrottleDelay != 0F) {
        output.WriteRawTag(189, 33);
        output.WriteFloat(SumMakeThrottleDelay);
      }
      if (UPrcDrift != 0F) {
        output.WriteRawTag(213, 33);
        output.WriteFloat(UPrcDrift);
      }
      if (SVolDrift != 0F) {
        output.WriteRawTag(237, 33);
        output.WriteFloat(SVolDrift);
      }
      if (UpdateSrc != global::Spiderrock.Protobuf.UpdateSource.Unspecified) {
        output.WriteRawTag(128, 34);
        output.WriteEnum((int) UpdateSrc);
      }
      if (NumUpdates != 0) {
        output.WriteRawTag(152, 34);
        output.WriteInt32(NumUpdates);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(178, 34);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (UserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (ClientFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
      }
      if (ParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ParentNumber);
      }
      if (BaseParentNumber != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(BaseParentNumber);
      }
      if (RiskGroupId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RiskGroupId);
      }
      if (TriggerGroupId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TriggerGroupId);
      }
      if (Strategy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Strategy);
      }
      if (AltOrderId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltOrderId);
      }
      if (PackageId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PackageId);
      }
      if (AltAccnt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltAccnt);
      }
      if (AltUserName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AltUserName);
      }
      if (StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StageType);
      }
      if (IsFlagged != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsFlagged);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (UPrc != 0D) {
        size += 2 + 8;
      }
      if (UPrcOrder != 0D) {
        size += 2 + 8;
      }
      if (NbboBid != 0D) {
        size += 2 + 8;
      }
      if (NbboAsk != 0D) {
        size += 2 + 8;
      }
      if (NbboBidSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NbboBidSz);
      }
      if (NbboAskSz != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NbboAskSz);
      }
      if (SurfacePrc != 0F) {
        size += 2 + 4;
      }
      if (SurfaceVol != 0F) {
        size += 2 + 4;
      }
      if (OrderRefSDiv != 0F) {
        size += 2 + 4;
      }
      if (OrderRefSDivType != global::Spiderrock.Protobuf.RefSDivType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OrderRefSDivType);
      }
      if (SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrBrokerStatus);
      }
      if (SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrOrderStatus);
      }
      if (SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrCloseReason);
      }
      if (SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrRejectReason);
      }
      if (SpdrRejectLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrRejectLevel);
      }
      if (IsPermanentlyClosed != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsPermanentlyClosed);
      }
      if (NumExternRiskHold != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumExternRiskHold);
      }
      if (LastExternRiskText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastExternRiskText);
      }
      if (lastExternRiskReject_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastExternRiskReject);
      }
      if (SpdrComment.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpdrComment);
      }
      if (OrderSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderSize);
      }
      if (OrderActiveSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OrderActiveSize);
      }
      if (updateDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpdateDttm);
      }
      if (goodTillDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GoodTillDttm);
      }
      if (LeavesQuantity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LeavesQuantity);
      }
      if (AvgFillPrice != 0D) {
        size += 2 + 8;
      }
      if (AvgFillUPrice != 0D) {
        size += 2 + 8;
      }
      if (CumFillQuantity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CumFillQuantity);
      }
      if (AvgFillVol != 0F) {
        size += 2 + 4;
      }
      if (CumFillVega != 0F) {
        size += 2 + 4;
      }
      if (CumFillTheta != 0F) {
        size += 2 + 4;
      }
      if (CumFillDDelta != 0F) {
        size += 2 + 4;
      }
      if (CumExchFee != 0F) {
        size += 2 + 4;
      }
      if (CumM10Pnl != 0F) {
        size += 2 + 4;
      }
      if (CumArrivalPnl != 0F) {
        size += 2 + 4;
      }
      if (lastFillDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastFillDttm);
      }
      if (RiskLimitSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RiskLimitSize);
      }
      if (RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RiskLimitDesc);
      }
      if (RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RiskLimitLevel);
      }
      if (RiskLimitDetail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RiskLimitDetail);
      }
      if (LimitPrice != 0D) {
        size += 2 + 8;
      }
      if (LimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LimitErr);
      }
      if (LimitErrDesc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LimitErrDesc);
      }
      if (BestLimitOffset != 0F) {
        size += 2 + 4;
      }
      if (MakeProbLimit != 0F) {
        size += 2 + 4;
      }
      if (MakeSurfOffset != 0F) {
        size += 2 + 4;
      }
      if (MakeLimitPrice != 0D) {
        size += 2 + 8;
      }
      if (MakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MakeLimitErr);
      }
      if (TakeProbLimit != 0F) {
        size += 2 + 4;
      }
      if (TakeSurfOffset != 0F) {
        size += 2 + 4;
      }
      if (TakeLimitPrice != 0D) {
        size += 2 + 8;
      }
      if (TakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TakeLimitErr);
      }
      if (AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AutoHedge);
      }
      if (HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeInstrument);
      }
      if (hedgeSecKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HedgeSecKey);
      }
      if (HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeSecType);
      }
      if (HedgeBetaRatio != 0F) {
        size += 2 + 4;
      }
      if (HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeScope);
      }
      if (HedgeTIF != global::Spiderrock.Protobuf.TimeInForce.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HedgeTIF);
      }
      if (ExternHedgeExDest.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExternHedgeExDest);
      }
      if (ExternHedgeParams.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExternHedgeParams);
      }
      if (UserData1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserData1);
      }
      if (UserData2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(UserData2);
      }
      if (MaxProgress != global::Spiderrock.Protobuf.MaxProgress.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MaxProgress);
      }
      if (MaxProgressDetail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MaxProgressDetail);
      }
      if (maxProgressTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxProgressTime);
      }
      if (BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BrokerState);
      }
      if (BrokerCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BrokerCounter);
      }
      if (MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MakeState);
      }
      if (MakeCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MakeCounter);
      }
      if (TakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TakeState);
      }
      if (TakeCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TakeCounter);
      }
      if (MktRespState != global::Spiderrock.Protobuf.MktRespState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MktRespState);
      }
      if (MktRespCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MktRespCounter);
      }
      if (MktCrossState != global::Spiderrock.Protobuf.MktCrossState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MktCrossState);
      }
      if (MktCrossCounter != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MktCrossCounter);
      }
      if (ProgressRuleDetail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ProgressRuleDetail);
      }
      if (LastChildEvent != global::Spiderrock.Protobuf.ChildEvent.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LastChildEvent);
      }
      if (lastChildRejectDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastChildRejectDttm);
      }
      if (LastChildRejectText.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LastChildRejectText);
      }
      if (SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrMktState);
      }
      if (Cpx1 != 0F) {
        size += 2 + 4;
      }
      if (Csz1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Csz1);
      }
      if (Cex1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Cex1);
      }
      if (Cnt1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Cnt1);
      }
      if (Cpx2 != 0F) {
        size += 2 + 4;
      }
      if (Csz2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Csz2);
      }
      if (Cex2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Cex2);
      }
      if (Cnt2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Cnt2);
      }
      if (CMore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CMore);
      }
      if (ExpiryKey.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExpiryKey);
      }
      if (CnVol != 0F) {
        size += 2 + 4;
      }
      if (CnYrs != 0F) {
        size += 2 + 4;
      }
      if (CnUPrc != 0F) {
        size += 2 + 4;
      }
      if (CnDe != 0F) {
        size += 2 + 4;
      }
      if (CnDd != 0F) {
        size += 2 + 4;
      }
      if (CnVe != 0F) {
        size += 2 + 4;
      }
      if (CnGa != 0F) {
        size += 2 + 4;
      }
      if (CnTh != 0F) {
        size += 2 + 4;
      }
      if (CnPr != 0F) {
        size += 2 + 4;
      }
      if (DdMult != 0F) {
        size += 2 + 4;
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat);
      }
      if (UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UPriceFormat);
      }
      if (UnderliersPerCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UnderlierType);
      }
      if (TickValue != 0F) {
        size += 2 + 4;
      }
      if (PointValue != 0F) {
        size += 2 + 4;
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PointCurrency);
      }
      if (TheoVol != 0F) {
        size += 2 + 4;
      }
      if (TheoPrc != 0F) {
        size += 2 + 4;
      }
      if (NumNewOrders != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumNewOrders);
      }
      if (NumParentLimits != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(NumParentLimits);
      }
      if (BrokerVwapMark != 0F) {
        size += 2 + 4;
      }
      if (BrokerVwapUMark != 0F) {
        size += 2 + 4;
      }
      if (BrokerQwapMark != 0F) {
        size += 2 + 4;
      }
      if (BrokerQwapUMark != 0F) {
        size += 2 + 4;
      }
      if (VwapPnL != 0F) {
        size += 2 + 4;
      }
      if (VwapDnPnL != 0F) {
        size += 2 + 4;
      }
      if (UDriftVwapPnL != 0F) {
        size += 2 + 4;
      }
      if (QwapPnL != 0F) {
        size += 2 + 4;
      }
      if (QwapDnPnL != 0F) {
        size += 2 + 4;
      }
      if (UDriftQwapPnL != 0F) {
        size += 2 + 4;
      }
      if (NumImprvChld != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumImprvChld);
      }
      if (ActiveSeconds != 0F) {
        size += 2 + 4;
      }
      if (WithSeconds != 0F) {
        size += 2 + 4;
      }
      if (AloneSeconds != 0F) {
        size += 2 + 4;
      }
      if (WorkingSeconds != 0F) {
        size += 2 + 4;
      }
      if (NumRiskCancels != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumRiskCancels);
      }
      if (RiskHoldSeconds != 0F) {
        size += 2 + 4;
      }
      if (RiskThrtlSeconds != 0F) {
        size += 2 + 4;
      }
      if (NumMakeThrottleSkips != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumMakeThrottleSkips);
      }
      if (SumMakeThrottleDelay != 0F) {
        size += 2 + 4;
      }
      if (UPrcDrift != 0F) {
        size += 2 + 4;
      }
      if (SVolDrift != 0F) {
        size += 2 + 4;
      }
      if (UpdateSrc != global::Spiderrock.Protobuf.UpdateSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UpdateSrc);
      }
      if (NumUpdates != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumUpdates);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpdrParentBrkrState other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.SpdrParentBrkrState.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.ClientFirm.Length != 0) {
        ClientFirm = other.ClientFirm;
      }
      if (other.ParentNumber != 0L) {
        ParentNumber = other.ParentNumber;
      }
      if (other.BaseParentNumber != 0L) {
        BaseParentNumber = other.BaseParentNumber;
      }
      if (other.RiskGroupId != 0L) {
        RiskGroupId = other.RiskGroupId;
      }
      if (other.TriggerGroupId != 0L) {
        TriggerGroupId = other.TriggerGroupId;
      }
      if (other.Strategy.Length != 0) {
        Strategy = other.Strategy;
      }
      if (other.AltOrderId.Length != 0) {
        AltOrderId = other.AltOrderId;
      }
      if (other.PackageId != 0L) {
        PackageId = other.PackageId;
      }
      if (other.AltAccnt.Length != 0) {
        AltAccnt = other.AltAccnt;
      }
      if (other.AltUserName.Length != 0) {
        AltUserName = other.AltUserName;
      }
      if (other.StageType != global::Spiderrock.Protobuf.SpdrStageType.Unspecified) {
        StageType = other.StageType;
      }
      if (other.IsFlagged != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsFlagged = other.IsFlagged;
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.UPrc != 0D) {
        UPrc = other.UPrc;
      }
      if (other.UPrcOrder != 0D) {
        UPrcOrder = other.UPrcOrder;
      }
      if (other.NbboBid != 0D) {
        NbboBid = other.NbboBid;
      }
      if (other.NbboAsk != 0D) {
        NbboAsk = other.NbboAsk;
      }
      if (other.NbboBidSz != 0) {
        NbboBidSz = other.NbboBidSz;
      }
      if (other.NbboAskSz != 0) {
        NbboAskSz = other.NbboAskSz;
      }
      if (other.SurfacePrc != 0F) {
        SurfacePrc = other.SurfacePrc;
      }
      if (other.SurfaceVol != 0F) {
        SurfaceVol = other.SurfaceVol;
      }
      if (other.OrderRefSDiv != 0F) {
        OrderRefSDiv = other.OrderRefSDiv;
      }
      if (other.OrderRefSDivType != global::Spiderrock.Protobuf.RefSDivType.Unspecified) {
        OrderRefSDivType = other.OrderRefSDivType;
      }
      if (other.SpdrBrokerStatus != global::Spiderrock.Protobuf.SpdrBrokerStatus.Unspecified) {
        SpdrBrokerStatus = other.SpdrBrokerStatus;
      }
      if (other.SpdrOrderStatus != global::Spiderrock.Protobuf.SpdrOrderStatus.Unspecified) {
        SpdrOrderStatus = other.SpdrOrderStatus;
      }
      if (other.SpdrCloseReason != global::Spiderrock.Protobuf.SpdrCloseReason.Unspecified) {
        SpdrCloseReason = other.SpdrCloseReason;
      }
      if (other.SpdrRejectReason != global::Spiderrock.Protobuf.SpdrRejectReason.Unspecified) {
        SpdrRejectReason = other.SpdrRejectReason;
      }
      if (other.SpdrRejectLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        SpdrRejectLevel = other.SpdrRejectLevel;
      }
      if (other.IsPermanentlyClosed != global::Spiderrock.Protobuf.YesNo.Unspecified) {
        IsPermanentlyClosed = other.IsPermanentlyClosed;
      }
      if (other.NumExternRiskHold != 0) {
        NumExternRiskHold = other.NumExternRiskHold;
      }
      if (other.LastExternRiskText.Length != 0) {
        LastExternRiskText = other.LastExternRiskText;
      }
      if (other.lastExternRiskReject_ != null) {
        if (lastExternRiskReject_ == null) {
          LastExternRiskReject = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastExternRiskReject.MergeFrom(other.LastExternRiskReject);
      }
      if (other.SpdrComment.Length != 0) {
        SpdrComment = other.SpdrComment;
      }
      if (other.OrderSize != 0) {
        OrderSize = other.OrderSize;
      }
      if (other.OrderActiveSize != 0) {
        OrderActiveSize = other.OrderActiveSize;
      }
      if (other.updateDttm_ != null) {
        if (updateDttm_ == null) {
          UpdateDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateDttm.MergeFrom(other.UpdateDttm);
      }
      if (other.goodTillDttm_ != null) {
        if (goodTillDttm_ == null) {
          GoodTillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        GoodTillDttm.MergeFrom(other.GoodTillDttm);
      }
      if (other.LeavesQuantity != 0) {
        LeavesQuantity = other.LeavesQuantity;
      }
      if (other.AvgFillPrice != 0D) {
        AvgFillPrice = other.AvgFillPrice;
      }
      if (other.AvgFillUPrice != 0D) {
        AvgFillUPrice = other.AvgFillUPrice;
      }
      if (other.CumFillQuantity != 0) {
        CumFillQuantity = other.CumFillQuantity;
      }
      if (other.AvgFillVol != 0F) {
        AvgFillVol = other.AvgFillVol;
      }
      if (other.CumFillVega != 0F) {
        CumFillVega = other.CumFillVega;
      }
      if (other.CumFillTheta != 0F) {
        CumFillTheta = other.CumFillTheta;
      }
      if (other.CumFillDDelta != 0F) {
        CumFillDDelta = other.CumFillDDelta;
      }
      if (other.CumExchFee != 0F) {
        CumExchFee = other.CumExchFee;
      }
      if (other.CumM10Pnl != 0F) {
        CumM10Pnl = other.CumM10Pnl;
      }
      if (other.CumArrivalPnl != 0F) {
        CumArrivalPnl = other.CumArrivalPnl;
      }
      if (other.lastFillDttm_ != null) {
        if (lastFillDttm_ == null) {
          LastFillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastFillDttm.MergeFrom(other.LastFillDttm);
      }
      if (other.RiskLimitSize != 0) {
        RiskLimitSize = other.RiskLimitSize;
      }
      if (other.RiskLimitDesc != global::Spiderrock.Protobuf.SpdrRisk.Unspecified) {
        RiskLimitDesc = other.RiskLimitDesc;
      }
      if (other.RiskLimitLevel != global::Spiderrock.Protobuf.SpdrRiskLevel.Unspecified) {
        RiskLimitLevel = other.RiskLimitLevel;
      }
      if (other.RiskLimitDetail.Length != 0) {
        RiskLimitDetail = other.RiskLimitDetail;
      }
      if (other.LimitPrice != 0D) {
        LimitPrice = other.LimitPrice;
      }
      if (other.LimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        LimitErr = other.LimitErr;
      }
      if (other.LimitErrDesc.Length != 0) {
        LimitErrDesc = other.LimitErrDesc;
      }
      if (other.BestLimitOffset != 0F) {
        BestLimitOffset = other.BestLimitOffset;
      }
      if (other.MakeProbLimit != 0F) {
        MakeProbLimit = other.MakeProbLimit;
      }
      if (other.MakeSurfOffset != 0F) {
        MakeSurfOffset = other.MakeSurfOffset;
      }
      if (other.MakeLimitPrice != 0D) {
        MakeLimitPrice = other.MakeLimitPrice;
      }
      if (other.MakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        MakeLimitErr = other.MakeLimitErr;
      }
      if (other.TakeProbLimit != 0F) {
        TakeProbLimit = other.TakeProbLimit;
      }
      if (other.TakeSurfOffset != 0F) {
        TakeSurfOffset = other.TakeSurfOffset;
      }
      if (other.TakeLimitPrice != 0D) {
        TakeLimitPrice = other.TakeLimitPrice;
      }
      if (other.TakeLimitErr != global::Spiderrock.Protobuf.LimitError.Unspecified) {
        TakeLimitErr = other.TakeLimitErr;
      }
      if (other.AutoHedge != global::Spiderrock.Protobuf.AutoHedge.Unspecified) {
        AutoHedge = other.AutoHedge;
      }
      if (other.HedgeInstrument != global::Spiderrock.Protobuf.HedgeInst.Unspecified) {
        HedgeInstrument = other.HedgeInstrument;
      }
      if (other.hedgeSecKey_ != null) {
        if (hedgeSecKey_ == null) {
          HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        HedgeSecKey.MergeFrom(other.HedgeSecKey);
      }
      if (other.HedgeSecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        HedgeSecType = other.HedgeSecType;
      }
      if (other.HedgeBetaRatio != 0F) {
        HedgeBetaRatio = other.HedgeBetaRatio;
      }
      if (other.HedgeScope != global::Spiderrock.Protobuf.HedgeScope.Unspecified) {
        HedgeScope = other.HedgeScope;
      }
      if (other.HedgeTIF != global::Spiderrock.Protobuf.TimeInForce.Unspecified) {
        HedgeTIF = other.HedgeTIF;
      }
      if (other.ExternHedgeExDest.Length != 0) {
        ExternHedgeExDest = other.ExternHedgeExDest;
      }
      if (other.ExternHedgeParams.Length != 0) {
        ExternHedgeParams = other.ExternHedgeParams;
      }
      if (other.UserData1.Length != 0) {
        UserData1 = other.UserData1;
      }
      if (other.UserData2.Length != 0) {
        UserData2 = other.UserData2;
      }
      if (other.MaxProgress != global::Spiderrock.Protobuf.MaxProgress.Unspecified) {
        MaxProgress = other.MaxProgress;
      }
      if (other.MaxProgressDetail.Length != 0) {
        MaxProgressDetail = other.MaxProgressDetail;
      }
      if (other.maxProgressTime_ != null) {
        if (maxProgressTime_ == null) {
          MaxProgressTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaxProgressTime.MergeFrom(other.MaxProgressTime);
      }
      if (other.BrokerState != global::Spiderrock.Protobuf.BrokerState.Unspecified) {
        BrokerState = other.BrokerState;
      }
      if (other.BrokerCounter != 0) {
        BrokerCounter = other.BrokerCounter;
      }
      if (other.MakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        MakeState = other.MakeState;
      }
      if (other.MakeCounter != 0) {
        MakeCounter = other.MakeCounter;
      }
      if (other.TakeState != global::Spiderrock.Protobuf.AlgoState.Unspecified) {
        TakeState = other.TakeState;
      }
      if (other.TakeCounter != 0) {
        TakeCounter = other.TakeCounter;
      }
      if (other.MktRespState != global::Spiderrock.Protobuf.MktRespState.Unspecified) {
        MktRespState = other.MktRespState;
      }
      if (other.MktRespCounter != 0) {
        MktRespCounter = other.MktRespCounter;
      }
      if (other.MktCrossState != global::Spiderrock.Protobuf.MktCrossState.Unspecified) {
        MktCrossState = other.MktCrossState;
      }
      if (other.MktCrossCounter != 0) {
        MktCrossCounter = other.MktCrossCounter;
      }
      if (other.ProgressRuleDetail.Length != 0) {
        ProgressRuleDetail = other.ProgressRuleDetail;
      }
      if (other.LastChildEvent != global::Spiderrock.Protobuf.ChildEvent.Unspecified) {
        LastChildEvent = other.LastChildEvent;
      }
      if (other.lastChildRejectDttm_ != null) {
        if (lastChildRejectDttm_ == null) {
          LastChildRejectDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastChildRejectDttm.MergeFrom(other.LastChildRejectDttm);
      }
      if (other.LastChildRejectText.Length != 0) {
        LastChildRejectText = other.LastChildRejectText;
      }
      if (other.SpdrMktState != global::Spiderrock.Protobuf.SpdrMarketState.Unspecified) {
        SpdrMktState = other.SpdrMktState;
      }
      if (other.Cpx1 != 0F) {
        Cpx1 = other.Cpx1;
      }
      if (other.Csz1 != 0) {
        Csz1 = other.Csz1;
      }
      if (other.Cex1 != 0) {
        Cex1 = other.Cex1;
      }
      if (other.Cnt1 != 0) {
        Cnt1 = other.Cnt1;
      }
      if (other.Cpx2 != 0F) {
        Cpx2 = other.Cpx2;
      }
      if (other.Csz2 != 0) {
        Csz2 = other.Csz2;
      }
      if (other.Cex2 != 0) {
        Cex2 = other.Cex2;
      }
      if (other.Cnt2 != 0) {
        Cnt2 = other.Cnt2;
      }
      if (other.CMore != 0) {
        CMore = other.CMore;
      }
      if (other.ExpiryKey.Length != 0) {
        ExpiryKey = other.ExpiryKey;
      }
      if (other.CnVol != 0F) {
        CnVol = other.CnVol;
      }
      if (other.CnYrs != 0F) {
        CnYrs = other.CnYrs;
      }
      if (other.CnUPrc != 0F) {
        CnUPrc = other.CnUPrc;
      }
      if (other.CnDe != 0F) {
        CnDe = other.CnDe;
      }
      if (other.CnDd != 0F) {
        CnDd = other.CnDd;
      }
      if (other.CnVe != 0F) {
        CnVe = other.CnVe;
      }
      if (other.CnGa != 0F) {
        CnGa = other.CnGa;
      }
      if (other.CnTh != 0F) {
        CnTh = other.CnTh;
      }
      if (other.CnPr != 0F) {
        CnPr = other.CnPr;
      }
      if (other.DdMult != 0F) {
        DdMult = other.DdMult;
      }
      if (other.PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat = other.PriceFormat;
      }
      if (other.UPriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        UPriceFormat = other.UPriceFormat;
      }
      if (other.UnderliersPerCn != 0) {
        UnderliersPerCn = other.UnderliersPerCn;
      }
      if (other.UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        UnderlierType = other.UnderlierType;
      }
      if (other.TickValue != 0F) {
        TickValue = other.TickValue;
      }
      if (other.PointValue != 0F) {
        PointValue = other.PointValue;
      }
      if (other.PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        PointCurrency = other.PointCurrency;
      }
      if (other.TheoVol != 0F) {
        TheoVol = other.TheoVol;
      }
      if (other.TheoPrc != 0F) {
        TheoPrc = other.TheoPrc;
      }
      if (other.NumNewOrders != 0) {
        NumNewOrders = other.NumNewOrders;
      }
      if (other.NumParentLimits != 0) {
        NumParentLimits = other.NumParentLimits;
      }
      if (other.BrokerVwapMark != 0F) {
        BrokerVwapMark = other.BrokerVwapMark;
      }
      if (other.BrokerVwapUMark != 0F) {
        BrokerVwapUMark = other.BrokerVwapUMark;
      }
      if (other.BrokerQwapMark != 0F) {
        BrokerQwapMark = other.BrokerQwapMark;
      }
      if (other.BrokerQwapUMark != 0F) {
        BrokerQwapUMark = other.BrokerQwapUMark;
      }
      if (other.VwapPnL != 0F) {
        VwapPnL = other.VwapPnL;
      }
      if (other.VwapDnPnL != 0F) {
        VwapDnPnL = other.VwapDnPnL;
      }
      if (other.UDriftVwapPnL != 0F) {
        UDriftVwapPnL = other.UDriftVwapPnL;
      }
      if (other.QwapPnL != 0F) {
        QwapPnL = other.QwapPnL;
      }
      if (other.QwapDnPnL != 0F) {
        QwapDnPnL = other.QwapDnPnL;
      }
      if (other.UDriftQwapPnL != 0F) {
        UDriftQwapPnL = other.UDriftQwapPnL;
      }
      if (other.NumImprvChld != 0) {
        NumImprvChld = other.NumImprvChld;
      }
      if (other.ActiveSeconds != 0F) {
        ActiveSeconds = other.ActiveSeconds;
      }
      if (other.WithSeconds != 0F) {
        WithSeconds = other.WithSeconds;
      }
      if (other.AloneSeconds != 0F) {
        AloneSeconds = other.AloneSeconds;
      }
      if (other.WorkingSeconds != 0F) {
        WorkingSeconds = other.WorkingSeconds;
      }
      if (other.NumRiskCancels != 0) {
        NumRiskCancels = other.NumRiskCancels;
      }
      if (other.RiskHoldSeconds != 0F) {
        RiskHoldSeconds = other.RiskHoldSeconds;
      }
      if (other.RiskThrtlSeconds != 0F) {
        RiskThrtlSeconds = other.RiskThrtlSeconds;
      }
      if (other.NumMakeThrottleSkips != 0) {
        NumMakeThrottleSkips = other.NumMakeThrottleSkips;
      }
      if (other.SumMakeThrottleDelay != 0F) {
        SumMakeThrottleDelay = other.SumMakeThrottleDelay;
      }
      if (other.UPrcDrift != 0F) {
        UPrcDrift = other.UPrcDrift;
      }
      if (other.SVolDrift != 0F) {
        SVolDrift = other.SVolDrift;
      }
      if (other.UpdateSrc != global::Spiderrock.Protobuf.UpdateSource.Unspecified) {
        UpdateSrc = other.UpdateSrc;
      }
      if (other.NumUpdates != 0) {
        NumUpdates = other.NumUpdates;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrParentBrkrState.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            UserName = input.ReadString();
            break;
          }
          case 826: {
            ClientFirm = input.ReadString();
            break;
          }
          case 848: {
            ParentNumber = input.ReadInt64();
            break;
          }
          case 872: {
            BaseParentNumber = input.ReadInt64();
            break;
          }
          case 896: {
            RiskGroupId = input.ReadInt64();
            break;
          }
          case 920: {
            TriggerGroupId = input.ReadInt64();
            break;
          }
          case 946: {
            Strategy = input.ReadString();
            break;
          }
          case 970: {
            AltOrderId = input.ReadString();
            break;
          }
          case 992: {
            PackageId = input.ReadInt64();
            break;
          }
          case 1018: {
            AltAccnt = input.ReadString();
            break;
          }
          case 1042: {
            AltUserName = input.ReadString();
            break;
          }
          case 1064: {
            StageType = (global::Spiderrock.Protobuf.SpdrStageType) input.ReadEnum();
            break;
          }
          case 1088: {
            IsFlagged = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1114: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 1137: {
            UPrc = input.ReadDouble();
            break;
          }
          case 1161: {
            UPrcOrder = input.ReadDouble();
            break;
          }
          case 1185: {
            NbboBid = input.ReadDouble();
            break;
          }
          case 1209: {
            NbboAsk = input.ReadDouble();
            break;
          }
          case 1232: {
            NbboBidSz = input.ReadInt32();
            break;
          }
          case 1256: {
            NbboAskSz = input.ReadInt32();
            break;
          }
          case 1285: {
            SurfacePrc = input.ReadFloat();
            break;
          }
          case 1309: {
            SurfaceVol = input.ReadFloat();
            break;
          }
          case 1333: {
            OrderRefSDiv = input.ReadFloat();
            break;
          }
          case 1352: {
            OrderRefSDivType = (global::Spiderrock.Protobuf.RefSDivType) input.ReadEnum();
            break;
          }
          case 1376: {
            SpdrBrokerStatus = (global::Spiderrock.Protobuf.SpdrBrokerStatus) input.ReadEnum();
            break;
          }
          case 1400: {
            SpdrOrderStatus = (global::Spiderrock.Protobuf.SpdrOrderStatus) input.ReadEnum();
            break;
          }
          case 1424: {
            SpdrCloseReason = (global::Spiderrock.Protobuf.SpdrCloseReason) input.ReadEnum();
            break;
          }
          case 1448: {
            SpdrRejectReason = (global::Spiderrock.Protobuf.SpdrRejectReason) input.ReadEnum();
            break;
          }
          case 1472: {
            SpdrRejectLevel = (global::Spiderrock.Protobuf.SpdrRiskLevel) input.ReadEnum();
            break;
          }
          case 1496: {
            IsPermanentlyClosed = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1520: {
            NumExternRiskHold = input.ReadInt32();
            break;
          }
          case 1546: {
            LastExternRiskText = input.ReadString();
            break;
          }
          case 1570: {
            if (lastExternRiskReject_ == null) {
              LastExternRiskReject = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastExternRiskReject);
            break;
          }
          case 1594: {
            SpdrComment = input.ReadString();
            break;
          }
          case 1616: {
            OrderSize = input.ReadInt32();
            break;
          }
          case 1640: {
            OrderActiveSize = input.ReadInt32();
            break;
          }
          case 1666: {
            if (updateDttm_ == null) {
              UpdateDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateDttm);
            break;
          }
          case 1690: {
            if (goodTillDttm_ == null) {
              GoodTillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(GoodTillDttm);
            break;
          }
          case 1712: {
            LeavesQuantity = input.ReadInt32();
            break;
          }
          case 1737: {
            AvgFillPrice = input.ReadDouble();
            break;
          }
          case 1761: {
            AvgFillUPrice = input.ReadDouble();
            break;
          }
          case 1784: {
            CumFillQuantity = input.ReadInt32();
            break;
          }
          case 1813: {
            AvgFillVol = input.ReadFloat();
            break;
          }
          case 1837: {
            CumFillVega = input.ReadFloat();
            break;
          }
          case 1861: {
            CumFillTheta = input.ReadFloat();
            break;
          }
          case 1885: {
            CumFillDDelta = input.ReadFloat();
            break;
          }
          case 1909: {
            CumExchFee = input.ReadFloat();
            break;
          }
          case 1933: {
            CumM10Pnl = input.ReadFloat();
            break;
          }
          case 1957: {
            CumArrivalPnl = input.ReadFloat();
            break;
          }
          case 1978: {
            if (lastFillDttm_ == null) {
              LastFillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastFillDttm);
            break;
          }
          case 2000: {
            RiskLimitSize = input.ReadInt32();
            break;
          }
          case 2024: {
            RiskLimitDesc = (global::Spiderrock.Protobuf.SpdrRisk) input.ReadEnum();
            break;
          }
          case 2048: {
            RiskLimitLevel = (global::Spiderrock.Protobuf.SpdrRiskLevel) input.ReadEnum();
            break;
          }
          case 2074: {
            RiskLimitDetail = input.ReadString();
            break;
          }
          case 2097: {
            LimitPrice = input.ReadDouble();
            break;
          }
          case 2120: {
            LimitErr = (global::Spiderrock.Protobuf.LimitError) input.ReadEnum();
            break;
          }
          case 2146: {
            LimitErrDesc = input.ReadString();
            break;
          }
          case 2173: {
            BestLimitOffset = input.ReadFloat();
            break;
          }
          case 2197: {
            MakeProbLimit = input.ReadFloat();
            break;
          }
          case 2221: {
            MakeSurfOffset = input.ReadFloat();
            break;
          }
          case 2241: {
            MakeLimitPrice = input.ReadDouble();
            break;
          }
          case 2264: {
            MakeLimitErr = (global::Spiderrock.Protobuf.LimitError) input.ReadEnum();
            break;
          }
          case 2293: {
            TakeProbLimit = input.ReadFloat();
            break;
          }
          case 2317: {
            TakeSurfOffset = input.ReadFloat();
            break;
          }
          case 2337: {
            TakeLimitPrice = input.ReadDouble();
            break;
          }
          case 2360: {
            TakeLimitErr = (global::Spiderrock.Protobuf.LimitError) input.ReadEnum();
            break;
          }
          case 2384: {
            AutoHedge = (global::Spiderrock.Protobuf.AutoHedge) input.ReadEnum();
            break;
          }
          case 2408: {
            HedgeInstrument = (global::Spiderrock.Protobuf.HedgeInst) input.ReadEnum();
            break;
          }
          case 2434: {
            if (hedgeSecKey_ == null) {
              HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(HedgeSecKey);
            break;
          }
          case 2456: {
            HedgeSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 2485: {
            HedgeBetaRatio = input.ReadFloat();
            break;
          }
          case 2504: {
            HedgeScope = (global::Spiderrock.Protobuf.HedgeScope) input.ReadEnum();
            break;
          }
          case 2528: {
            HedgeTIF = (global::Spiderrock.Protobuf.TimeInForce) input.ReadEnum();
            break;
          }
          case 2554: {
            ExternHedgeExDest = input.ReadString();
            break;
          }
          case 2578: {
            ExternHedgeParams = input.ReadString();
            break;
          }
          case 2602: {
            UserData1 = input.ReadString();
            break;
          }
          case 2626: {
            UserData2 = input.ReadString();
            break;
          }
          case 2648: {
            MaxProgress = (global::Spiderrock.Protobuf.MaxProgress) input.ReadEnum();
            break;
          }
          case 2674: {
            MaxProgressDetail = input.ReadString();
            break;
          }
          case 2698: {
            if (maxProgressTime_ == null) {
              MaxProgressTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxProgressTime);
            break;
          }
          case 2720: {
            BrokerState = (global::Spiderrock.Protobuf.BrokerState) input.ReadEnum();
            break;
          }
          case 2744: {
            BrokerCounter = input.ReadInt32();
            break;
          }
          case 2768: {
            MakeState = (global::Spiderrock.Protobuf.AlgoState) input.ReadEnum();
            break;
          }
          case 2792: {
            MakeCounter = input.ReadInt32();
            break;
          }
          case 2816: {
            TakeState = (global::Spiderrock.Protobuf.AlgoState) input.ReadEnum();
            break;
          }
          case 2840: {
            TakeCounter = input.ReadInt32();
            break;
          }
          case 2864: {
            MktRespState = (global::Spiderrock.Protobuf.MktRespState) input.ReadEnum();
            break;
          }
          case 2888: {
            MktRespCounter = input.ReadInt32();
            break;
          }
          case 2912: {
            MktCrossState = (global::Spiderrock.Protobuf.MktCrossState) input.ReadEnum();
            break;
          }
          case 2936: {
            MktCrossCounter = input.ReadInt32();
            break;
          }
          case 2962: {
            ProgressRuleDetail = input.ReadString();
            break;
          }
          case 2984: {
            LastChildEvent = (global::Spiderrock.Protobuf.ChildEvent) input.ReadEnum();
            break;
          }
          case 3010: {
            if (lastChildRejectDttm_ == null) {
              LastChildRejectDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastChildRejectDttm);
            break;
          }
          case 3034: {
            LastChildRejectText = input.ReadString();
            break;
          }
          case 3056: {
            SpdrMktState = (global::Spiderrock.Protobuf.SpdrMarketState) input.ReadEnum();
            break;
          }
          case 3085: {
            Cpx1 = input.ReadFloat();
            break;
          }
          case 3104: {
            Csz1 = input.ReadInt32();
            break;
          }
          case 3128: {
            Cex1 = input.ReadUInt32();
            break;
          }
          case 3152: {
            Cnt1 = input.ReadInt32();
            break;
          }
          case 3181: {
            Cpx2 = input.ReadFloat();
            break;
          }
          case 3200: {
            Csz2 = input.ReadInt32();
            break;
          }
          case 3224: {
            Cex2 = input.ReadUInt32();
            break;
          }
          case 3248: {
            Cnt2 = input.ReadInt32();
            break;
          }
          case 3272: {
            CMore = input.ReadInt32();
            break;
          }
          case 3298: {
            ExpiryKey = input.ReadString();
            break;
          }
          case 3325: {
            CnVol = input.ReadFloat();
            break;
          }
          case 3349: {
            CnYrs = input.ReadFloat();
            break;
          }
          case 3373: {
            CnUPrc = input.ReadFloat();
            break;
          }
          case 3397: {
            CnDe = input.ReadFloat();
            break;
          }
          case 3421: {
            CnDd = input.ReadFloat();
            break;
          }
          case 3445: {
            CnVe = input.ReadFloat();
            break;
          }
          case 3469: {
            CnGa = input.ReadFloat();
            break;
          }
          case 3493: {
            CnTh = input.ReadFloat();
            break;
          }
          case 3517: {
            CnPr = input.ReadFloat();
            break;
          }
          case 3541: {
            DdMult = input.ReadFloat();
            break;
          }
          case 3560: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 3584: {
            UPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 3608: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 3632: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 3661: {
            TickValue = input.ReadFloat();
            break;
          }
          case 3685: {
            PointValue = input.ReadFloat();
            break;
          }
          case 3704: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 3733: {
            TheoVol = input.ReadFloat();
            break;
          }
          case 3757: {
            TheoPrc = input.ReadFloat();
            break;
          }
          case 3776: {
            NumNewOrders = input.ReadInt32();
            break;
          }
          case 3800: {
            NumParentLimits = input.ReadUInt32();
            break;
          }
          case 3829: {
            BrokerVwapMark = input.ReadFloat();
            break;
          }
          case 3853: {
            BrokerVwapUMark = input.ReadFloat();
            break;
          }
          case 3877: {
            BrokerQwapMark = input.ReadFloat();
            break;
          }
          case 3901: {
            BrokerQwapUMark = input.ReadFloat();
            break;
          }
          case 3925: {
            VwapPnL = input.ReadFloat();
            break;
          }
          case 3949: {
            VwapDnPnL = input.ReadFloat();
            break;
          }
          case 3973: {
            UDriftVwapPnL = input.ReadFloat();
            break;
          }
          case 3997: {
            QwapPnL = input.ReadFloat();
            break;
          }
          case 4021: {
            QwapDnPnL = input.ReadFloat();
            break;
          }
          case 4045: {
            UDriftQwapPnL = input.ReadFloat();
            break;
          }
          case 4064: {
            NumImprvChld = input.ReadInt32();
            break;
          }
          case 4093: {
            ActiveSeconds = input.ReadFloat();
            break;
          }
          case 4117: {
            WithSeconds = input.ReadFloat();
            break;
          }
          case 4141: {
            AloneSeconds = input.ReadFloat();
            break;
          }
          case 4165: {
            WorkingSeconds = input.ReadFloat();
            break;
          }
          case 4184: {
            NumRiskCancels = input.ReadInt32();
            break;
          }
          case 4213: {
            RiskHoldSeconds = input.ReadFloat();
            break;
          }
          case 4237: {
            RiskThrtlSeconds = input.ReadFloat();
            break;
          }
          case 4256: {
            NumMakeThrottleSkips = input.ReadInt32();
            break;
          }
          case 4285: {
            SumMakeThrottleDelay = input.ReadFloat();
            break;
          }
          case 4309: {
            UPrcDrift = input.ReadFloat();
            break;
          }
          case 4333: {
            SVolDrift = input.ReadFloat();
            break;
          }
          case 4352: {
            UpdateSrc = (global::Spiderrock.Protobuf.UpdateSource) input.ReadEnum();
            break;
          }
          case 4376: {
            NumUpdates = input.ReadInt32();
            break;
          }
          case 4402: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.SpdrParentBrkrState.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            UserName = input.ReadString();
            break;
          }
          case 826: {
            ClientFirm = input.ReadString();
            break;
          }
          case 848: {
            ParentNumber = input.ReadInt64();
            break;
          }
          case 872: {
            BaseParentNumber = input.ReadInt64();
            break;
          }
          case 896: {
            RiskGroupId = input.ReadInt64();
            break;
          }
          case 920: {
            TriggerGroupId = input.ReadInt64();
            break;
          }
          case 946: {
            Strategy = input.ReadString();
            break;
          }
          case 970: {
            AltOrderId = input.ReadString();
            break;
          }
          case 992: {
            PackageId = input.ReadInt64();
            break;
          }
          case 1018: {
            AltAccnt = input.ReadString();
            break;
          }
          case 1042: {
            AltUserName = input.ReadString();
            break;
          }
          case 1064: {
            StageType = (global::Spiderrock.Protobuf.SpdrStageType) input.ReadEnum();
            break;
          }
          case 1088: {
            IsFlagged = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1114: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 1137: {
            UPrc = input.ReadDouble();
            break;
          }
          case 1161: {
            UPrcOrder = input.ReadDouble();
            break;
          }
          case 1185: {
            NbboBid = input.ReadDouble();
            break;
          }
          case 1209: {
            NbboAsk = input.ReadDouble();
            break;
          }
          case 1232: {
            NbboBidSz = input.ReadInt32();
            break;
          }
          case 1256: {
            NbboAskSz = input.ReadInt32();
            break;
          }
          case 1285: {
            SurfacePrc = input.ReadFloat();
            break;
          }
          case 1309: {
            SurfaceVol = input.ReadFloat();
            break;
          }
          case 1333: {
            OrderRefSDiv = input.ReadFloat();
            break;
          }
          case 1352: {
            OrderRefSDivType = (global::Spiderrock.Protobuf.RefSDivType) input.ReadEnum();
            break;
          }
          case 1376: {
            SpdrBrokerStatus = (global::Spiderrock.Protobuf.SpdrBrokerStatus) input.ReadEnum();
            break;
          }
          case 1400: {
            SpdrOrderStatus = (global::Spiderrock.Protobuf.SpdrOrderStatus) input.ReadEnum();
            break;
          }
          case 1424: {
            SpdrCloseReason = (global::Spiderrock.Protobuf.SpdrCloseReason) input.ReadEnum();
            break;
          }
          case 1448: {
            SpdrRejectReason = (global::Spiderrock.Protobuf.SpdrRejectReason) input.ReadEnum();
            break;
          }
          case 1472: {
            SpdrRejectLevel = (global::Spiderrock.Protobuf.SpdrRiskLevel) input.ReadEnum();
            break;
          }
          case 1496: {
            IsPermanentlyClosed = (global::Spiderrock.Protobuf.YesNo) input.ReadEnum();
            break;
          }
          case 1520: {
            NumExternRiskHold = input.ReadInt32();
            break;
          }
          case 1546: {
            LastExternRiskText = input.ReadString();
            break;
          }
          case 1570: {
            if (lastExternRiskReject_ == null) {
              LastExternRiskReject = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastExternRiskReject);
            break;
          }
          case 1594: {
            SpdrComment = input.ReadString();
            break;
          }
          case 1616: {
            OrderSize = input.ReadInt32();
            break;
          }
          case 1640: {
            OrderActiveSize = input.ReadInt32();
            break;
          }
          case 1666: {
            if (updateDttm_ == null) {
              UpdateDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateDttm);
            break;
          }
          case 1690: {
            if (goodTillDttm_ == null) {
              GoodTillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(GoodTillDttm);
            break;
          }
          case 1712: {
            LeavesQuantity = input.ReadInt32();
            break;
          }
          case 1737: {
            AvgFillPrice = input.ReadDouble();
            break;
          }
          case 1761: {
            AvgFillUPrice = input.ReadDouble();
            break;
          }
          case 1784: {
            CumFillQuantity = input.ReadInt32();
            break;
          }
          case 1813: {
            AvgFillVol = input.ReadFloat();
            break;
          }
          case 1837: {
            CumFillVega = input.ReadFloat();
            break;
          }
          case 1861: {
            CumFillTheta = input.ReadFloat();
            break;
          }
          case 1885: {
            CumFillDDelta = input.ReadFloat();
            break;
          }
          case 1909: {
            CumExchFee = input.ReadFloat();
            break;
          }
          case 1933: {
            CumM10Pnl = input.ReadFloat();
            break;
          }
          case 1957: {
            CumArrivalPnl = input.ReadFloat();
            break;
          }
          case 1978: {
            if (lastFillDttm_ == null) {
              LastFillDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastFillDttm);
            break;
          }
          case 2000: {
            RiskLimitSize = input.ReadInt32();
            break;
          }
          case 2024: {
            RiskLimitDesc = (global::Spiderrock.Protobuf.SpdrRisk) input.ReadEnum();
            break;
          }
          case 2048: {
            RiskLimitLevel = (global::Spiderrock.Protobuf.SpdrRiskLevel) input.ReadEnum();
            break;
          }
          case 2074: {
            RiskLimitDetail = input.ReadString();
            break;
          }
          case 2097: {
            LimitPrice = input.ReadDouble();
            break;
          }
          case 2120: {
            LimitErr = (global::Spiderrock.Protobuf.LimitError) input.ReadEnum();
            break;
          }
          case 2146: {
            LimitErrDesc = input.ReadString();
            break;
          }
          case 2173: {
            BestLimitOffset = input.ReadFloat();
            break;
          }
          case 2197: {
            MakeProbLimit = input.ReadFloat();
            break;
          }
          case 2221: {
            MakeSurfOffset = input.ReadFloat();
            break;
          }
          case 2241: {
            MakeLimitPrice = input.ReadDouble();
            break;
          }
          case 2264: {
            MakeLimitErr = (global::Spiderrock.Protobuf.LimitError) input.ReadEnum();
            break;
          }
          case 2293: {
            TakeProbLimit = input.ReadFloat();
            break;
          }
          case 2317: {
            TakeSurfOffset = input.ReadFloat();
            break;
          }
          case 2337: {
            TakeLimitPrice = input.ReadDouble();
            break;
          }
          case 2360: {
            TakeLimitErr = (global::Spiderrock.Protobuf.LimitError) input.ReadEnum();
            break;
          }
          case 2384: {
            AutoHedge = (global::Spiderrock.Protobuf.AutoHedge) input.ReadEnum();
            break;
          }
          case 2408: {
            HedgeInstrument = (global::Spiderrock.Protobuf.HedgeInst) input.ReadEnum();
            break;
          }
          case 2434: {
            if (hedgeSecKey_ == null) {
              HedgeSecKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(HedgeSecKey);
            break;
          }
          case 2456: {
            HedgeSecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 2485: {
            HedgeBetaRatio = input.ReadFloat();
            break;
          }
          case 2504: {
            HedgeScope = (global::Spiderrock.Protobuf.HedgeScope) input.ReadEnum();
            break;
          }
          case 2528: {
            HedgeTIF = (global::Spiderrock.Protobuf.TimeInForce) input.ReadEnum();
            break;
          }
          case 2554: {
            ExternHedgeExDest = input.ReadString();
            break;
          }
          case 2578: {
            ExternHedgeParams = input.ReadString();
            break;
          }
          case 2602: {
            UserData1 = input.ReadString();
            break;
          }
          case 2626: {
            UserData2 = input.ReadString();
            break;
          }
          case 2648: {
            MaxProgress = (global::Spiderrock.Protobuf.MaxProgress) input.ReadEnum();
            break;
          }
          case 2674: {
            MaxProgressDetail = input.ReadString();
            break;
          }
          case 2698: {
            if (maxProgressTime_ == null) {
              MaxProgressTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxProgressTime);
            break;
          }
          case 2720: {
            BrokerState = (global::Spiderrock.Protobuf.BrokerState) input.ReadEnum();
            break;
          }
          case 2744: {
            BrokerCounter = input.ReadInt32();
            break;
          }
          case 2768: {
            MakeState = (global::Spiderrock.Protobuf.AlgoState) input.ReadEnum();
            break;
          }
          case 2792: {
            MakeCounter = input.ReadInt32();
            break;
          }
          case 2816: {
            TakeState = (global::Spiderrock.Protobuf.AlgoState) input.ReadEnum();
            break;
          }
          case 2840: {
            TakeCounter = input.ReadInt32();
            break;
          }
          case 2864: {
            MktRespState = (global::Spiderrock.Protobuf.MktRespState) input.ReadEnum();
            break;
          }
          case 2888: {
            MktRespCounter = input.ReadInt32();
            break;
          }
          case 2912: {
            MktCrossState = (global::Spiderrock.Protobuf.MktCrossState) input.ReadEnum();
            break;
          }
          case 2936: {
            MktCrossCounter = input.ReadInt32();
            break;
          }
          case 2962: {
            ProgressRuleDetail = input.ReadString();
            break;
          }
          case 2984: {
            LastChildEvent = (global::Spiderrock.Protobuf.ChildEvent) input.ReadEnum();
            break;
          }
          case 3010: {
            if (lastChildRejectDttm_ == null) {
              LastChildRejectDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastChildRejectDttm);
            break;
          }
          case 3034: {
            LastChildRejectText = input.ReadString();
            break;
          }
          case 3056: {
            SpdrMktState = (global::Spiderrock.Protobuf.SpdrMarketState) input.ReadEnum();
            break;
          }
          case 3085: {
            Cpx1 = input.ReadFloat();
            break;
          }
          case 3104: {
            Csz1 = input.ReadInt32();
            break;
          }
          case 3128: {
            Cex1 = input.ReadUInt32();
            break;
          }
          case 3152: {
            Cnt1 = input.ReadInt32();
            break;
          }
          case 3181: {
            Cpx2 = input.ReadFloat();
            break;
          }
          case 3200: {
            Csz2 = input.ReadInt32();
            break;
          }
          case 3224: {
            Cex2 = input.ReadUInt32();
            break;
          }
          case 3248: {
            Cnt2 = input.ReadInt32();
            break;
          }
          case 3272: {
            CMore = input.ReadInt32();
            break;
          }
          case 3298: {
            ExpiryKey = input.ReadString();
            break;
          }
          case 3325: {
            CnVol = input.ReadFloat();
            break;
          }
          case 3349: {
            CnYrs = input.ReadFloat();
            break;
          }
          case 3373: {
            CnUPrc = input.ReadFloat();
            break;
          }
          case 3397: {
            CnDe = input.ReadFloat();
            break;
          }
          case 3421: {
            CnDd = input.ReadFloat();
            break;
          }
          case 3445: {
            CnVe = input.ReadFloat();
            break;
          }
          case 3469: {
            CnGa = input.ReadFloat();
            break;
          }
          case 3493: {
            CnTh = input.ReadFloat();
            break;
          }
          case 3517: {
            CnPr = input.ReadFloat();
            break;
          }
          case 3541: {
            DdMult = input.ReadFloat();
            break;
          }
          case 3560: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 3584: {
            UPriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 3608: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 3632: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 3661: {
            TickValue = input.ReadFloat();
            break;
          }
          case 3685: {
            PointValue = input.ReadFloat();
            break;
          }
          case 3704: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 3733: {
            TheoVol = input.ReadFloat();
            break;
          }
          case 3757: {
            TheoPrc = input.ReadFloat();
            break;
          }
          case 3776: {
            NumNewOrders = input.ReadInt32();
            break;
          }
          case 3800: {
            NumParentLimits = input.ReadUInt32();
            break;
          }
          case 3829: {
            BrokerVwapMark = input.ReadFloat();
            break;
          }
          case 3853: {
            BrokerVwapUMark = input.ReadFloat();
            break;
          }
          case 3877: {
            BrokerQwapMark = input.ReadFloat();
            break;
          }
          case 3901: {
            BrokerQwapUMark = input.ReadFloat();
            break;
          }
          case 3925: {
            VwapPnL = input.ReadFloat();
            break;
          }
          case 3949: {
            VwapDnPnL = input.ReadFloat();
            break;
          }
          case 3973: {
            UDriftVwapPnL = input.ReadFloat();
            break;
          }
          case 3997: {
            QwapPnL = input.ReadFloat();
            break;
          }
          case 4021: {
            QwapDnPnL = input.ReadFloat();
            break;
          }
          case 4045: {
            UDriftQwapPnL = input.ReadFloat();
            break;
          }
          case 4064: {
            NumImprvChld = input.ReadInt32();
            break;
          }
          case 4093: {
            ActiveSeconds = input.ReadFloat();
            break;
          }
          case 4117: {
            WithSeconds = input.ReadFloat();
            break;
          }
          case 4141: {
            AloneSeconds = input.ReadFloat();
            break;
          }
          case 4165: {
            WorkingSeconds = input.ReadFloat();
            break;
          }
          case 4184: {
            NumRiskCancels = input.ReadInt32();
            break;
          }
          case 4213: {
            RiskHoldSeconds = input.ReadFloat();
            break;
          }
          case 4237: {
            RiskThrtlSeconds = input.ReadFloat();
            break;
          }
          case 4256: {
            NumMakeThrottleSkips = input.ReadInt32();
            break;
          }
          case 4285: {
            SumMakeThrottleDelay = input.ReadFloat();
            break;
          }
          case 4309: {
            UPrcDrift = input.ReadFloat();
            break;
          }
          case 4333: {
            SVolDrift = input.ReadFloat();
            break;
          }
          case 4352: {
            UpdateSrc = (global::Spiderrock.Protobuf.UpdateSource) input.ReadEnum();
            break;
          }
          case 4376: {
            NumUpdates = input.ReadInt32();
            break;
          }
          case 4402: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpdrParentBrkrState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.SpdrParentBrkrState.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          accnt_ = other.accnt_;
          secKey_ = other.secKey_ != null ? other.secKey_.Clone() : null;
          secType_ = other.secType_;
          spdrSource_ = other.spdrSource_;
          groupingCode_ = other.groupingCode_;
          orderSide_ = other.orderSide_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "accnt" field.</summary>
        public const int AccntFieldNumber = 10;
        private string accnt_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Accnt {
          get { return accnt_; }
          set {
            accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "sec_key" field.</summary>
        public const int SecKeyFieldNumber = 11;
        private global::Spiderrock.Protobuf.OptionKey secKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey SecKey {
          get { return secKey_; }
          set {
            secKey_ = value;
          }
        }

        /// <summary>Field number for the "sec_type" field.</summary>
        public const int SecTypeFieldNumber = 12;
        private global::Spiderrock.Protobuf.SpdrKeyType secType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrKeyType SecType {
          get { return secType_; }
          set {
            secType_ = value;
          }
        }

        /// <summary>Field number for the "spdr_source" field.</summary>
        public const int SpdrSourceFieldNumber = 13;
        private global::Spiderrock.Protobuf.SpdrSource spdrSource_ = global::Spiderrock.Protobuf.SpdrSource.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SpdrSource SpdrSource {
          get { return spdrSource_; }
          set {
            spdrSource_ = value;
          }
        }

        /// <summary>Field number for the "grouping_code" field.</summary>
        public const int GroupingCodeFieldNumber = 14;
        private long groupingCode_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long GroupingCode {
          get { return groupingCode_; }
          set {
            groupingCode_ = value;
          }
        }

        /// <summary>Field number for the "order_side" field.</summary>
        public const int OrderSideFieldNumber = 15;
        private global::Spiderrock.Protobuf.BuySell orderSide_ = global::Spiderrock.Protobuf.BuySell.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.BuySell OrderSide {
          get { return orderSide_; }
          set {
            orderSide_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Accnt != other.Accnt) return false;
          if (!object.Equals(SecKey, other.SecKey)) return false;
          if (SecType != other.SecType) return false;
          if (SpdrSource != other.SpdrSource) return false;
          if (GroupingCode != other.GroupingCode) return false;
          if (OrderSide != other.OrderSide) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
          if (secKey_ != null) hash ^= SecKey.GetHashCode();
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= SecType.GetHashCode();
          if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) hash ^= SpdrSource.GetHashCode();
          if (GroupingCode != 0L) hash ^= GroupingCode.GetHashCode();
          if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) hash ^= OrderSide.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (secKey_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(96);
            output.WriteEnum((int) SecType);
          }
          if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) SpdrSource);
          }
          if (GroupingCode != 0L) {
            output.WriteRawTag(112);
            output.WriteInt64(GroupingCode);
          }
          if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(120);
            output.WriteEnum((int) OrderSide);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Accnt.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(Accnt);
          }
          if (secKey_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            output.WriteRawTag(96);
            output.WriteEnum((int) SecType);
          }
          if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) SpdrSource);
          }
          if (GroupingCode != 0L) {
            output.WriteRawTag(112);
            output.WriteInt64(GroupingCode);
          }
          if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            output.WriteRawTag(120);
            output.WriteEnum((int) OrderSide);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Accnt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Accnt);
          }
          if (secKey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SecKey);
          }
          if (SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecType);
          }
          if (SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpdrSource);
          }
          if (GroupingCode != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(GroupingCode);
          }
          if (OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderSide);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.Accnt.Length != 0) {
            Accnt = other.Accnt;
          }
          if (other.secKey_ != null) {
            if (secKey_ == null) {
              SecKey = new global::Spiderrock.Protobuf.OptionKey();
            }
            SecKey.MergeFrom(other.SecKey);
          }
          if (other.SecType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
            SecType = other.SecType;
          }
          if (other.SpdrSource != global::Spiderrock.Protobuf.SpdrSource.Unspecified) {
            SpdrSource = other.SpdrSource;
          }
          if (other.GroupingCode != 0L) {
            GroupingCode = other.GroupingCode;
          }
          if (other.OrderSide != global::Spiderrock.Protobuf.BuySell.Unspecified) {
            OrderSide = other.OrderSide;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 90: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 96: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 104: {
                SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
                break;
              }
              case 112: {
                GroupingCode = input.ReadInt64();
                break;
              }
              case 120: {
                OrderSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                Accnt = input.ReadString();
                break;
              }
              case 90: {
                if (secKey_ == null) {
                  SecKey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(SecKey);
                break;
              }
              case 96: {
                SecType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
                break;
              }
              case 104: {
                SpdrSource = (global::Spiderrock.Protobuf.SpdrSource) input.ReadEnum();
                break;
              }
              case 112: {
                GroupingCode = input.ReadInt64();
                break;
              }
              case 120: {
                OrderSide = (global::Spiderrock.Protobuf.BuySell) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
