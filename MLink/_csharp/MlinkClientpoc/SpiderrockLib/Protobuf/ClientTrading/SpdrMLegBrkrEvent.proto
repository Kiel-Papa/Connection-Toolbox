syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;

import "google/protobuf/timestamp.proto";

/*
    SpdrMLegBrkrEvent records are published when a new or clx/replace parent order arrives causes a broker to beging working and again when a parent order terminates and the underlying broker stops working.  The initial version contains state and market data from just after the initial risk check and first attempt at generating child orders.
*/    
message SpdrMLegBrkrEvent {
    message PKey {
        
        int64 parent_number = 10;
        EventRecType rec_type = 11; // type of record [New,Repl,Close]
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    TickerKey ticker = 100;
    string accnt = 103;
    SpdrSource spdr_source = 106;
    int64 grouping_code = 109;
    BuySell order_side = 112;
    string client_firm = 115; // SR client firm code
    string alt_accnt = 118; // alternate (client assigned) "long" account string (optional)
    string alt_user_name = 121; // alternate (client assigned) user name (optional)
    uint32 event_number = 124;
    SpdrStageType stage_type = 127; // parent is a staged order [StageLock, StageModify, StageReview]
    int64 base_parent_number = 130; // SPDR order number (initial number in cancel/replace sequence) (also, source parent for dynamically generated orders;eg auto-hedges)
    int64 prev_parent_number = 133; // SPDR order number (order being cancelled/replaced) (zero if none)
    string engine_name = 136; // server stripe
    SpdrBrokerStatus spdr_broker_status = 139;
    SpdrOrderStatus spdr_order_status = 142;
    SpdrCloseReason spdr_close_reason = 145;
    SpdrRejectReason spdr_reject_reason = 148;
    string spdr_comment = 151; // additional detail if parent closed or rejected
    int32 cum_square_qty = 154; // cum spread quantity filled (all legs received)
    double avg_square_prc = 157;
    int32 cum_partial_qty = 160; // cum spread quantity partially filled (at least one leg received) [expected cumFilledQty if all legs square up]
    double u_bid = 163;
    double u_ask = 166;
    float bid_prc = 169;
    float ask_prc = 172;
    int32 bid_size = 175;
    int32 ask_size = 178;
    int32 open_order_size = 181;
    ExpiryKey hedge_sec_key = 184; // auto-hedge sec key
    SpdrKeyType hedge_sec_type = 187; // auto-hedge sec type
    int32 risk_limit_size = 190; // risk limit size
    SpdrRisk risk_limit_desc = 193; // reason for size reduction
    SpdrRiskLevel risk_limit_level = 196; // risk limit level responsible for reduction
    string risk_limit_detail = 199; // risk limit detail
    double limit_price = 202;
    LimitError limit_err = 205;
    string limit_err_desc = 208;
    AlgoState algo_state = 211;
    int32 algo_counter = 214;
    AlgoState make_state = 217;
    int32 make_counter = 220;
    BrokerState broker_state = 223; // broker monitor state
    SpdrMarketState spdr_mkt_state = 226;
    uint32 child_order_mask = 229; // bit-mask of all exchange for which a child order was generated
    uint32 num_child_orders = 232; // total number of child orders generated by this parent broker (parent number)
    uint32 num_day_child_orders = 235; // total number of child orders generated by this parent broker (all day; base parent number)
    string modified_by = 238; // user who last modified this record
    SysEnvironment modified_in = 241;
    google.protobuf.Timestamp timestamp = 244; // timestamp of last modification
}


