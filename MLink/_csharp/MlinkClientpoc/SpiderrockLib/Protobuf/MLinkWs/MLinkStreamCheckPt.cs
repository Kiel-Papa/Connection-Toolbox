// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/MLinkWs/MLinkStreamCheckPt.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/MLinkWs/MLinkStreamCheckPt.proto</summary>
  public static partial class MLinkStreamCheckPtReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/MLinkWs/MLinkStreamCheckPt.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MLinkStreamCheckPtReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CilQcm90b2J1Zi9NTGlua1dzL01MaW5rU3RyZWFtQ2hlY2tQdC5wcm90bxIT",
            "c3BpZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24ucHJvdG8a",
            "H2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8itwMKEk1MaW5rU3Ry",
            "ZWFtQ2hlY2tQdBIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuTWVzc2FnZU1ldGFkYXRhEhIKCnNlc3Npb25faUQYZCABKAUSEAoIcXVl",
            "cnlfaUQYZyABKAMSEQoJc2lnbmFsX2lEGGogASgDEjQKBXN0YXRlGG0gASgO",
            "MiUuc3BpZGVycm9jay5wcm90b2J1Zi5NTGlua1N0cmVhbVN0YXRlEg4KBmRl",
            "dGFpbBhwIAEoCRIUCgxoaWdod2F0ZXJfdHMYcyABKAMSFgoObnVtX2J5dGVz",
            "X3NlbnQYdiABKAMSGQoRbnVtX21lc3NhZ2VzX3NlbnQYeSABKAUSFAoMd2Fp",
            "dF9lbGFwc2VkGHwgASgBEhUKDXF1ZXJ5X2VsYXBzZWQYfyABKAESGAoPdHJ5",
            "X2Z3ZF9lbGFwc2VkGIIBIAEoARIVCgxzZW5kX2VsYXBzZWQYhQEgASgBEhYK",
            "DWZsdXNoX2VsYXBzZWQYiAEgASgBEi4KCXRpbWVzdGFtcBiLASABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.MLinkStreamCheckPt), global::Spiderrock.Protobuf.MLinkStreamCheckPt.Parser, new[]{ "Meta", "SessionID", "QueryID", "SignalID", "State", "Detail", "HighwaterTs", "NumBytesSent", "NumMessagesSent", "WaitElapsed", "QueryElapsed", "TryFwdElapsed", "SendElapsed", "FlushElapsed", "Timestamp" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MLinkStreamCheckPt : pb::IMessage<MLinkStreamCheckPt>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MLinkStreamCheckPt> _parser = new pb::MessageParser<MLinkStreamCheckPt>(() => new MLinkStreamCheckPt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MLinkStreamCheckPt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.MLinkStreamCheckPtReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MLinkStreamCheckPt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MLinkStreamCheckPt(MLinkStreamCheckPt other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      sessionID_ = other.sessionID_;
      queryID_ = other.queryID_;
      signalID_ = other.signalID_;
      state_ = other.state_;
      detail_ = other.detail_;
      highwaterTs_ = other.highwaterTs_;
      numBytesSent_ = other.numBytesSent_;
      numMessagesSent_ = other.numMessagesSent_;
      waitElapsed_ = other.waitElapsed_;
      queryElapsed_ = other.queryElapsed_;
      tryFwdElapsed_ = other.tryFwdElapsed_;
      sendElapsed_ = other.sendElapsed_;
      flushElapsed_ = other.flushElapsed_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MLinkStreamCheckPt Clone() {
      return new MLinkStreamCheckPt(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "session_iD" field.</summary>
    public const int SessionIDFieldNumber = 100;
    private int sessionID_;
    /// <summary>
    /// from MLinkStream.sessionID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SessionID {
      get { return sessionID_; }
      set {
        sessionID_ = value;
      }
    }

    /// <summary>Field number for the "query_iD" field.</summary>
    public const int QueryIDFieldNumber = 103;
    private long queryID_;
    /// <summary>
    /// from MLinkStream.queryID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long QueryID {
      get { return queryID_; }
      set {
        queryID_ = value;
      }
    }

    /// <summary>Field number for the "signal_iD" field.</summary>
    public const int SignalIDFieldNumber = 106;
    private long signalID_;
    /// <summary>
    /// from MLinkSignalReady.signalID (if send sequence triggered by an MLinkSignalReady message)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SignalID {
      get { return signalID_; }
      set {
        signalID_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 109;
    private global::Spiderrock.Protobuf.MLinkStreamState state_ = global::Spiderrock.Protobuf.MLinkStreamState.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MLinkStreamState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "detail" field.</summary>
    public const int DetailFieldNumber = 112;
    private string detail_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "highwater_ts" field.</summary>
    public const int HighwaterTsFieldNumber = 115;
    private long highwaterTs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HighwaterTs {
      get { return highwaterTs_; }
      set {
        highwaterTs_ = value;
      }
    }

    /// <summary>Field number for the "num_bytes_sent" field.</summary>
    public const int NumBytesSentFieldNumber = 118;
    private long numBytesSent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NumBytesSent {
      get { return numBytesSent_; }
      set {
        numBytesSent_ = value;
      }
    }

    /// <summary>Field number for the "num_messages_sent" field.</summary>
    public const int NumMessagesSentFieldNumber = 121;
    private int numMessagesSent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumMessagesSent {
      get { return numMessagesSent_; }
      set {
        numMessagesSent_ = value;
      }
    }

    /// <summary>Field number for the "wait_elapsed" field.</summary>
    public const int WaitElapsedFieldNumber = 124;
    private double waitElapsed_;
    /// <summary>
    /// wait time between active send operations (SRC or timer)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double WaitElapsed {
      get { return waitElapsed_; }
      set {
        waitElapsed_ = value;
      }
    }

    /// <summary>Field number for the "query_elapsed" field.</summary>
    public const int QueryElapsedFieldNumber = 127;
    private double queryElapsed_;
    /// <summary>
    /// total time spent in active send loop
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double QueryElapsed {
      get { return queryElapsed_; }
      set {
        queryElapsed_ = value;
      }
    }

    /// <summary>Field number for the "try_fwd_elapsed" field.</summary>
    public const int TryFwdElapsedFieldNumber = 130;
    private double tryFwdElapsed_;
    /// <summary>
    /// total time spent scan/skipping
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TryFwdElapsed {
      get { return tryFwdElapsed_; }
      set {
        tryFwdElapsed_ = value;
      }
    }

    /// <summary>Field number for the "send_elapsed" field.</summary>
    public const int SendElapsedFieldNumber = 133;
    private double sendElapsed_;
    /// <summary>
    /// total time spend encoding/copying to send buffer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SendElapsed {
      get { return sendElapsed_; }
      set {
        sendElapsed_ = value;
      }
    }

    /// <summary>Field number for the "flush_elapsed" field.</summary>
    public const int FlushElapsedFieldNumber = 136;
    private double flushElapsed_;
    /// <summary>
    /// total time spend sending/blocking on web socket
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FlushElapsed {
      get { return flushElapsed_; }
      set {
        flushElapsed_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 139;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MLinkStreamCheckPt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MLinkStreamCheckPt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (SessionID != other.SessionID) return false;
      if (QueryID != other.QueryID) return false;
      if (SignalID != other.SignalID) return false;
      if (State != other.State) return false;
      if (Detail != other.Detail) return false;
      if (HighwaterTs != other.HighwaterTs) return false;
      if (NumBytesSent != other.NumBytesSent) return false;
      if (NumMessagesSent != other.NumMessagesSent) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WaitElapsed, other.WaitElapsed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(QueryElapsed, other.QueryElapsed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TryFwdElapsed, other.TryFwdElapsed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SendElapsed, other.SendElapsed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FlushElapsed, other.FlushElapsed)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (SessionID != 0) hash ^= SessionID.GetHashCode();
      if (QueryID != 0L) hash ^= QueryID.GetHashCode();
      if (SignalID != 0L) hash ^= SignalID.GetHashCode();
      if (State != global::Spiderrock.Protobuf.MLinkStreamState.Unspecified) hash ^= State.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      if (HighwaterTs != 0L) hash ^= HighwaterTs.GetHashCode();
      if (NumBytesSent != 0L) hash ^= NumBytesSent.GetHashCode();
      if (NumMessagesSent != 0) hash ^= NumMessagesSent.GetHashCode();
      if (WaitElapsed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WaitElapsed);
      if (QueryElapsed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(QueryElapsed);
      if (TryFwdElapsed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TryFwdElapsed);
      if (SendElapsed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SendElapsed);
      if (FlushElapsed != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FlushElapsed);
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (SessionID != 0) {
        output.WriteRawTag(160, 6);
        output.WriteInt32(SessionID);
      }
      if (QueryID != 0L) {
        output.WriteRawTag(184, 6);
        output.WriteInt64(QueryID);
      }
      if (SignalID != 0L) {
        output.WriteRawTag(208, 6);
        output.WriteInt64(SignalID);
      }
      if (State != global::Spiderrock.Protobuf.MLinkStreamState.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) State);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteString(Detail);
      }
      if (HighwaterTs != 0L) {
        output.WriteRawTag(152, 7);
        output.WriteInt64(HighwaterTs);
      }
      if (NumBytesSent != 0L) {
        output.WriteRawTag(176, 7);
        output.WriteInt64(NumBytesSent);
      }
      if (NumMessagesSent != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(NumMessagesSent);
      }
      if (WaitElapsed != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(WaitElapsed);
      }
      if (QueryElapsed != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(QueryElapsed);
      }
      if (TryFwdElapsed != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(TryFwdElapsed);
      }
      if (SendElapsed != 0D) {
        output.WriteRawTag(169, 8);
        output.WriteDouble(SendElapsed);
      }
      if (FlushElapsed != 0D) {
        output.WriteRawTag(193, 8);
        output.WriteDouble(FlushElapsed);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (SessionID != 0) {
        output.WriteRawTag(160, 6);
        output.WriteInt32(SessionID);
      }
      if (QueryID != 0L) {
        output.WriteRawTag(184, 6);
        output.WriteInt64(QueryID);
      }
      if (SignalID != 0L) {
        output.WriteRawTag(208, 6);
        output.WriteInt64(SignalID);
      }
      if (State != global::Spiderrock.Protobuf.MLinkStreamState.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) State);
      }
      if (Detail.Length != 0) {
        output.WriteRawTag(130, 7);
        output.WriteString(Detail);
      }
      if (HighwaterTs != 0L) {
        output.WriteRawTag(152, 7);
        output.WriteInt64(HighwaterTs);
      }
      if (NumBytesSent != 0L) {
        output.WriteRawTag(176, 7);
        output.WriteInt64(NumBytesSent);
      }
      if (NumMessagesSent != 0) {
        output.WriteRawTag(200, 7);
        output.WriteInt32(NumMessagesSent);
      }
      if (WaitElapsed != 0D) {
        output.WriteRawTag(225, 7);
        output.WriteDouble(WaitElapsed);
      }
      if (QueryElapsed != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(QueryElapsed);
      }
      if (TryFwdElapsed != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(TryFwdElapsed);
      }
      if (SendElapsed != 0D) {
        output.WriteRawTag(169, 8);
        output.WriteDouble(SendElapsed);
      }
      if (FlushElapsed != 0D) {
        output.WriteRawTag(193, 8);
        output.WriteDouble(FlushElapsed);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (SessionID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SessionID);
      }
      if (QueryID != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(QueryID);
      }
      if (SignalID != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SignalID);
      }
      if (State != global::Spiderrock.Protobuf.MLinkStreamState.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Detail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      if (HighwaterTs != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HighwaterTs);
      }
      if (NumBytesSent != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NumBytesSent);
      }
      if (NumMessagesSent != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumMessagesSent);
      }
      if (WaitElapsed != 0D) {
        size += 2 + 8;
      }
      if (QueryElapsed != 0D) {
        size += 2 + 8;
      }
      if (TryFwdElapsed != 0D) {
        size += 2 + 8;
      }
      if (SendElapsed != 0D) {
        size += 2 + 8;
      }
      if (FlushElapsed != 0D) {
        size += 2 + 8;
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MLinkStreamCheckPt other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.SessionID != 0) {
        SessionID = other.SessionID;
      }
      if (other.QueryID != 0L) {
        QueryID = other.QueryID;
      }
      if (other.SignalID != 0L) {
        SignalID = other.SignalID;
      }
      if (other.State != global::Spiderrock.Protobuf.MLinkStreamState.Unspecified) {
        State = other.State;
      }
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
      if (other.HighwaterTs != 0L) {
        HighwaterTs = other.HighwaterTs;
      }
      if (other.NumBytesSent != 0L) {
        NumBytesSent = other.NumBytesSent;
      }
      if (other.NumMessagesSent != 0) {
        NumMessagesSent = other.NumMessagesSent;
      }
      if (other.WaitElapsed != 0D) {
        WaitElapsed = other.WaitElapsed;
      }
      if (other.QueryElapsed != 0D) {
        QueryElapsed = other.QueryElapsed;
      }
      if (other.TryFwdElapsed != 0D) {
        TryFwdElapsed = other.TryFwdElapsed;
      }
      if (other.SendElapsed != 0D) {
        SendElapsed = other.SendElapsed;
      }
      if (other.FlushElapsed != 0D) {
        FlushElapsed = other.FlushElapsed;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 800: {
            SessionID = input.ReadInt32();
            break;
          }
          case 824: {
            QueryID = input.ReadInt64();
            break;
          }
          case 848: {
            SignalID = input.ReadInt64();
            break;
          }
          case 872: {
            State = (global::Spiderrock.Protobuf.MLinkStreamState) input.ReadEnum();
            break;
          }
          case 898: {
            Detail = input.ReadString();
            break;
          }
          case 920: {
            HighwaterTs = input.ReadInt64();
            break;
          }
          case 944: {
            NumBytesSent = input.ReadInt64();
            break;
          }
          case 968: {
            NumMessagesSent = input.ReadInt32();
            break;
          }
          case 993: {
            WaitElapsed = input.ReadDouble();
            break;
          }
          case 1017: {
            QueryElapsed = input.ReadDouble();
            break;
          }
          case 1041: {
            TryFwdElapsed = input.ReadDouble();
            break;
          }
          case 1065: {
            SendElapsed = input.ReadDouble();
            break;
          }
          case 1089: {
            FlushElapsed = input.ReadDouble();
            break;
          }
          case 1114: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 800: {
            SessionID = input.ReadInt32();
            break;
          }
          case 824: {
            QueryID = input.ReadInt64();
            break;
          }
          case 848: {
            SignalID = input.ReadInt64();
            break;
          }
          case 872: {
            State = (global::Spiderrock.Protobuf.MLinkStreamState) input.ReadEnum();
            break;
          }
          case 898: {
            Detail = input.ReadString();
            break;
          }
          case 920: {
            HighwaterTs = input.ReadInt64();
            break;
          }
          case 944: {
            NumBytesSent = input.ReadInt64();
            break;
          }
          case 968: {
            NumMessagesSent = input.ReadInt32();
            break;
          }
          case 993: {
            WaitElapsed = input.ReadDouble();
            break;
          }
          case 1017: {
            QueryElapsed = input.ReadDouble();
            break;
          }
          case 1041: {
            TryFwdElapsed = input.ReadDouble();
            break;
          }
          case 1065: {
            SendElapsed = input.ReadDouble();
            break;
          }
          case 1089: {
            FlushElapsed = input.ReadDouble();
            break;
          }
          case 1114: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
