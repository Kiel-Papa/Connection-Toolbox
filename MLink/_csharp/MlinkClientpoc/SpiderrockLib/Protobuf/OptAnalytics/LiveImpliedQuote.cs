// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/OptAnalytics/LiveImpliedQuote.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/OptAnalytics/LiveImpliedQuote.proto</summary>
  public static partial class LiveImpliedQuoteReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/OptAnalytics/LiveImpliedQuote.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LiveImpliedQuoteReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixQcm90b2J1Zi9PcHRBbmFseXRpY3MvTGl2ZUltcGxpZWRRdW90ZS5wcm90",
            "bxITc3BpZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24ucHJv",
            "dG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8i3AcKEExpdmVJ",
            "bXBsaWVkUXVvdGUSMwoFX21ldGEYASABKAsyJC5zcGlkZXJyb2NrLnByb3Rv",
            "YnVmLk1lc3NhZ2VNZXRhZGF0YRI4CgRwa2V5GAIgASgLMiouc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5MaXZlSW1wbGllZFF1b3RlLlBLZXkSLgoGdGlja2VyGGQg",
            "ASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5UaWNrZXJLZXkSDQoFdV9wcmMY",
            "ZyABKAISDQoFdV9vZmYYaiABKAISDQoFeWVhcnMYbSABKAISDgoGeF9heGlz",
            "GHAgASgCEgwKBHJhdGUYcyABKAISDAoEc2Rpdhh2IAEoAhIMCgRkZGl2GHkg",
            "ASgCEg0KBW9fYmlkGHwgASgCEg0KBW9fYXNrGH8gASgCEhEKCG9fYmlkX2l2",
            "GIIBIAEoAhIRCghvX2Fza19pdhiFASABKAISEAoHYXRtX3ZvbBiIASABKAIS",
            "DgoFc192b2wYiwEgASgCEg4KBXNfcHJjGI4BIAEoAhIPCgZzX21hcmsYkQEg",
            "ASgCEhEKCHZlX3Nsb3BlGJQBIAEoAhILCgJkZRiXASABKAISCwoCZ2EYmgEg",
            "ASgCEgsKAnRoGJ0BIAEoAhILCgJ2ZRigASABKAISCwoCdmEYowEgASgCEgsK",
            "AnZvGKYBIAEoAhILCgJybxipASABKAISCwoCcGgYrAEgASgCEhEKCGRlX2Rl",
            "Y2F5GK8BIAEoAhINCgR1cDUwGLIBIAEoAhINCgRkbjUwGLUBIAEoAhINCgR1",
            "cDE1GLgBIAEoAhINCgRkbjE1GLsBIAEoAhINCgR1cDA2GL4BIAEoAhINCgRk",
            "bjA4GMEBIAEoAhISCglzcG90X3VQcmMYxAEgASgCEjcKCnByaWNlX3R5cGUY",
            "xwEgASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5DYWxjUHJpY2VUeXBlEjkK",
            "CGNhbGNfZXJyGMoBIAEoDjImLnNwaWRlcnJvY2sucHJvdG9idWYuSW1wbGll",
            "ZFF1b3RlRXJyb3ISNQoLY2FsY19zb3VyY2UYzQEgASgOMh8uc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5DYWxjU291cmNlEhYKDXNyY190aW1lc3RhbXAY0AEgASgD",
            "EhYKDW5ldF90aW1lc3RhbXAY0wEgASgDEi4KCXRpbWVzdGFtcBjWASABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wGjQKBFBLZXkSLAoEb2tleRgK",
            "IAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuT3B0aW9uS2V5YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveImpliedQuote), global::Spiderrock.Protobuf.LiveImpliedQuote.Parser, new[]{ "Meta", "Pkey", "Ticker", "UPrc", "UOff", "Years", "XAxis", "Rate", "Sdiv", "Ddiv", "OBid", "OAsk", "OBidIv", "OAskIv", "AtmVol", "SVol", "SPrc", "SMark", "VeSlope", "De", "Ga", "Th", "Ve", "Va", "Vo", "Ro", "Ph", "DeDecay", "Up50", "Dn50", "Up15", "Dn15", "Up06", "Dn08", "SpotUPrc", "PriceType", "CalcErr", "CalcSource", "SrcTimestamp", "NetTimestamp", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveImpliedQuote.Types.PKey), global::Spiderrock.Protobuf.LiveImpliedQuote.Types.PKey.Parser, new[]{ "Okey" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///CalcSource=Tick records are computed and published each time an option NBBO price changes.  CalcSource=Loop records are computed in a 2-3 minute background loop.
  ///Note that the underlier price (uPrc) will be the same for all options an underlier when CalcSource=Loop.  This is not true for CalcSource=Tick where uPrc will be the underlier price that prevailed when the option price changed.
  ///If you are consuming multicast data and only want records with consistent uPrc values for all options you should ignore Tick records. Alternatively, you can use an independent underlier price source (our StockBookQuote feed or some other) and 'adjust' the values in this table to the new underlier value.
  ///If you are selecting records from SRSE you should note that OptionImpliedQuoteAdj table is a proxy implementation of this table that automatically applies the appropriate underlier adjustments as records are being returned.
  /// </summary>
  public sealed partial class LiveImpliedQuote : pb::IMessage<LiveImpliedQuote>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LiveImpliedQuote> _parser = new pb::MessageParser<LiveImpliedQuote>(() => new LiveImpliedQuote());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LiveImpliedQuote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.LiveImpliedQuoteReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveImpliedQuote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveImpliedQuote(LiveImpliedQuote other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      uPrc_ = other.uPrc_;
      uOff_ = other.uOff_;
      years_ = other.years_;
      xAxis_ = other.xAxis_;
      rate_ = other.rate_;
      sdiv_ = other.sdiv_;
      ddiv_ = other.ddiv_;
      oBid_ = other.oBid_;
      oAsk_ = other.oAsk_;
      oBidIv_ = other.oBidIv_;
      oAskIv_ = other.oAskIv_;
      atmVol_ = other.atmVol_;
      sVol_ = other.sVol_;
      sPrc_ = other.sPrc_;
      sMark_ = other.sMark_;
      veSlope_ = other.veSlope_;
      de_ = other.de_;
      ga_ = other.ga_;
      th_ = other.th_;
      ve_ = other.ve_;
      va_ = other.va_;
      vo_ = other.vo_;
      ro_ = other.ro_;
      ph_ = other.ph_;
      deDecay_ = other.deDecay_;
      up50_ = other.up50_;
      dn50_ = other.dn50_;
      up15_ = other.up15_;
      dn15_ = other.dn15_;
      up06_ = other.up06_;
      dn08_ = other.dn08_;
      spotUPrc_ = other.spotUPrc_;
      priceType_ = other.priceType_;
      calcErr_ = other.calcErr_;
      calcSource_ = other.calcSource_;
      srcTimestamp_ = other.srcTimestamp_;
      netTimestamp_ = other.netTimestamp_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveImpliedQuote Clone() {
      return new LiveImpliedQuote(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.LiveImpliedQuote.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.LiveImpliedQuote.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 100;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// SR Ticker that this option rolls up to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "u_prc" field.</summary>
    public const int UPrcFieldNumber = 103;
    private float uPrc_;
    /// <summary>
    /// underlier price (usually mid-market)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UPrc {
      get { return uPrc_; }
      set {
        uPrc_ = value;
      }
    }

    /// <summary>Field number for the "u_off" field.</summary>
    public const int UOffFieldNumber = 106;
    private float uOff_;
    /// <summary>
    /// implied underlier price offset (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float UOff {
      get { return uOff_; }
      set {
        uOff_ = value;
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 109;
    private float years_;
    /// <summary>
    /// years to expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "x_axis" field.</summary>
    public const int XAxisFieldNumber = 112;
    private float xAxis_;
    /// <summary>
    /// option moneyness
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float XAxis {
      get { return xAxis_; }
      set {
        xAxis_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 115;
    private float rate_;
    /// <summary>
    /// discount rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "sdiv" field.</summary>
    public const int SdivFieldNumber = 118;
    private float sdiv_;
    /// <summary>
    /// sdiv (continuous stock dividend) rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sdiv {
      get { return sdiv_; }
      set {
        sdiv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv" field.</summary>
    public const int DdivFieldNumber = 121;
    private float ddiv_;
    /// <summary>
    /// cumulative discrete dividend value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ddiv {
      get { return ddiv_; }
      set {
        ddiv_ = value;
      }
    }

    /// <summary>Field number for the "o_bid" field.</summary>
    public const int OBidFieldNumber = 124;
    private float oBid_;
    /// <summary>
    /// option bid price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OBid {
      get { return oBid_; }
      set {
        oBid_ = value;
      }
    }

    /// <summary>Field number for the "o_ask" field.</summary>
    public const int OAskFieldNumber = 127;
    private float oAsk_;
    /// <summary>
    /// option ask price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OAsk {
      get { return oAsk_; }
      set {
        oAsk_ = value;
      }
    }

    /// <summary>Field number for the "o_bid_iv" field.</summary>
    public const int OBidIvFieldNumber = 130;
    private float oBidIv_;
    /// <summary>
    /// volatility implied by option bid price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OBidIv {
      get { return oBidIv_; }
      set {
        oBidIv_ = value;
      }
    }

    /// <summary>Field number for the "o_ask_iv" field.</summary>
    public const int OAskIvFieldNumber = 133;
    private float oAskIv_;
    /// <summary>
    /// volatility implied by option ask price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OAskIv {
      get { return oAskIv_; }
      set {
        oAskIv_ = value;
      }
    }

    /// <summary>Field number for the "atm_vol" field.</summary>
    public const int AtmVolFieldNumber = 136;
    private float atmVol_;
    /// <summary>
    /// option atm volatility (from SR surface)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmVol {
      get { return atmVol_; }
      set {
        atmVol_ = value;
      }
    }

    /// <summary>Field number for the "s_vol" field.</summary>
    public const int SVolFieldNumber = 139;
    private float sVol_;
    /// <summary>
    /// option surface volatility (SR surface fit model)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SVol {
      get { return sVol_; }
      set {
        sVol_ = value;
      }
    }

    /// <summary>Field number for the "s_prc" field.</summary>
    public const int SPrcFieldNumber = 142;
    private float sPrc_;
    /// <summary>
    /// option surface price; ie. PRICE(sVol, uPrc + uOff, years, rate, sDiv, {discrete dividends, if any})
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SPrc {
      get { return sPrc_; }
      set {
        sPrc_ = value;
      }
    }

    /// <summary>Field number for the "s_mark" field.</summary>
    public const int SMarkFieldNumber = 145;
    private float sMark_;
    /// <summary>
    /// option surface mark (option surface price w/bounding rules; always between bid/ask)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SMark {
      get { return sMark_; }
      set {
        sMark_ = value;
      }
    }

    /// <summary>Field number for the "ve_slope" field.</summary>
    public const int VeSlopeFieldNumber = 148;
    private float veSlope_;
    /// <summary>
    /// veSlope = dVol / dUprc (assuming vol @ xAxis = 0 remains constant); hedgeDelta = (de + ve * 100 * veSlope) if hedging with this assumption
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VeSlope {
      get { return veSlope_; }
      set {
        veSlope_ = value;
      }
    }

    /// <summary>Field number for the "de" field.</summary>
    public const int DeFieldNumber = 151;
    private float de_;
    /// <summary>
    /// option delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float De {
      get { return de_; }
      set {
        de_ = value;
      }
    }

    /// <summary>Field number for the "ga" field.</summary>
    public const int GaFieldNumber = 154;
    private float ga_;
    /// <summary>
    /// option gamma
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ga {
      get { return ga_; }
      set {
        ga_ = value;
      }
    }

    /// <summary>Field number for the "th" field.</summary>
    public const int ThFieldNumber = 157;
    private float th_;
    /// <summary>
    /// option theta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Th {
      get { return th_; }
      set {
        th_ = value;
      }
    }

    /// <summary>Field number for the "ve" field.</summary>
    public const int VeFieldNumber = 160;
    private float ve_;
    /// <summary>
    /// option vega
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ve {
      get { return ve_; }
      set {
        ve_ = value;
      }
    }

    /// <summary>Field number for the "va" field.</summary>
    public const int VaFieldNumber = 163;
    private float va_;
    /// <summary>
    /// option vanna
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Va {
      get { return va_; }
      set {
        va_ = value;
      }
    }

    /// <summary>Field number for the "vo" field.</summary>
    public const int VoFieldNumber = 166;
    private float vo_;
    /// <summary>
    /// option volga
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vo {
      get { return vo_; }
      set {
        vo_ = value;
      }
    }

    /// <summary>Field number for the "ro" field.</summary>
    public const int RoFieldNumber = 169;
    private float ro_;
    /// <summary>
    /// option rho
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ro {
      get { return ro_; }
      set {
        ro_ = value;
      }
    }

    /// <summary>Field number for the "ph" field.</summary>
    public const int PhFieldNumber = 172;
    private float ph_;
    /// <summary>
    /// option phi
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ph {
      get { return ph_; }
      set {
        ph_ = value;
      }
    }

    /// <summary>Field number for the "de_decay" field.</summary>
    public const int DeDecayFieldNumber = 175;
    private float deDecay_;
    /// <summary>
    /// option delta decay
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DeDecay {
      get { return deDecay_; }
      set {
        deDecay_ = value;
      }
    }

    /// <summary>Field number for the "up50" field.</summary>
    public const int Up50FieldNumber = 178;
    private float up50_;
    /// <summary>
    /// underlier up 50% slide
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Up50 {
      get { return up50_; }
      set {
        up50_ = value;
      }
    }

    /// <summary>Field number for the "dn50" field.</summary>
    public const int Dn50FieldNumber = 181;
    private float dn50_;
    /// <summary>
    /// underlier dn 50% slide
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Dn50 {
      get { return dn50_; }
      set {
        dn50_ = value;
      }
    }

    /// <summary>Field number for the "up15" field.</summary>
    public const int Up15FieldNumber = 184;
    private float up15_;
    /// <summary>
    /// underlier up 15% slide
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Up15 {
      get { return up15_; }
      set {
        up15_ = value;
      }
    }

    /// <summary>Field number for the "dn15" field.</summary>
    public const int Dn15FieldNumber = 187;
    private float dn15_;
    /// <summary>
    /// underlier dn 15% slide
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Dn15 {
      get { return dn15_; }
      set {
        dn15_ = value;
      }
    }

    /// <summary>Field number for the "up06" field.</summary>
    public const int Up06FieldNumber = 190;
    private float up06_;
    /// <summary>
    /// underlier up 6% slide
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Up06 {
      get { return up06_; }
      set {
        up06_ = value;
      }
    }

    /// <summary>Field number for the "dn08" field.</summary>
    public const int Dn08FieldNumber = 193;
    private float dn08_;
    /// <summary>
    /// underlier dn 8% slide
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Dn08 {
      get { return dn08_; }
      set {
        dn08_ = value;
      }
    }

    /// <summary>Field number for the "spot_uPrc" field.</summary>
    public const int SpotUPrcFieldNumber = 196;
    private float spotUPrc_;
    /// <summary>
    /// spot underlier price (same as uPrc when priceType = 'Equity') (note: if Future and spotUPrc is known it will appear here)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SpotUPrc {
      get { return spotUPrc_; }
      set {
        spotUPrc_ = value;
      }
    }

    /// <summary>Field number for the "price_type" field.</summary>
    public const int PriceTypeFieldNumber = 199;
    private global::Spiderrock.Protobuf.CalcPriceType priceType_ = global::Spiderrock.Protobuf.CalcPriceType.Unspecified;
    /// <summary>
    /// Equity or Future (Black76) pricing framework;  if Future then uPrc is the forwardUPrc and sdiv = rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CalcPriceType PriceType {
      get { return priceType_; }
      set {
        priceType_ = value;
      }
    }

    /// <summary>Field number for the "calc_err" field.</summary>
    public const int CalcErrFieldNumber = 202;
    private global::Spiderrock.Protobuf.ImpliedQuoteError calcErr_ = global::Spiderrock.Protobuf.ImpliedQuoteError.Unspecified;
    /// <summary>
    /// option pricing calculation error (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ImpliedQuoteError CalcErr {
      get { return calcErr_; }
      set {
        calcErr_ = value;
      }
    }

    /// <summary>Field number for the "calc_source" field.</summary>
    public const int CalcSourceFieldNumber = 205;
    private global::Spiderrock.Protobuf.CalcSource calcSource_ = global::Spiderrock.Protobuf.CalcSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CalcSource CalcSource {
      get { return calcSource_; }
      set {
        calcSource_ = value;
      }
    }

    /// <summary>Field number for the "src_timestamp" field.</summary>
    public const int SrcTimestampFieldNumber = 208;
    private long srcTimestamp_;
    /// <summary>
    /// OPRA source timestamp (nanoseconds since epoch); will be zero if calcSource != Tick
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SrcTimestamp {
      get { return srcTimestamp_; }
      set {
        srcTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "net_timestamp" field.</summary>
    public const int NetTimestampFieldNumber = 211;
    private long netTimestamp_;
    /// <summary>
    /// SR timestamp @ publish time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NetTimestamp {
      get { return netTimestamp_; }
      set {
        netTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 214;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LiveImpliedQuote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LiveImpliedQuote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UPrc, other.UPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UOff, other.UOff)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XAxis, other.XAxis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rate, other.Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sdiv, other.Sdiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ddiv, other.Ddiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OBid, other.OBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OAsk, other.OAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OBidIv, other.OBidIv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OAskIv, other.OAskIv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVol, other.AtmVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SVol, other.SVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SPrc, other.SPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SMark, other.SMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VeSlope, other.VeSlope)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(De, other.De)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ga, other.Ga)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Th, other.Th)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ve, other.Ve)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Va, other.Va)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vo, other.Vo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ro, other.Ro)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ph, other.Ph)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeDecay, other.DeDecay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Up50, other.Up50)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Dn50, other.Dn50)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Up15, other.Up15)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Dn15, other.Dn15)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Up06, other.Up06)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Dn08, other.Dn08)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpotUPrc, other.SpotUPrc)) return false;
      if (PriceType != other.PriceType) return false;
      if (CalcErr != other.CalcErr) return false;
      if (CalcSource != other.CalcSource) return false;
      if (SrcTimestamp != other.SrcTimestamp) return false;
      if (NetTimestamp != other.NetTimestamp) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (UPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UPrc);
      if (UOff != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UOff);
      if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
      if (XAxis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XAxis);
      if (Rate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rate);
      if (Sdiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sdiv);
      if (Ddiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ddiv);
      if (OBid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OBid);
      if (OAsk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OAsk);
      if (OBidIv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OBidIv);
      if (OAskIv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OAskIv);
      if (AtmVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVol);
      if (SVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SVol);
      if (SPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SPrc);
      if (SMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SMark);
      if (VeSlope != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VeSlope);
      if (De != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(De);
      if (Ga != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ga);
      if (Th != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Th);
      if (Ve != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ve);
      if (Va != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Va);
      if (Vo != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vo);
      if (Ro != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ro);
      if (Ph != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ph);
      if (DeDecay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeDecay);
      if (Up50 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Up50);
      if (Dn50 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Dn50);
      if (Up15 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Up15);
      if (Dn15 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Dn15);
      if (Up06 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Up06);
      if (Dn08 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Dn08);
      if (SpotUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpotUPrc);
      if (PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) hash ^= PriceType.GetHashCode();
      if (CalcErr != global::Spiderrock.Protobuf.ImpliedQuoteError.Unspecified) hash ^= CalcErr.GetHashCode();
      if (CalcSource != global::Spiderrock.Protobuf.CalcSource.Unspecified) hash ^= CalcSource.GetHashCode();
      if (SrcTimestamp != 0L) hash ^= SrcTimestamp.GetHashCode();
      if (NetTimestamp != 0L) hash ^= NetTimestamp.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (UPrc != 0F) {
        output.WriteRawTag(189, 6);
        output.WriteFloat(UPrc);
      }
      if (UOff != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(UOff);
      }
      if (Years != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(Years);
      }
      if (XAxis != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(XAxis);
      }
      if (Rate != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(Rate);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(Sdiv);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(Ddiv);
      }
      if (OBid != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(OBid);
      }
      if (OAsk != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(OAsk);
      }
      if (OBidIv != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(OBidIv);
      }
      if (OAskIv != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(OAskIv);
      }
      if (AtmVol != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(AtmVol);
      }
      if (SVol != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(SVol);
      }
      if (SPrc != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(SPrc);
      }
      if (SMark != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(SMark);
      }
      if (VeSlope != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(VeSlope);
      }
      if (De != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(De);
      }
      if (Ga != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(Ga);
      }
      if (Th != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(Th);
      }
      if (Ve != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(Ve);
      }
      if (Va != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(Va);
      }
      if (Vo != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(Vo);
      }
      if (Ro != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(Ro);
      }
      if (Ph != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(Ph);
      }
      if (DeDecay != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(DeDecay);
      }
      if (Up50 != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(Up50);
      }
      if (Dn50 != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(Dn50);
      }
      if (Up15 != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(Up15);
      }
      if (Dn15 != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(Dn15);
      }
      if (Up06 != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(Up06);
      }
      if (Dn08 != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(Dn08);
      }
      if (SpotUPrc != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(SpotUPrc);
      }
      if (PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) {
        output.WriteRawTag(184, 12);
        output.WriteEnum((int) PriceType);
      }
      if (CalcErr != global::Spiderrock.Protobuf.ImpliedQuoteError.Unspecified) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) CalcErr);
      }
      if (CalcSource != global::Spiderrock.Protobuf.CalcSource.Unspecified) {
        output.WriteRawTag(232, 12);
        output.WriteEnum((int) CalcSource);
      }
      if (SrcTimestamp != 0L) {
        output.WriteRawTag(128, 13);
        output.WriteInt64(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(152, 13);
        output.WriteInt64(NetTimestamp);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(178, 13);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (UPrc != 0F) {
        output.WriteRawTag(189, 6);
        output.WriteFloat(UPrc);
      }
      if (UOff != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(UOff);
      }
      if (Years != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(Years);
      }
      if (XAxis != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(XAxis);
      }
      if (Rate != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(Rate);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(Sdiv);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(Ddiv);
      }
      if (OBid != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(OBid);
      }
      if (OAsk != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(OAsk);
      }
      if (OBidIv != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(OBidIv);
      }
      if (OAskIv != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(OAskIv);
      }
      if (AtmVol != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(AtmVol);
      }
      if (SVol != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(SVol);
      }
      if (SPrc != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(SPrc);
      }
      if (SMark != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(SMark);
      }
      if (VeSlope != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(VeSlope);
      }
      if (De != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(De);
      }
      if (Ga != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(Ga);
      }
      if (Th != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(Th);
      }
      if (Ve != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(Ve);
      }
      if (Va != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(Va);
      }
      if (Vo != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(Vo);
      }
      if (Ro != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(Ro);
      }
      if (Ph != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(Ph);
      }
      if (DeDecay != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(DeDecay);
      }
      if (Up50 != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(Up50);
      }
      if (Dn50 != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(Dn50);
      }
      if (Up15 != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(Up15);
      }
      if (Dn15 != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(Dn15);
      }
      if (Up06 != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(Up06);
      }
      if (Dn08 != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(Dn08);
      }
      if (SpotUPrc != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(SpotUPrc);
      }
      if (PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) {
        output.WriteRawTag(184, 12);
        output.WriteEnum((int) PriceType);
      }
      if (CalcErr != global::Spiderrock.Protobuf.ImpliedQuoteError.Unspecified) {
        output.WriteRawTag(208, 12);
        output.WriteEnum((int) CalcErr);
      }
      if (CalcSource != global::Spiderrock.Protobuf.CalcSource.Unspecified) {
        output.WriteRawTag(232, 12);
        output.WriteEnum((int) CalcSource);
      }
      if (SrcTimestamp != 0L) {
        output.WriteRawTag(128, 13);
        output.WriteInt64(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(152, 13);
        output.WriteInt64(NetTimestamp);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(178, 13);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (UPrc != 0F) {
        size += 2 + 4;
      }
      if (UOff != 0F) {
        size += 2 + 4;
      }
      if (Years != 0F) {
        size += 2 + 4;
      }
      if (XAxis != 0F) {
        size += 2 + 4;
      }
      if (Rate != 0F) {
        size += 2 + 4;
      }
      if (Sdiv != 0F) {
        size += 2 + 4;
      }
      if (Ddiv != 0F) {
        size += 2 + 4;
      }
      if (OBid != 0F) {
        size += 2 + 4;
      }
      if (OAsk != 0F) {
        size += 2 + 4;
      }
      if (OBidIv != 0F) {
        size += 2 + 4;
      }
      if (OAskIv != 0F) {
        size += 2 + 4;
      }
      if (AtmVol != 0F) {
        size += 2 + 4;
      }
      if (SVol != 0F) {
        size += 2 + 4;
      }
      if (SPrc != 0F) {
        size += 2 + 4;
      }
      if (SMark != 0F) {
        size += 2 + 4;
      }
      if (VeSlope != 0F) {
        size += 2 + 4;
      }
      if (De != 0F) {
        size += 2 + 4;
      }
      if (Ga != 0F) {
        size += 2 + 4;
      }
      if (Th != 0F) {
        size += 2 + 4;
      }
      if (Ve != 0F) {
        size += 2 + 4;
      }
      if (Va != 0F) {
        size += 2 + 4;
      }
      if (Vo != 0F) {
        size += 2 + 4;
      }
      if (Ro != 0F) {
        size += 2 + 4;
      }
      if (Ph != 0F) {
        size += 2 + 4;
      }
      if (DeDecay != 0F) {
        size += 2 + 4;
      }
      if (Up50 != 0F) {
        size += 2 + 4;
      }
      if (Dn50 != 0F) {
        size += 2 + 4;
      }
      if (Up15 != 0F) {
        size += 2 + 4;
      }
      if (Dn15 != 0F) {
        size += 2 + 4;
      }
      if (Up06 != 0F) {
        size += 2 + 4;
      }
      if (Dn08 != 0F) {
        size += 2 + 4;
      }
      if (SpotUPrc != 0F) {
        size += 2 + 4;
      }
      if (PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceType);
      }
      if (CalcErr != global::Spiderrock.Protobuf.ImpliedQuoteError.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CalcErr);
      }
      if (CalcSource != global::Spiderrock.Protobuf.CalcSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CalcSource);
      }
      if (SrcTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SrcTimestamp);
      }
      if (NetTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NetTimestamp);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LiveImpliedQuote other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.LiveImpliedQuote.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.UPrc != 0F) {
        UPrc = other.UPrc;
      }
      if (other.UOff != 0F) {
        UOff = other.UOff;
      }
      if (other.Years != 0F) {
        Years = other.Years;
      }
      if (other.XAxis != 0F) {
        XAxis = other.XAxis;
      }
      if (other.Rate != 0F) {
        Rate = other.Rate;
      }
      if (other.Sdiv != 0F) {
        Sdiv = other.Sdiv;
      }
      if (other.Ddiv != 0F) {
        Ddiv = other.Ddiv;
      }
      if (other.OBid != 0F) {
        OBid = other.OBid;
      }
      if (other.OAsk != 0F) {
        OAsk = other.OAsk;
      }
      if (other.OBidIv != 0F) {
        OBidIv = other.OBidIv;
      }
      if (other.OAskIv != 0F) {
        OAskIv = other.OAskIv;
      }
      if (other.AtmVol != 0F) {
        AtmVol = other.AtmVol;
      }
      if (other.SVol != 0F) {
        SVol = other.SVol;
      }
      if (other.SPrc != 0F) {
        SPrc = other.SPrc;
      }
      if (other.SMark != 0F) {
        SMark = other.SMark;
      }
      if (other.VeSlope != 0F) {
        VeSlope = other.VeSlope;
      }
      if (other.De != 0F) {
        De = other.De;
      }
      if (other.Ga != 0F) {
        Ga = other.Ga;
      }
      if (other.Th != 0F) {
        Th = other.Th;
      }
      if (other.Ve != 0F) {
        Ve = other.Ve;
      }
      if (other.Va != 0F) {
        Va = other.Va;
      }
      if (other.Vo != 0F) {
        Vo = other.Vo;
      }
      if (other.Ro != 0F) {
        Ro = other.Ro;
      }
      if (other.Ph != 0F) {
        Ph = other.Ph;
      }
      if (other.DeDecay != 0F) {
        DeDecay = other.DeDecay;
      }
      if (other.Up50 != 0F) {
        Up50 = other.Up50;
      }
      if (other.Dn50 != 0F) {
        Dn50 = other.Dn50;
      }
      if (other.Up15 != 0F) {
        Up15 = other.Up15;
      }
      if (other.Dn15 != 0F) {
        Dn15 = other.Dn15;
      }
      if (other.Up06 != 0F) {
        Up06 = other.Up06;
      }
      if (other.Dn08 != 0F) {
        Dn08 = other.Dn08;
      }
      if (other.SpotUPrc != 0F) {
        SpotUPrc = other.SpotUPrc;
      }
      if (other.PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) {
        PriceType = other.PriceType;
      }
      if (other.CalcErr != global::Spiderrock.Protobuf.ImpliedQuoteError.Unspecified) {
        CalcErr = other.CalcErr;
      }
      if (other.CalcSource != global::Spiderrock.Protobuf.CalcSource.Unspecified) {
        CalcSource = other.CalcSource;
      }
      if (other.SrcTimestamp != 0L) {
        SrcTimestamp = other.SrcTimestamp;
      }
      if (other.NetTimestamp != 0L) {
        NetTimestamp = other.NetTimestamp;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.LiveImpliedQuote.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 829: {
            UPrc = input.ReadFloat();
            break;
          }
          case 853: {
            UOff = input.ReadFloat();
            break;
          }
          case 877: {
            Years = input.ReadFloat();
            break;
          }
          case 901: {
            XAxis = input.ReadFloat();
            break;
          }
          case 925: {
            Rate = input.ReadFloat();
            break;
          }
          case 949: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 973: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 997: {
            OBid = input.ReadFloat();
            break;
          }
          case 1021: {
            OAsk = input.ReadFloat();
            break;
          }
          case 1045: {
            OBidIv = input.ReadFloat();
            break;
          }
          case 1069: {
            OAskIv = input.ReadFloat();
            break;
          }
          case 1093: {
            AtmVol = input.ReadFloat();
            break;
          }
          case 1117: {
            SVol = input.ReadFloat();
            break;
          }
          case 1141: {
            SPrc = input.ReadFloat();
            break;
          }
          case 1165: {
            SMark = input.ReadFloat();
            break;
          }
          case 1189: {
            VeSlope = input.ReadFloat();
            break;
          }
          case 1213: {
            De = input.ReadFloat();
            break;
          }
          case 1237: {
            Ga = input.ReadFloat();
            break;
          }
          case 1261: {
            Th = input.ReadFloat();
            break;
          }
          case 1285: {
            Ve = input.ReadFloat();
            break;
          }
          case 1309: {
            Va = input.ReadFloat();
            break;
          }
          case 1333: {
            Vo = input.ReadFloat();
            break;
          }
          case 1357: {
            Ro = input.ReadFloat();
            break;
          }
          case 1381: {
            Ph = input.ReadFloat();
            break;
          }
          case 1405: {
            DeDecay = input.ReadFloat();
            break;
          }
          case 1429: {
            Up50 = input.ReadFloat();
            break;
          }
          case 1453: {
            Dn50 = input.ReadFloat();
            break;
          }
          case 1477: {
            Up15 = input.ReadFloat();
            break;
          }
          case 1501: {
            Dn15 = input.ReadFloat();
            break;
          }
          case 1525: {
            Up06 = input.ReadFloat();
            break;
          }
          case 1549: {
            Dn08 = input.ReadFloat();
            break;
          }
          case 1573: {
            SpotUPrc = input.ReadFloat();
            break;
          }
          case 1592: {
            PriceType = (global::Spiderrock.Protobuf.CalcPriceType) input.ReadEnum();
            break;
          }
          case 1616: {
            CalcErr = (global::Spiderrock.Protobuf.ImpliedQuoteError) input.ReadEnum();
            break;
          }
          case 1640: {
            CalcSource = (global::Spiderrock.Protobuf.CalcSource) input.ReadEnum();
            break;
          }
          case 1664: {
            SrcTimestamp = input.ReadInt64();
            break;
          }
          case 1688: {
            NetTimestamp = input.ReadInt64();
            break;
          }
          case 1714: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.LiveImpliedQuote.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 829: {
            UPrc = input.ReadFloat();
            break;
          }
          case 853: {
            UOff = input.ReadFloat();
            break;
          }
          case 877: {
            Years = input.ReadFloat();
            break;
          }
          case 901: {
            XAxis = input.ReadFloat();
            break;
          }
          case 925: {
            Rate = input.ReadFloat();
            break;
          }
          case 949: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 973: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 997: {
            OBid = input.ReadFloat();
            break;
          }
          case 1021: {
            OAsk = input.ReadFloat();
            break;
          }
          case 1045: {
            OBidIv = input.ReadFloat();
            break;
          }
          case 1069: {
            OAskIv = input.ReadFloat();
            break;
          }
          case 1093: {
            AtmVol = input.ReadFloat();
            break;
          }
          case 1117: {
            SVol = input.ReadFloat();
            break;
          }
          case 1141: {
            SPrc = input.ReadFloat();
            break;
          }
          case 1165: {
            SMark = input.ReadFloat();
            break;
          }
          case 1189: {
            VeSlope = input.ReadFloat();
            break;
          }
          case 1213: {
            De = input.ReadFloat();
            break;
          }
          case 1237: {
            Ga = input.ReadFloat();
            break;
          }
          case 1261: {
            Th = input.ReadFloat();
            break;
          }
          case 1285: {
            Ve = input.ReadFloat();
            break;
          }
          case 1309: {
            Va = input.ReadFloat();
            break;
          }
          case 1333: {
            Vo = input.ReadFloat();
            break;
          }
          case 1357: {
            Ro = input.ReadFloat();
            break;
          }
          case 1381: {
            Ph = input.ReadFloat();
            break;
          }
          case 1405: {
            DeDecay = input.ReadFloat();
            break;
          }
          case 1429: {
            Up50 = input.ReadFloat();
            break;
          }
          case 1453: {
            Dn50 = input.ReadFloat();
            break;
          }
          case 1477: {
            Up15 = input.ReadFloat();
            break;
          }
          case 1501: {
            Dn15 = input.ReadFloat();
            break;
          }
          case 1525: {
            Up06 = input.ReadFloat();
            break;
          }
          case 1549: {
            Dn08 = input.ReadFloat();
            break;
          }
          case 1573: {
            SpotUPrc = input.ReadFloat();
            break;
          }
          case 1592: {
            PriceType = (global::Spiderrock.Protobuf.CalcPriceType) input.ReadEnum();
            break;
          }
          case 1616: {
            CalcErr = (global::Spiderrock.Protobuf.ImpliedQuoteError) input.ReadEnum();
            break;
          }
          case 1640: {
            CalcSource = (global::Spiderrock.Protobuf.CalcSource) input.ReadEnum();
            break;
          }
          case 1664: {
            SrcTimestamp = input.ReadInt64();
            break;
          }
          case 1688: {
            NetTimestamp = input.ReadInt64();
            break;
          }
          case 1714: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the LiveImpliedQuote message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.LiveImpliedQuote.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          okey_ = other.okey_ != null ? other.okey_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "okey" field.</summary>
        public const int OkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.OptionKey okey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.OptionKey Okey {
          get { return okey_; }
          set {
            okey_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Okey, other.Okey)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (okey_ != null) hash ^= Okey.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (okey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Okey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (okey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Okey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (okey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Okey);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.okey_ != null) {
            if (okey_ == null) {
              Okey = new global::Spiderrock.Protobuf.OptionKey();
            }
            Okey.MergeFrom(other.Okey);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (okey_ == null) {
                  Okey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(Okey);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (okey_ == null) {
                  Okey = new global::Spiderrock.Protobuf.OptionKey();
                }
                input.ReadMessage(Okey);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
