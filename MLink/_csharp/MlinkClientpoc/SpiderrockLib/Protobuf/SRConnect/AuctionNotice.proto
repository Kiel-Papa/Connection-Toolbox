syntax = "proto3";

import "spiderrock_common.proto";


package spiderrock.protobuf;


    
message AuctionNotice {
    message PKey {
        
        int64 notice_number = 10;
    }

    message DirectedCounterParty {
        
        string client_firm = 159;
        InclExclDisclose incl_excl = 160;
        YesNo is_comm_paying = 161;
    }

    message OrderLegs {
        
        OptionKey sec_key = 132;
        SpdrKeyType sec_type = 133;
        BuySell side = 134;
        uint32 ratio = 135;
        int32 und_per_cn = 136;
        float point_value = 137;
        ExpiryType exp_type = 138;
        float years = 139; // SR volatility years to expiry
        float rate = 140; // SR global (discount) rate to expiry
        float atm_vol = 141; // ATM (fwd uPrc) SR surface volatility
        float ddiv_pv = 142; // SR present value of ddiv stream
        float t_vol = 143; // client theo surface volatility (if client surfaces uploaded to SR)
        float s_vol = 144; // SR Surface Volatility
        float s_div = 145; // SR Surface SDiv
        float s_prc = 146; // SR Surface Price
        float de = 147;
        float ga = 148;
        float th = 149;
        float ve = 150;
        float o_bid = 151; // NBBO bid price
        int32 o_bid_sz = 152; // cumulative NBBO bid size
        uint32 o_bid_mask = 153; // bit-mask of participating NBBO exchanges
        float o_ask = 154; // NBBO ask price
        int32 o_ask_sz = 155; // cumulative NBBO ask size
        uint32 o_ask_mask = 156; // bit-mask of participating NBBO exchanges
    }


    MessageMetadata _meta = 1;
    
    PKey pkey = 2;
    AuctionType auction_type = 100;
    AuctionEvent auction_event = 101;
    string auction_code = 102; // short auction code (only for block auctions)
    AuctionSource auction_source = 103; // source of the auction notice (eg. SRC, MIAX, etc.)
    YesNo is_test_auction = 104; // if yes, auction is a test auction (not a prod/live auction)
    string short_code = 105; // 8 letter auction short code (unique per day) (block auctions only) (can be used to find auctions on SR tools)
    DateKey trade_date = 106;
    TickerKey ticker = 107; // underlier ticker
    string industry = 108; // industry string
    SymbolType symbol_type = 109;
    float u_avg_daily_vlm = 110; // underlier average daily trading volume
    BuySell cust_side = 111;
    int32 cust_qty = 112;
    double cust_prc = 113; // public cust price
    YesNo has_cust_prc = 114;
    string cust_client_firm = 115; // cust client firm (if disclosed)
    float comm_enhancement = 116; // additional commission (if any) paid by responder
    YesNo cust_comm_paying = 117; // client is commission paying (to the responder)
    CustQtyCond cust_qty_cond = 118; // UpToQty, AllOrNone, QtyOrMore
    int32 auction_duration = 119; // [expected] auction duration (in milliseconds)
    int32 num_opt_legs = 120;
    ToolSpreadClass spread_class = 121;
    SpreadFlavor spread_flavor = 122;
    YesNo contains_hedge = 123;
    double u_bid = 124;
    double u_ask = 125;
    int64 net_timestamp = 126;
    float net_vega = 127;
    float net_delta = 128;
    float net_gamma = 129;
    float pkg_surf_prc = 130; // SR Surface Price (entire package)
    InclExclDisclose include_sRNetwork = 157;
    repeated DirectedCounterParty directed_counter_party = 158;
    repeated OrderLegs order_legs = 131;
}


