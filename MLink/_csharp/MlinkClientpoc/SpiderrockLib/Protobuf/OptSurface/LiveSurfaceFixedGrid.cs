// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/OptSurface/LiveSurfaceFixedGrid.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/OptSurface/LiveSurfaceFixedGrid.proto</summary>
  public static partial class LiveSurfaceFixedGridReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/OptSurface/LiveSurfaceFixedGrid.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LiveSurfaceFixedGridReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5Qcm90b2J1Zi9PcHRTdXJmYWNlL0xpdmVTdXJmYWNlRml4ZWRHcmlkLnBy",
            "b3RvEhNzcGlkZXJyb2NrLnByb3RvYnVmGhdzcGlkZXJyb2NrX2NvbW1vbi5w",
            "cm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byLzBgoUTGl2",
            "ZVN1cmZhY2VGaXhlZEdyaWQSMwoFX21ldGEYASABKAsyJC5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLk1lc3NhZ2VNZXRhZGF0YRI8CgRwa2V5GAIgASgLMi4uc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5MaXZlU3VyZmFjZUZpeGVkR3JpZC5QS2V5EgwK",
            "BGRhdGUYZCABKAkSDAoEdGltZRhnIAEoCRINCgVzX2RpdhhqIAEoAhIQCghm",
            "d2RfdVByYxhtIAEoAhINCgVlX2NudBhwIAEoBRIOCgZlX21vdmUYcyABKAIS",
            "EwoLZV9tb3ZlX2hpc3QYdiABKAISDwoHdm9sX2Q0NRh5IAEoAhIPCgd2b2xf",
            "ZDQwGHwgASgCEg8KB3ZvbF9kMzUYfyABKAISEAoHdm9sX2QzMBiCASABKAIS",
            "EAoHdm9sX2QyNRiFASABKAISEAoHdm9sX2QyMBiIASABKAISEAoHdm9sX2Qx",
            "NRiLASABKAISEAoHdm9sX2QxMBiOASABKAISEAoHdm9sX2QwNRiRASABKAIS",
            "EAoHdm9sX2EwMBiUASABKAISEAoHdm9sX3UwNRiXASABKAISEAoHdm9sX3Ux",
            "MBiaASABKAISEAoHdm9sX3UxNRidASABKAISEAoHdm9sX3UyMBigASABKAIS",
            "EAoHdm9sX3UyNRijASABKAISEAoHdm9sX3UzMBimASABKAISEAoHdm9sX3Uz",
            "NRipASABKAISEAoHdm9sX3U0MBisASABKAISEAoHdm9sX3U0NRivASABKAIS",
            "EAoHdl93aWR0aBiyASABKAISEAoHdl9zbG9wZRi1ASABKAISEQoIbG9feWVh",
            "cnMYuAEgASgCEhEKCGhpX3llYXJzGLsBIAEoAhISCgltaW5fZGVsdGEYvgEg",
            "ASgCEhIKCW1heF9kZWx0YRjBASABKAISLgoJdGltZXN0YW1wGMQBIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAagQEKBFBLZXkSLgoGdGlja2Vy",
            "GAogASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5UaWNrZXJLZXkSDAoEZGF5",
            "cxgLIAEoBRI7CgxzdXJmYWNlX3R5cGUYDCABKA4yJS5zcGlkZXJyb2NrLnBy",
            "b3RvYnVmLlN1cmZhY2VDdXJ2ZVR5cGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveSurfaceFixedGrid), global::Spiderrock.Protobuf.LiveSurfaceFixedGrid.Parser, new[]{ "Meta", "Pkey", "Date", "Time", "SDiv", "FwdUPrc", "ECnt", "EMove", "EMoveHist", "VolD45", "VolD40", "VolD35", "VolD30", "VolD25", "VolD20", "VolD15", "VolD10", "VolD05", "VolA00", "VolU05", "VolU10", "VolU15", "VolU20", "VolU25", "VolU30", "VolU35", "VolU40", "VolU45", "VWidth", "VSlope", "LoYears", "HiYears", "MinDelta", "MaxDelta", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveSurfaceFixedGrid.Types.PKey), global::Spiderrock.Protobuf.LiveSurfaceFixedGrid.Types.PKey.Parser, new[]{ "Ticker", "Days", "SurfaceType" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///This table contains a live grided (interpolated) censored implied volatility surface.  Each record contains standarized live and prior period implied volatilities at standarized skew points for a standardized days-to-expiration value.
  ///LiveSurfaceGrid records are published to the SpiderRock elastic cluster nightly.
  /// </summary>
  public sealed partial class LiveSurfaceFixedGrid : pb::IMessage<LiveSurfaceFixedGrid>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LiveSurfaceFixedGrid> _parser = new pb::MessageParser<LiveSurfaceFixedGrid>(() => new LiveSurfaceFixedGrid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LiveSurfaceFixedGrid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.LiveSurfaceFixedGridReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveSurfaceFixedGrid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveSurfaceFixedGrid(LiveSurfaceFixedGrid other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      date_ = other.date_;
      time_ = other.time_;
      sDiv_ = other.sDiv_;
      fwdUPrc_ = other.fwdUPrc_;
      eCnt_ = other.eCnt_;
      eMove_ = other.eMove_;
      eMoveHist_ = other.eMoveHist_;
      volD45_ = other.volD45_;
      volD40_ = other.volD40_;
      volD35_ = other.volD35_;
      volD30_ = other.volD30_;
      volD25_ = other.volD25_;
      volD20_ = other.volD20_;
      volD15_ = other.volD15_;
      volD10_ = other.volD10_;
      volD05_ = other.volD05_;
      volA00_ = other.volA00_;
      volU05_ = other.volU05_;
      volU10_ = other.volU10_;
      volU15_ = other.volU15_;
      volU20_ = other.volU20_;
      volU25_ = other.volU25_;
      volU30_ = other.volU30_;
      volU35_ = other.volU35_;
      volU40_ = other.volU40_;
      volU45_ = other.volU45_;
      vWidth_ = other.vWidth_;
      vSlope_ = other.vSlope_;
      loYears_ = other.loYears_;
      hiYears_ = other.hiYears_;
      minDelta_ = other.minDelta_;
      maxDelta_ = other.maxDelta_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveSurfaceFixedGrid Clone() {
      return new LiveSurfaceFixedGrid(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.LiveSurfaceFixedGrid.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.LiveSurfaceFixedGrid.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 100;
    private string date_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Date {
      get { return date_; }
      set {
        date_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 103;
    private string time_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "s_div" field.</summary>
    public const int SDivFieldNumber = 106;
    private float sDiv_;
    /// <summary>
    /// Interpolated implied sdiv rate (from LiveSurfaceFixedTerm.sDiv_N)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SDiv {
      get { return sDiv_; }
      set {
        sDiv_ = value;
      }
    }

    /// <summary>Field number for the "fwd_uPrc" field.</summary>
    public const int FwdUPrcFieldNumber = 109;
    private float fwdUPrc_;
    /// <summary>
    /// Interpolated implied forward price (from LiveSurfaceFixedTerm.fwdUPrc_N)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FwdUPrc {
      get { return fwdUPrc_; }
      set {
        fwdUPrc_ = value;
      }
    }

    /// <summary>Field number for the "e_cnt" field.</summary>
    public const int ECntFieldNumber = 112;
    private int eCnt_;
    /// <summary>
    /// Number of expected earnings dates (from LiveSurfaceFixedTerm.eCnt_N)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ECnt {
      get { return eCnt_; }
      set {
        eCnt_ = value;
      }
    }

    /// <summary>Field number for the "e_move" field.</summary>
    public const int EMoveFieldNumber = 115;
    private float eMove_;
    /// <summary>
    /// Implied earnings move (from LiveSurfaceFixedTerm.eMove)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EMove {
      get { return eMove_; }
      set {
        eMove_ = value;
      }
    }

    /// <summary>Field number for the "e_move_hist" field.</summary>
    public const int EMoveHistFieldNumber = 118;
    private float eMoveHist_;
    /// <summary>
    /// Historical earnings move (from LiveSurfaceFixedTerm.eMoveHist)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EMoveHist {
      get { return eMoveHist_; }
      set {
        eMoveHist_ = value;
      }
    }

    /// <summary>Field number for the "vol_d45" field.</summary>
    public const int VolD45FieldNumber = 121;
    private float volD45_;
    /// <summary>
    /// xde = -45	    (censored volatility)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolD45 {
      get { return volD45_; }
      set {
        volD45_ = value;
      }
    }

    /// <summary>Field number for the "vol_d40" field.</summary>
    public const int VolD40FieldNumber = 124;
    private float volD40_;
    /// <summary>
    /// xde = -40
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolD40 {
      get { return volD40_; }
      set {
        volD40_ = value;
      }
    }

    /// <summary>Field number for the "vol_d35" field.</summary>
    public const int VolD35FieldNumber = 127;
    private float volD35_;
    /// <summary>
    /// xde = -35
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolD35 {
      get { return volD35_; }
      set {
        volD35_ = value;
      }
    }

    /// <summary>Field number for the "vol_d30" field.</summary>
    public const int VolD30FieldNumber = 130;
    private float volD30_;
    /// <summary>
    /// xde = -30
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolD30 {
      get { return volD30_; }
      set {
        volD30_ = value;
      }
    }

    /// <summary>Field number for the "vol_d25" field.</summary>
    public const int VolD25FieldNumber = 133;
    private float volD25_;
    /// <summary>
    /// xde = -25
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolD25 {
      get { return volD25_; }
      set {
        volD25_ = value;
      }
    }

    /// <summary>Field number for the "vol_d20" field.</summary>
    public const int VolD20FieldNumber = 136;
    private float volD20_;
    /// <summary>
    /// xde = -20
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolD20 {
      get { return volD20_; }
      set {
        volD20_ = value;
      }
    }

    /// <summary>Field number for the "vol_d15" field.</summary>
    public const int VolD15FieldNumber = 139;
    private float volD15_;
    /// <summary>
    /// xde = -15
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolD15 {
      get { return volD15_; }
      set {
        volD15_ = value;
      }
    }

    /// <summary>Field number for the "vol_d10" field.</summary>
    public const int VolD10FieldNumber = 142;
    private float volD10_;
    /// <summary>
    /// xde = -10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolD10 {
      get { return volD10_; }
      set {
        volD10_ = value;
      }
    }

    /// <summary>Field number for the "vol_d05" field.</summary>
    public const int VolD05FieldNumber = 145;
    private float volD05_;
    /// <summary>
    /// xde = -5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolD05 {
      get { return volD05_; }
      set {
        volD05_ = value;
      }
    }

    /// <summary>Field number for the "vol_a00" field.</summary>
    public const int VolA00FieldNumber = 148;
    private float volA00_;
    /// <summary>
    /// xde = 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolA00 {
      get { return volA00_; }
      set {
        volA00_ = value;
      }
    }

    /// <summary>Field number for the "vol_u05" field.</summary>
    public const int VolU05FieldNumber = 151;
    private float volU05_;
    /// <summary>
    /// xde = +5
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolU05 {
      get { return volU05_; }
      set {
        volU05_ = value;
      }
    }

    /// <summary>Field number for the "vol_u10" field.</summary>
    public const int VolU10FieldNumber = 154;
    private float volU10_;
    /// <summary>
    /// xde = +10
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolU10 {
      get { return volU10_; }
      set {
        volU10_ = value;
      }
    }

    /// <summary>Field number for the "vol_u15" field.</summary>
    public const int VolU15FieldNumber = 157;
    private float volU15_;
    /// <summary>
    /// xde = +15
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolU15 {
      get { return volU15_; }
      set {
        volU15_ = value;
      }
    }

    /// <summary>Field number for the "vol_u20" field.</summary>
    public const int VolU20FieldNumber = 160;
    private float volU20_;
    /// <summary>
    /// xde = +20
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolU20 {
      get { return volU20_; }
      set {
        volU20_ = value;
      }
    }

    /// <summary>Field number for the "vol_u25" field.</summary>
    public const int VolU25FieldNumber = 163;
    private float volU25_;
    /// <summary>
    /// xde = +25
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolU25 {
      get { return volU25_; }
      set {
        volU25_ = value;
      }
    }

    /// <summary>Field number for the "vol_u30" field.</summary>
    public const int VolU30FieldNumber = 166;
    private float volU30_;
    /// <summary>
    /// xde = +30
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolU30 {
      get { return volU30_; }
      set {
        volU30_ = value;
      }
    }

    /// <summary>Field number for the "vol_u35" field.</summary>
    public const int VolU35FieldNumber = 169;
    private float volU35_;
    /// <summary>
    /// xde = +35
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolU35 {
      get { return volU35_; }
      set {
        volU35_ = value;
      }
    }

    /// <summary>Field number for the "vol_u40" field.</summary>
    public const int VolU40FieldNumber = 172;
    private float volU40_;
    /// <summary>
    /// xde = +40
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolU40 {
      get { return volU40_; }
      set {
        volU40_ = value;
      }
    }

    /// <summary>Field number for the "vol_u45" field.</summary>
    public const int VolU45FieldNumber = 175;
    private float volU45_;
    /// <summary>
    /// xde = +45
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolU45 {
      get { return volU45_; }
      set {
        volU45_ = value;
      }
    }

    /// <summary>Field number for the "v_width" field.</summary>
    public const int VWidthFieldNumber = 178;
    private float vWidth_;
    /// <summary>
    /// atm volatility width (from LiveSurfaceFixedTerm.vWidth_N)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VWidth {
      get { return vWidth_; }
      set {
        vWidth_ = value;
      }
    }

    /// <summary>Field number for the "v_slope" field.</summary>
    public const int VSlopeFieldNumber = 181;
    private float vSlope_;
    /// <summary>
    /// atm volatility slope (from LiveSurfaceFixedTerm.vSlope_N)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VSlope {
      get { return vSlope_; }
      set {
        vSlope_ = value;
      }
    }

    /// <summary>Field number for the "lo_years" field.</summary>
    public const int LoYearsFieldNumber = 184;
    private float loYears_;
    /// <summary>
    /// LiveSurfaceCurve.years before days [-1 = none]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LoYears {
      get { return loYears_; }
      set {
        loYears_ = value;
      }
    }

    /// <summary>Field number for the "hi_years" field.</summary>
    public const int HiYearsFieldNumber = 187;
    private float hiYears_;
    /// <summary>
    /// LiveSurfaceCurve.years after days	[-1 = none]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HiYears {
      get { return hiYears_; }
      set {
        hiYears_ = value;
      }
    }

    /// <summary>Field number for the "min_delta" field.</summary>
    public const int MinDeltaFieldNumber = 190;
    private float minDelta_;
    /// <summary>
    /// minimum valid strike delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinDelta {
      get { return minDelta_; }
      set {
        minDelta_ = value;
      }
    }

    /// <summary>Field number for the "max_delta" field.</summary>
    public const int MaxDeltaFieldNumber = 193;
    private float maxDelta_;
    /// <summary>
    /// maximum valid strike delta
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxDelta {
      get { return maxDelta_; }
      set {
        maxDelta_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 196;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// surface fit timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LiveSurfaceFixedGrid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LiveSurfaceFixedGrid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (Date != other.Date) return false;
      if (Time != other.Time) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SDiv, other.SDiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FwdUPrc, other.FwdUPrc)) return false;
      if (ECnt != other.ECnt) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EMove, other.EMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EMoveHist, other.EMoveHist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolD45, other.VolD45)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolD40, other.VolD40)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolD35, other.VolD35)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolD30, other.VolD30)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolD25, other.VolD25)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolD20, other.VolD20)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolD15, other.VolD15)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolD10, other.VolD10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolD05, other.VolD05)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolA00, other.VolA00)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolU05, other.VolU05)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolU10, other.VolU10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolU15, other.VolU15)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolU20, other.VolU20)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolU25, other.VolU25)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolU30, other.VolU30)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolU35, other.VolU35)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolU40, other.VolU40)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolU45, other.VolU45)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VWidth, other.VWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VSlope, other.VSlope)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LoYears, other.LoYears)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HiYears, other.HiYears)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinDelta, other.MinDelta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxDelta, other.MaxDelta)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (Date.Length != 0) hash ^= Date.GetHashCode();
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (SDiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SDiv);
      if (FwdUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FwdUPrc);
      if (ECnt != 0) hash ^= ECnt.GetHashCode();
      if (EMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EMove);
      if (EMoveHist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EMoveHist);
      if (VolD45 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolD45);
      if (VolD40 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolD40);
      if (VolD35 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolD35);
      if (VolD30 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolD30);
      if (VolD25 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolD25);
      if (VolD20 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolD20);
      if (VolD15 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolD15);
      if (VolD10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolD10);
      if (VolD05 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolD05);
      if (VolA00 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolA00);
      if (VolU05 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolU05);
      if (VolU10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolU10);
      if (VolU15 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolU15);
      if (VolU20 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolU20);
      if (VolU25 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolU25);
      if (VolU30 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolU30);
      if (VolU35 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolU35);
      if (VolU40 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolU40);
      if (VolU45 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolU45);
      if (VWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VWidth);
      if (VSlope != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VSlope);
      if (LoYears != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LoYears);
      if (HiYears != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HiYears);
      if (MinDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinDelta);
      if (MaxDelta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxDelta);
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Date);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(Time);
      }
      if (SDiv != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(SDiv);
      }
      if (FwdUPrc != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(FwdUPrc);
      }
      if (ECnt != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(ECnt);
      }
      if (EMove != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(EMove);
      }
      if (EMoveHist != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(EMoveHist);
      }
      if (VolD45 != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(VolD45);
      }
      if (VolD40 != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(VolD40);
      }
      if (VolD35 != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(VolD35);
      }
      if (VolD30 != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(VolD30);
      }
      if (VolD25 != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(VolD25);
      }
      if (VolD20 != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(VolD20);
      }
      if (VolD15 != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(VolD15);
      }
      if (VolD10 != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(VolD10);
      }
      if (VolD05 != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(VolD05);
      }
      if (VolA00 != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(VolA00);
      }
      if (VolU05 != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(VolU05);
      }
      if (VolU10 != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(VolU10);
      }
      if (VolU15 != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(VolU15);
      }
      if (VolU20 != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(VolU20);
      }
      if (VolU25 != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(VolU25);
      }
      if (VolU30 != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(VolU30);
      }
      if (VolU35 != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(VolU35);
      }
      if (VolU40 != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(VolU40);
      }
      if (VolU45 != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(VolU45);
      }
      if (VWidth != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(VWidth);
      }
      if (VSlope != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(VSlope);
      }
      if (LoYears != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(LoYears);
      }
      if (HiYears != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(HiYears);
      }
      if (MinDelta != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(MinDelta);
      }
      if (MaxDelta != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(MaxDelta);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(162, 12);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (Date.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Date);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(Time);
      }
      if (SDiv != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(SDiv);
      }
      if (FwdUPrc != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(FwdUPrc);
      }
      if (ECnt != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(ECnt);
      }
      if (EMove != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(EMove);
      }
      if (EMoveHist != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(EMoveHist);
      }
      if (VolD45 != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(VolD45);
      }
      if (VolD40 != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(VolD40);
      }
      if (VolD35 != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(VolD35);
      }
      if (VolD30 != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(VolD30);
      }
      if (VolD25 != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(VolD25);
      }
      if (VolD20 != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(VolD20);
      }
      if (VolD15 != 0F) {
        output.WriteRawTag(221, 8);
        output.WriteFloat(VolD15);
      }
      if (VolD10 != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(VolD10);
      }
      if (VolD05 != 0F) {
        output.WriteRawTag(141, 9);
        output.WriteFloat(VolD05);
      }
      if (VolA00 != 0F) {
        output.WriteRawTag(165, 9);
        output.WriteFloat(VolA00);
      }
      if (VolU05 != 0F) {
        output.WriteRawTag(189, 9);
        output.WriteFloat(VolU05);
      }
      if (VolU10 != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(VolU10);
      }
      if (VolU15 != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(VolU15);
      }
      if (VolU20 != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(VolU20);
      }
      if (VolU25 != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(VolU25);
      }
      if (VolU30 != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(VolU30);
      }
      if (VolU35 != 0F) {
        output.WriteRawTag(205, 10);
        output.WriteFloat(VolU35);
      }
      if (VolU40 != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(VolU40);
      }
      if (VolU45 != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(VolU45);
      }
      if (VWidth != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(VWidth);
      }
      if (VSlope != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(VSlope);
      }
      if (LoYears != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(LoYears);
      }
      if (HiYears != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(HiYears);
      }
      if (MinDelta != 0F) {
        output.WriteRawTag(245, 11);
        output.WriteFloat(MinDelta);
      }
      if (MaxDelta != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(MaxDelta);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(162, 12);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (Date.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Date);
      }
      if (Time.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (SDiv != 0F) {
        size += 2 + 4;
      }
      if (FwdUPrc != 0F) {
        size += 2 + 4;
      }
      if (ECnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ECnt);
      }
      if (EMove != 0F) {
        size += 2 + 4;
      }
      if (EMoveHist != 0F) {
        size += 2 + 4;
      }
      if (VolD45 != 0F) {
        size += 2 + 4;
      }
      if (VolD40 != 0F) {
        size += 2 + 4;
      }
      if (VolD35 != 0F) {
        size += 2 + 4;
      }
      if (VolD30 != 0F) {
        size += 2 + 4;
      }
      if (VolD25 != 0F) {
        size += 2 + 4;
      }
      if (VolD20 != 0F) {
        size += 2 + 4;
      }
      if (VolD15 != 0F) {
        size += 2 + 4;
      }
      if (VolD10 != 0F) {
        size += 2 + 4;
      }
      if (VolD05 != 0F) {
        size += 2 + 4;
      }
      if (VolA00 != 0F) {
        size += 2 + 4;
      }
      if (VolU05 != 0F) {
        size += 2 + 4;
      }
      if (VolU10 != 0F) {
        size += 2 + 4;
      }
      if (VolU15 != 0F) {
        size += 2 + 4;
      }
      if (VolU20 != 0F) {
        size += 2 + 4;
      }
      if (VolU25 != 0F) {
        size += 2 + 4;
      }
      if (VolU30 != 0F) {
        size += 2 + 4;
      }
      if (VolU35 != 0F) {
        size += 2 + 4;
      }
      if (VolU40 != 0F) {
        size += 2 + 4;
      }
      if (VolU45 != 0F) {
        size += 2 + 4;
      }
      if (VWidth != 0F) {
        size += 2 + 4;
      }
      if (VSlope != 0F) {
        size += 2 + 4;
      }
      if (LoYears != 0F) {
        size += 2 + 4;
      }
      if (HiYears != 0F) {
        size += 2 + 4;
      }
      if (MinDelta != 0F) {
        size += 2 + 4;
      }
      if (MaxDelta != 0F) {
        size += 2 + 4;
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LiveSurfaceFixedGrid other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.LiveSurfaceFixedGrid.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.Date.Length != 0) {
        Date = other.Date;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.SDiv != 0F) {
        SDiv = other.SDiv;
      }
      if (other.FwdUPrc != 0F) {
        FwdUPrc = other.FwdUPrc;
      }
      if (other.ECnt != 0) {
        ECnt = other.ECnt;
      }
      if (other.EMove != 0F) {
        EMove = other.EMove;
      }
      if (other.EMoveHist != 0F) {
        EMoveHist = other.EMoveHist;
      }
      if (other.VolD45 != 0F) {
        VolD45 = other.VolD45;
      }
      if (other.VolD40 != 0F) {
        VolD40 = other.VolD40;
      }
      if (other.VolD35 != 0F) {
        VolD35 = other.VolD35;
      }
      if (other.VolD30 != 0F) {
        VolD30 = other.VolD30;
      }
      if (other.VolD25 != 0F) {
        VolD25 = other.VolD25;
      }
      if (other.VolD20 != 0F) {
        VolD20 = other.VolD20;
      }
      if (other.VolD15 != 0F) {
        VolD15 = other.VolD15;
      }
      if (other.VolD10 != 0F) {
        VolD10 = other.VolD10;
      }
      if (other.VolD05 != 0F) {
        VolD05 = other.VolD05;
      }
      if (other.VolA00 != 0F) {
        VolA00 = other.VolA00;
      }
      if (other.VolU05 != 0F) {
        VolU05 = other.VolU05;
      }
      if (other.VolU10 != 0F) {
        VolU10 = other.VolU10;
      }
      if (other.VolU15 != 0F) {
        VolU15 = other.VolU15;
      }
      if (other.VolU20 != 0F) {
        VolU20 = other.VolU20;
      }
      if (other.VolU25 != 0F) {
        VolU25 = other.VolU25;
      }
      if (other.VolU30 != 0F) {
        VolU30 = other.VolU30;
      }
      if (other.VolU35 != 0F) {
        VolU35 = other.VolU35;
      }
      if (other.VolU40 != 0F) {
        VolU40 = other.VolU40;
      }
      if (other.VolU45 != 0F) {
        VolU45 = other.VolU45;
      }
      if (other.VWidth != 0F) {
        VWidth = other.VWidth;
      }
      if (other.VSlope != 0F) {
        VSlope = other.VSlope;
      }
      if (other.LoYears != 0F) {
        LoYears = other.LoYears;
      }
      if (other.HiYears != 0F) {
        HiYears = other.HiYears;
      }
      if (other.MinDelta != 0F) {
        MinDelta = other.MinDelta;
      }
      if (other.MaxDelta != 0F) {
        MaxDelta = other.MaxDelta;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.LiveSurfaceFixedGrid.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            Date = input.ReadString();
            break;
          }
          case 826: {
            Time = input.ReadString();
            break;
          }
          case 853: {
            SDiv = input.ReadFloat();
            break;
          }
          case 877: {
            FwdUPrc = input.ReadFloat();
            break;
          }
          case 896: {
            ECnt = input.ReadInt32();
            break;
          }
          case 925: {
            EMove = input.ReadFloat();
            break;
          }
          case 949: {
            EMoveHist = input.ReadFloat();
            break;
          }
          case 973: {
            VolD45 = input.ReadFloat();
            break;
          }
          case 997: {
            VolD40 = input.ReadFloat();
            break;
          }
          case 1021: {
            VolD35 = input.ReadFloat();
            break;
          }
          case 1045: {
            VolD30 = input.ReadFloat();
            break;
          }
          case 1069: {
            VolD25 = input.ReadFloat();
            break;
          }
          case 1093: {
            VolD20 = input.ReadFloat();
            break;
          }
          case 1117: {
            VolD15 = input.ReadFloat();
            break;
          }
          case 1141: {
            VolD10 = input.ReadFloat();
            break;
          }
          case 1165: {
            VolD05 = input.ReadFloat();
            break;
          }
          case 1189: {
            VolA00 = input.ReadFloat();
            break;
          }
          case 1213: {
            VolU05 = input.ReadFloat();
            break;
          }
          case 1237: {
            VolU10 = input.ReadFloat();
            break;
          }
          case 1261: {
            VolU15 = input.ReadFloat();
            break;
          }
          case 1285: {
            VolU20 = input.ReadFloat();
            break;
          }
          case 1309: {
            VolU25 = input.ReadFloat();
            break;
          }
          case 1333: {
            VolU30 = input.ReadFloat();
            break;
          }
          case 1357: {
            VolU35 = input.ReadFloat();
            break;
          }
          case 1381: {
            VolU40 = input.ReadFloat();
            break;
          }
          case 1405: {
            VolU45 = input.ReadFloat();
            break;
          }
          case 1429: {
            VWidth = input.ReadFloat();
            break;
          }
          case 1453: {
            VSlope = input.ReadFloat();
            break;
          }
          case 1477: {
            LoYears = input.ReadFloat();
            break;
          }
          case 1501: {
            HiYears = input.ReadFloat();
            break;
          }
          case 1525: {
            MinDelta = input.ReadFloat();
            break;
          }
          case 1549: {
            MaxDelta = input.ReadFloat();
            break;
          }
          case 1570: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.LiveSurfaceFixedGrid.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            Date = input.ReadString();
            break;
          }
          case 826: {
            Time = input.ReadString();
            break;
          }
          case 853: {
            SDiv = input.ReadFloat();
            break;
          }
          case 877: {
            FwdUPrc = input.ReadFloat();
            break;
          }
          case 896: {
            ECnt = input.ReadInt32();
            break;
          }
          case 925: {
            EMove = input.ReadFloat();
            break;
          }
          case 949: {
            EMoveHist = input.ReadFloat();
            break;
          }
          case 973: {
            VolD45 = input.ReadFloat();
            break;
          }
          case 997: {
            VolD40 = input.ReadFloat();
            break;
          }
          case 1021: {
            VolD35 = input.ReadFloat();
            break;
          }
          case 1045: {
            VolD30 = input.ReadFloat();
            break;
          }
          case 1069: {
            VolD25 = input.ReadFloat();
            break;
          }
          case 1093: {
            VolD20 = input.ReadFloat();
            break;
          }
          case 1117: {
            VolD15 = input.ReadFloat();
            break;
          }
          case 1141: {
            VolD10 = input.ReadFloat();
            break;
          }
          case 1165: {
            VolD05 = input.ReadFloat();
            break;
          }
          case 1189: {
            VolA00 = input.ReadFloat();
            break;
          }
          case 1213: {
            VolU05 = input.ReadFloat();
            break;
          }
          case 1237: {
            VolU10 = input.ReadFloat();
            break;
          }
          case 1261: {
            VolU15 = input.ReadFloat();
            break;
          }
          case 1285: {
            VolU20 = input.ReadFloat();
            break;
          }
          case 1309: {
            VolU25 = input.ReadFloat();
            break;
          }
          case 1333: {
            VolU30 = input.ReadFloat();
            break;
          }
          case 1357: {
            VolU35 = input.ReadFloat();
            break;
          }
          case 1381: {
            VolU40 = input.ReadFloat();
            break;
          }
          case 1405: {
            VolU45 = input.ReadFloat();
            break;
          }
          case 1429: {
            VWidth = input.ReadFloat();
            break;
          }
          case 1453: {
            VSlope = input.ReadFloat();
            break;
          }
          case 1477: {
            LoYears = input.ReadFloat();
            break;
          }
          case 1501: {
            HiYears = input.ReadFloat();
            break;
          }
          case 1525: {
            MinDelta = input.ReadFloat();
            break;
          }
          case 1549: {
            MaxDelta = input.ReadFloat();
            break;
          }
          case 1570: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the LiveSurfaceFixedGrid message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.LiveSurfaceFixedGrid.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
          days_ = other.days_;
          surfaceType_ = other.surfaceType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 10;
        private global::Spiderrock.Protobuf.TickerKey ticker_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Ticker {
          get { return ticker_; }
          set {
            ticker_ = value;
          }
        }

        /// <summary>Field number for the "days" field.</summary>
        public const int DaysFieldNumber = 11;
        private int days_;
        /// <summary>
        /// days to expiration [5, 21, 42, 63, 84, 105, 126, 189, 252, 378, 504]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Days {
          get { return days_; }
          set {
            days_ = value;
          }
        }

        /// <summary>Field number for the "surface_type" field.</summary>
        public const int SurfaceTypeFieldNumber = 12;
        private global::Spiderrock.Protobuf.SurfaceCurveType surfaceType_ = global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SurfaceCurveType SurfaceType {
          get { return surfaceType_; }
          set {
            surfaceType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ticker, other.Ticker)) return false;
          if (Days != other.Days) return false;
          if (SurfaceType != other.SurfaceType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ticker_ != null) hash ^= Ticker.GetHashCode();
          if (Days != 0) hash ^= Days.GetHashCode();
          if (SurfaceType != global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified) hash ^= SurfaceType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (Days != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(Days);
          }
          if (SurfaceType != global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified) {
            output.WriteRawTag(96);
            output.WriteEnum((int) SurfaceType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (Days != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(Days);
          }
          if (SurfaceType != global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified) {
            output.WriteRawTag(96);
            output.WriteEnum((int) SurfaceType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ticker_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
          }
          if (Days != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Days);
          }
          if (SurfaceType != global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SurfaceType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ticker_ != null) {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            Ticker.MergeFrom(other.Ticker);
          }
          if (other.Days != 0) {
            Days = other.Days;
          }
          if (other.SurfaceType != global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified) {
            SurfaceType = other.SurfaceType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 88: {
                Days = input.ReadInt32();
                break;
              }
              case 96: {
                SurfaceType = (global::Spiderrock.Protobuf.SurfaceCurveType) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 88: {
                Days = input.ReadInt32();
                break;
              }
              case 96: {
                SurfaceType = (global::Spiderrock.Protobuf.SurfaceCurveType) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
