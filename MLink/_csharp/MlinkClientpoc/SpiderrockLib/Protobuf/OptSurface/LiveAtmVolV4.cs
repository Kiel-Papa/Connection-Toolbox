// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/OptSurface/LiveAtmVolV4.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/OptSurface/LiveAtmVolV4.proto</summary>
  public static partial class LiveAtmVolV4Reflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/OptSurface/LiveAtmVolV4.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LiveAtmVolV4Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZQcm90b2J1Zi9PcHRTdXJmYWNlL0xpdmVBdG1Wb2xWNC5wcm90bxITc3Bp",
            "ZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24ucHJvdG8aH2dv",
            "b2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8ioAgKDExpdmVBdG1Wb2xW",
            "NBIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2sucHJvdG9idWYuTWVzc2Fn",
            "ZU1ldGFkYXRhEjQKBHBrZXkYAiABKAsyJi5zcGlkZXJyb2NrLnByb3RvYnVm",
            "LkxpdmVBdG1Wb2xWNC5QS2V5Ei4KBnRpY2tlchhkIAEoCzIeLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuVGlja2VyS2V5Eg0KBXVfcHJjGGcgASgBEg0KBXllYXJz",
            "GGogASgCEgwKBHJhdGUYbSABKAISDAoEZGRpdhhwIAEoAhIPCgdkZGl2X3B2",
            "GHMgASgCEjQKC2RkaXZfc291cmNlGHYgASgOMh8uc3BpZGVycm9jay5wcm90",
            "b2J1Zi5ERGl2U291cmNlEg8KB2F0bV92b2wYeSABKAISDwoHYXRtX2VNQRh8",
            "IAEoAhITCgt1X3ByY19yYXRpbxh/IAEoARIYCg91X3ByY19yYXRpb19lTUEY",
            "ggEgASgBEg0KBHNkaXYYhQEgASgCEhEKCHNkaXZfZU1BGIgBIAEoAhIWCg1t",
            "aW5fY1BBZGpfdmFsGIsBIAEoARIWCg1tYXhfY1BBZGpfdmFsGI4BIAEoARI0",
            "CgtjcF9hZGpfdHlwZRiRASABKA4yHi5zcGlkZXJyb2NrLnByb3RvYnVmLkNQ",
            "QWRqVHlwZRI3CgpwcmljZV90eXBlGJQBIAEoDjIiLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuQ2FsY1ByaWNlVHlwZRI5ChB1X3ByY19kcml2ZXJfa2V5GJcBIAEo",
            "CzIeLnNwaWRlcnJvY2sucHJvdG9idWYuRXhwaXJ5S2V5EjwKEXVfcHJjX2Ry",
            "aXZlcl90eXBlGJoBIAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuU3Bkcktl",
            "eVR5cGUSFQoMdV9wcmNfZHJpdmVyGJ0BIAEoARITCgpheGlzX2ZVUHJjGKAB",
            "IAEoAhISCglzcG90X3VQcmMYowEgASgBEhAKB3Zfd2lkdGgYpgEgASgCEhgK",
            "D251bV9hdG1fc3RyaWtlcxipASABKAUSPwoQdHJhZGVhYmxlX3N0YXR1cxis",
            "ASABKA4yJC5zcGlkZXJyb2NrLnByb3RvYnVmLlRyYWRlYWJsZVN0YXR1cxI+",
            "Cg5zdXJmYWNlX3Jlc3VsdBivASABKA4yJS5zcGlkZXJyb2NrLnByb3RvYnVm",
            "LlN1cmZhY2VBZGpSZXN1bHQSFgoNbmV0X3RpbWVzdGFtcBiyASABKAMSLgoJ",
            "dGltZXN0YW1wGLUBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAa",
            "NAoEUEtleRIsCgRla2V5GAogASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5F",
            "eHBpcnlLZXliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveAtmVolV4), global::Spiderrock.Protobuf.LiveAtmVolV4.Parser, new[]{ "Meta", "Pkey", "Ticker", "UPrc", "Years", "Rate", "Ddiv", "DdivPv", "DdivSource", "AtmVol", "AtmEMA", "UPrcRatio", "UPrcRatioEMA", "Sdiv", "SdivEMA", "MinCPAdjVal", "MaxCPAdjVal", "CpAdjType", "PriceType", "UPrcDriverKey", "UPrcDriverType", "UPrcDriver", "AxisFUPrc", "SpotUPrc", "VWidth", "NumAtmStrikes", "TradeableStatus", "SurfaceResult", "NetTimestamp", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveAtmVolV4.Types.PKey), global::Spiderrock.Protobuf.LiveAtmVolV4.Types.PKey.Parser, new[]{ "Ekey" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///LiveAtmVol records are computed and publish continuously during trading hours
  /// </summary>
  public sealed partial class LiveAtmVolV4 : pb::IMessage<LiveAtmVolV4>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LiveAtmVolV4> _parser = new pb::MessageParser<LiveAtmVolV4>(() => new LiveAtmVolV4());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LiveAtmVolV4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.LiveAtmVolV4Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveAtmVolV4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveAtmVolV4(LiveAtmVolV4 other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      uPrc_ = other.uPrc_;
      years_ = other.years_;
      rate_ = other.rate_;
      ddiv_ = other.ddiv_;
      ddivPv_ = other.ddivPv_;
      ddivSource_ = other.ddivSource_;
      atmVol_ = other.atmVol_;
      atmEMA_ = other.atmEMA_;
      uPrcRatio_ = other.uPrcRatio_;
      uPrcRatioEMA_ = other.uPrcRatioEMA_;
      sdiv_ = other.sdiv_;
      sdivEMA_ = other.sdivEMA_;
      minCPAdjVal_ = other.minCPAdjVal_;
      maxCPAdjVal_ = other.maxCPAdjVal_;
      cpAdjType_ = other.cpAdjType_;
      priceType_ = other.priceType_;
      uPrcDriverKey_ = other.uPrcDriverKey_ != null ? other.uPrcDriverKey_.Clone() : null;
      uPrcDriverType_ = other.uPrcDriverType_;
      uPrcDriver_ = other.uPrcDriver_;
      axisFUPrc_ = other.axisFUPrc_;
      spotUPrc_ = other.spotUPrc_;
      vWidth_ = other.vWidth_;
      numAtmStrikes_ = other.numAtmStrikes_;
      tradeableStatus_ = other.tradeableStatus_;
      surfaceResult_ = other.surfaceResult_;
      netTimestamp_ = other.netTimestamp_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveAtmVolV4 Clone() {
      return new LiveAtmVolV4(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.LiveAtmVolV4.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.LiveAtmVolV4.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 100;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// underlying tickerKey (stock or product group) that this option expiration is associated with
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "u_prc" field.</summary>
    public const int UPrcFieldNumber = 103;
    private double uPrc_;
    /// <summary>
    /// effective underlier price
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrc {
      get { return uPrc_; }
      set {
        uPrc_ = value;
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 106;
    private float years_;
    /// <summary>
    /// SR years to expiry metric
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 109;
    private float rate_;
    /// <summary>
    /// average expected interest rate to expiry (SR global rate curve)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "ddiv" field.</summary>
    public const int DdivFieldNumber = 112;
    private float ddiv_;
    /// <summary>
    /// (expected) cumulative discrete dividend $ amounts prior to expiration (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ddiv {
      get { return ddiv_; }
      set {
        ddiv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv_pv" field.</summary>
    public const int DdivPvFieldNumber = 115;
    private float ddivPv_;
    /// <summary>
    /// (expected) cumulative npv of discrete dividend $ amounts prior to expiration (SR global rate curve) (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DdivPv {
      get { return ddivPv_; }
      set {
        ddivPv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv_source" field.</summary>
    public const int DdivSourceFieldNumber = 118;
    private global::Spiderrock.Protobuf.DDivSource ddivSource_ = global::Spiderrock.Protobuf.DDivSource.Unspecified;
    /// <summary>
    /// Forecast if any of the dividends prior to expiry are forecast rather than announced
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DDivSource DdivSource {
      get { return ddivSource_; }
      set {
        ddivSource_ = value;
      }
    }

    /// <summary>Field number for the "atm_vol" field.</summary>
    public const int AtmVolFieldNumber = 121;
    private float atmVol_;
    /// <summary>
    /// atm vol (xAxis = 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmVol {
      get { return atmVol_; }
      set {
        atmVol_ = value;
      }
    }

    /// <summary>Field number for the "atm_eMA" field.</summary>
    public const int AtmEMAFieldNumber = 124;
    private float atmEMA_;
    /// <summary>
    /// atm vol exp moving average (half-life ~ 30 seconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmEMA {
      get { return atmEMA_; }
      set {
        atmEMA_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_ratio" field.</summary>
    public const int UPrcRatioFieldNumber = 127;
    private double uPrcRatio_;
    /// <summary>
    /// uPrc = uPrcDriver * uPrcRatio (when priceType = Future); uPrc = uPrcDriver (when priceType = Equity)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrcRatio {
      get { return uPrcRatio_; }
      set {
        uPrcRatio_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_ratio_eMA" field.</summary>
    public const int UPrcRatioEMAFieldNumber = 130;
    private double uPrcRatioEMA_;
    /// <summary>
    /// time smoothed implied uPrcRatio (half-life ~ 30 seconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrcRatioEMA {
      get { return uPrcRatioEMA_; }
      set {
        uPrcRatioEMA_ = value;
      }
    }

    /// <summary>Field number for the "sdiv" field.</summary>
    public const int SdivFieldNumber = 133;
    private float sdiv_;
    /// <summary>
    /// stock dividend (borrow rate) (derived from call/put balance when priceType=Stock; =rate otherwise)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sdiv {
      get { return sdiv_; }
      set {
        sdiv_ = value;
      }
    }

    /// <summary>Field number for the "sdiv_eMA" field.</summary>
    public const int SdivEMAFieldNumber = 136;
    private float sdivEMA_;
    /// <summary>
    /// sdiv exp moving average (half-life ~ 30 seconds)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SdivEMA {
      get { return sdivEMA_; }
      set {
        sdivEMA_ = value;
      }
    }

    /// <summary>Field number for the "min_cPAdj_val" field.</summary>
    public const int MinCPAdjValFieldNumber = 139;
    private double minCPAdjVal_;
    /// <summary>
    /// minimum cpAdjVal (sdiv or uPrcRatio)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MinCPAdjVal {
      get { return minCPAdjVal_; }
      set {
        minCPAdjVal_ = value;
      }
    }

    /// <summary>Field number for the "max_cPAdj_val" field.</summary>
    public const int MaxCPAdjValFieldNumber = 142;
    private double maxCPAdjVal_;
    /// <summary>
    /// minimum cpAdjVal (sdiv or uPrcRatio)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaxCPAdjVal {
      get { return maxCPAdjVal_; }
      set {
        maxCPAdjVal_ = value;
      }
    }

    /// <summary>Field number for the "cp_adj_type" field.</summary>
    public const int CpAdjTypeFieldNumber = 145;
    private global::Spiderrock.Protobuf.CPAdjType cpAdjType_ = global::Spiderrock.Protobuf.CPAdjType.Unspecified;
    /// <summary>
    /// adjustment used to align calls/puts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CPAdjType CpAdjType {
      get { return cpAdjType_; }
      set {
        cpAdjType_ = value;
      }
    }

    /// <summary>Field number for the "price_type" field.</summary>
    public const int PriceTypeFieldNumber = 148;
    private global::Spiderrock.Protobuf.CalcPriceType priceType_ = global::Spiderrock.Protobuf.CalcPriceType.Unspecified;
    /// <summary>
    /// [Equity] has independent uPrc and rate with sdiv derived from call/put balance; [Future] has sdiv = rate with uPrc' derived from call/put balance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CalcPriceType PriceType {
      get { return priceType_; }
      set {
        priceType_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_driver_key" field.</summary>
    public const int UPrcDriverKeyFieldNumber = 151;
    private global::Spiderrock.Protobuf.ExpiryKey uPrcDriverKey_;
    /// <summary>
    /// underlier driver key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey UPrcDriverKey {
      get { return uPrcDriverKey_; }
      set {
        uPrcDriverKey_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_driver_type" field.</summary>
    public const int UPrcDriverTypeFieldNumber = 154;
    private global::Spiderrock.Protobuf.SpdrKeyType uPrcDriverType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    /// <summary>
    /// underlier driver key type (stock or future)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType UPrcDriverType {
      get { return uPrcDriverType_; }
      set {
        uPrcDriverType_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_driver" field.</summary>
    public const int UPrcDriverFieldNumber = 157;
    private double uPrcDriver_;
    /// <summary>
    /// underlier driver (mid-market)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrcDriver {
      get { return uPrcDriver_; }
      set {
        uPrcDriver_ = value;
      }
    }

    /// <summary>Field number for the "axis_fUPrc" field.</summary>
    public const int AxisFUPrcFieldNumber = 160;
    private float axisFUPrc_;
    /// <summary>
    /// forward underlier price;  also at-the-money (xAxis = 0) synthetic strike
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AxisFUPrc {
      get { return axisFUPrc_; }
      set {
        axisFUPrc_ = value;
      }
    }

    /// <summary>Field number for the "spot_uPrc" field.</summary>
    public const int SpotUPrcFieldNumber = 163;
    private double spotUPrc_;
    /// <summary>
    /// spotUPrc = uPrc if priceType = Equity; spotUPrc != uPrc priceType = Future
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SpotUPrc {
      get { return spotUPrc_; }
      set {
        spotUPrc_ = value;
      }
    }

    /// <summary>Field number for the "v_width" field.</summary>
    public const int VWidthFieldNumber = 166;
    private float vWidth_;
    /// <summary>
    /// atm volatility market width (estimated from near expiries)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VWidth {
      get { return vWidth_; }
      set {
        vWidth_ = value;
      }
    }

    /// <summary>Field number for the "num_atm_strikes" field.</summary>
    public const int NumAtmStrikesFieldNumber = 169;
    private int numAtmStrikes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumAtmStrikes {
      get { return numAtmStrikes_; }
      set {
        numAtmStrikes_ = value;
      }
    }

    /// <summary>Field number for the "tradeable_status" field.</summary>
    public const int TradeableStatusFieldNumber = 172;
    private global::Spiderrock.Protobuf.TradeableStatus tradeableStatus_ = global::Spiderrock.Protobuf.TradeableStatus.Unspecified;
    /// <summary>
    /// indicates whether the surface is currently tradeable or not (all server surface integrity checks pass)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TradeableStatus TradeableStatus {
      get { return tradeableStatus_; }
      set {
        tradeableStatus_ = value;
      }
    }

    /// <summary>Field number for the "surface_result" field.</summary>
    public const int SurfaceResultFieldNumber = 175;
    private global::Spiderrock.Protobuf.SurfaceAdjResult surfaceResult_ = global::Spiderrock.Protobuf.SurfaceAdjResult.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SurfaceAdjResult SurfaceResult {
      get { return surfaceResult_; }
      set {
        surfaceResult_ = value;
      }
    }

    /// <summary>Field number for the "net_timestamp" field.</summary>
    public const int NetTimestampFieldNumber = 178;
    private long netTimestamp_;
    /// <summary>
    /// most recent unix timestamp (all option quotes)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NetTimestamp {
      get { return netTimestamp_; }
      set {
        netTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 181;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LiveAtmVolV4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LiveAtmVolV4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrc, other.UPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rate, other.Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ddiv, other.Ddiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DdivPv, other.DdivPv)) return false;
      if (DdivSource != other.DdivSource) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVol, other.AtmVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmEMA, other.AtmEMA)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrcRatio, other.UPrcRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrcRatioEMA, other.UPrcRatioEMA)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sdiv, other.Sdiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SdivEMA, other.SdivEMA)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinCPAdjVal, other.MinCPAdjVal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxCPAdjVal, other.MaxCPAdjVal)) return false;
      if (CpAdjType != other.CpAdjType) return false;
      if (PriceType != other.PriceType) return false;
      if (!object.Equals(UPrcDriverKey, other.UPrcDriverKey)) return false;
      if (UPrcDriverType != other.UPrcDriverType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrcDriver, other.UPrcDriver)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AxisFUPrc, other.AxisFUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SpotUPrc, other.SpotUPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VWidth, other.VWidth)) return false;
      if (NumAtmStrikes != other.NumAtmStrikes) return false;
      if (TradeableStatus != other.TradeableStatus) return false;
      if (SurfaceResult != other.SurfaceResult) return false;
      if (NetTimestamp != other.NetTimestamp) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (UPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrc);
      if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
      if (Rate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rate);
      if (Ddiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ddiv);
      if (DdivPv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DdivPv);
      if (DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) hash ^= DdivSource.GetHashCode();
      if (AtmVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVol);
      if (AtmEMA != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmEMA);
      if (UPrcRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrcRatio);
      if (UPrcRatioEMA != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrcRatioEMA);
      if (Sdiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sdiv);
      if (SdivEMA != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SdivEMA);
      if (MinCPAdjVal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinCPAdjVal);
      if (MaxCPAdjVal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxCPAdjVal);
      if (CpAdjType != global::Spiderrock.Protobuf.CPAdjType.Unspecified) hash ^= CpAdjType.GetHashCode();
      if (PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) hash ^= PriceType.GetHashCode();
      if (uPrcDriverKey_ != null) hash ^= UPrcDriverKey.GetHashCode();
      if (UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= UPrcDriverType.GetHashCode();
      if (UPrcDriver != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrcDriver);
      if (AxisFUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AxisFUPrc);
      if (SpotUPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SpotUPrc);
      if (VWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VWidth);
      if (NumAtmStrikes != 0) hash ^= NumAtmStrikes.GetHashCode();
      if (TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) hash ^= TradeableStatus.GetHashCode();
      if (SurfaceResult != global::Spiderrock.Protobuf.SurfaceAdjResult.Unspecified) hash ^= SurfaceResult.GetHashCode();
      if (NetTimestamp != 0L) hash ^= NetTimestamp.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(185, 6);
        output.WriteDouble(UPrc);
      }
      if (Years != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(Years);
      }
      if (Rate != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(Rate);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(Ddiv);
      }
      if (DdivPv != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(DdivPv);
      }
      if (DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) DdivSource);
      }
      if (AtmVol != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(AtmVol);
      }
      if (AtmEMA != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(AtmEMA);
      }
      if (UPrcRatio != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(UPrcRatio);
      }
      if (UPrcRatioEMA != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(UPrcRatioEMA);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(Sdiv);
      }
      if (SdivEMA != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(SdivEMA);
      }
      if (MinCPAdjVal != 0D) {
        output.WriteRawTag(217, 8);
        output.WriteDouble(MinCPAdjVal);
      }
      if (MaxCPAdjVal != 0D) {
        output.WriteRawTag(241, 8);
        output.WriteDouble(MaxCPAdjVal);
      }
      if (CpAdjType != global::Spiderrock.Protobuf.CPAdjType.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) CpAdjType);
      }
      if (PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) PriceType);
      }
      if (uPrcDriverKey_ != null) {
        output.WriteRawTag(186, 9);
        output.WriteMessage(UPrcDriverKey);
      }
      if (UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) UPrcDriverType);
      }
      if (UPrcDriver != 0D) {
        output.WriteRawTag(233, 9);
        output.WriteDouble(UPrcDriver);
      }
      if (AxisFUPrc != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(AxisFUPrc);
      }
      if (SpotUPrc != 0D) {
        output.WriteRawTag(153, 10);
        output.WriteDouble(SpotUPrc);
      }
      if (VWidth != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(VWidth);
      }
      if (NumAtmStrikes != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(NumAtmStrikes);
      }
      if (TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) {
        output.WriteRawTag(224, 10);
        output.WriteEnum((int) TradeableStatus);
      }
      if (SurfaceResult != global::Spiderrock.Protobuf.SurfaceAdjResult.Unspecified) {
        output.WriteRawTag(248, 10);
        output.WriteEnum((int) SurfaceResult);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(144, 11);
        output.WriteInt64(NetTimestamp);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(185, 6);
        output.WriteDouble(UPrc);
      }
      if (Years != 0F) {
        output.WriteRawTag(213, 6);
        output.WriteFloat(Years);
      }
      if (Rate != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(Rate);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(Ddiv);
      }
      if (DdivPv != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(DdivPv);
      }
      if (DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) {
        output.WriteRawTag(176, 7);
        output.WriteEnum((int) DdivSource);
      }
      if (AtmVol != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(AtmVol);
      }
      if (AtmEMA != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(AtmEMA);
      }
      if (UPrcRatio != 0D) {
        output.WriteRawTag(249, 7);
        output.WriteDouble(UPrcRatio);
      }
      if (UPrcRatioEMA != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(UPrcRatioEMA);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(Sdiv);
      }
      if (SdivEMA != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(SdivEMA);
      }
      if (MinCPAdjVal != 0D) {
        output.WriteRawTag(217, 8);
        output.WriteDouble(MinCPAdjVal);
      }
      if (MaxCPAdjVal != 0D) {
        output.WriteRawTag(241, 8);
        output.WriteDouble(MaxCPAdjVal);
      }
      if (CpAdjType != global::Spiderrock.Protobuf.CPAdjType.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) CpAdjType);
      }
      if (PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) PriceType);
      }
      if (uPrcDriverKey_ != null) {
        output.WriteRawTag(186, 9);
        output.WriteMessage(UPrcDriverKey);
      }
      if (UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(208, 9);
        output.WriteEnum((int) UPrcDriverType);
      }
      if (UPrcDriver != 0D) {
        output.WriteRawTag(233, 9);
        output.WriteDouble(UPrcDriver);
      }
      if (AxisFUPrc != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(AxisFUPrc);
      }
      if (SpotUPrc != 0D) {
        output.WriteRawTag(153, 10);
        output.WriteDouble(SpotUPrc);
      }
      if (VWidth != 0F) {
        output.WriteRawTag(181, 10);
        output.WriteFloat(VWidth);
      }
      if (NumAtmStrikes != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(NumAtmStrikes);
      }
      if (TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) {
        output.WriteRawTag(224, 10);
        output.WriteEnum((int) TradeableStatus);
      }
      if (SurfaceResult != global::Spiderrock.Protobuf.SurfaceAdjResult.Unspecified) {
        output.WriteRawTag(248, 10);
        output.WriteEnum((int) SurfaceResult);
      }
      if (NetTimestamp != 0L) {
        output.WriteRawTag(144, 11);
        output.WriteInt64(NetTimestamp);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(170, 11);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (UPrc != 0D) {
        size += 2 + 8;
      }
      if (Years != 0F) {
        size += 2 + 4;
      }
      if (Rate != 0F) {
        size += 2 + 4;
      }
      if (Ddiv != 0F) {
        size += 2 + 4;
      }
      if (DdivPv != 0F) {
        size += 2 + 4;
      }
      if (DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DdivSource);
      }
      if (AtmVol != 0F) {
        size += 2 + 4;
      }
      if (AtmEMA != 0F) {
        size += 2 + 4;
      }
      if (UPrcRatio != 0D) {
        size += 2 + 8;
      }
      if (UPrcRatioEMA != 0D) {
        size += 2 + 8;
      }
      if (Sdiv != 0F) {
        size += 2 + 4;
      }
      if (SdivEMA != 0F) {
        size += 2 + 4;
      }
      if (MinCPAdjVal != 0D) {
        size += 2 + 8;
      }
      if (MaxCPAdjVal != 0D) {
        size += 2 + 8;
      }
      if (CpAdjType != global::Spiderrock.Protobuf.CPAdjType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CpAdjType);
      }
      if (PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceType);
      }
      if (uPrcDriverKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UPrcDriverKey);
      }
      if (UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UPrcDriverType);
      }
      if (UPrcDriver != 0D) {
        size += 2 + 8;
      }
      if (AxisFUPrc != 0F) {
        size += 2 + 4;
      }
      if (SpotUPrc != 0D) {
        size += 2 + 8;
      }
      if (VWidth != 0F) {
        size += 2 + 4;
      }
      if (NumAtmStrikes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumAtmStrikes);
      }
      if (TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradeableStatus);
      }
      if (SurfaceResult != global::Spiderrock.Protobuf.SurfaceAdjResult.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SurfaceResult);
      }
      if (NetTimestamp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(NetTimestamp);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LiveAtmVolV4 other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.LiveAtmVolV4.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.UPrc != 0D) {
        UPrc = other.UPrc;
      }
      if (other.Years != 0F) {
        Years = other.Years;
      }
      if (other.Rate != 0F) {
        Rate = other.Rate;
      }
      if (other.Ddiv != 0F) {
        Ddiv = other.Ddiv;
      }
      if (other.DdivPv != 0F) {
        DdivPv = other.DdivPv;
      }
      if (other.DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) {
        DdivSource = other.DdivSource;
      }
      if (other.AtmVol != 0F) {
        AtmVol = other.AtmVol;
      }
      if (other.AtmEMA != 0F) {
        AtmEMA = other.AtmEMA;
      }
      if (other.UPrcRatio != 0D) {
        UPrcRatio = other.UPrcRatio;
      }
      if (other.UPrcRatioEMA != 0D) {
        UPrcRatioEMA = other.UPrcRatioEMA;
      }
      if (other.Sdiv != 0F) {
        Sdiv = other.Sdiv;
      }
      if (other.SdivEMA != 0F) {
        SdivEMA = other.SdivEMA;
      }
      if (other.MinCPAdjVal != 0D) {
        MinCPAdjVal = other.MinCPAdjVal;
      }
      if (other.MaxCPAdjVal != 0D) {
        MaxCPAdjVal = other.MaxCPAdjVal;
      }
      if (other.CpAdjType != global::Spiderrock.Protobuf.CPAdjType.Unspecified) {
        CpAdjType = other.CpAdjType;
      }
      if (other.PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) {
        PriceType = other.PriceType;
      }
      if (other.uPrcDriverKey_ != null) {
        if (uPrcDriverKey_ == null) {
          UPrcDriverKey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        UPrcDriverKey.MergeFrom(other.UPrcDriverKey);
      }
      if (other.UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        UPrcDriverType = other.UPrcDriverType;
      }
      if (other.UPrcDriver != 0D) {
        UPrcDriver = other.UPrcDriver;
      }
      if (other.AxisFUPrc != 0F) {
        AxisFUPrc = other.AxisFUPrc;
      }
      if (other.SpotUPrc != 0D) {
        SpotUPrc = other.SpotUPrc;
      }
      if (other.VWidth != 0F) {
        VWidth = other.VWidth;
      }
      if (other.NumAtmStrikes != 0) {
        NumAtmStrikes = other.NumAtmStrikes;
      }
      if (other.TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) {
        TradeableStatus = other.TradeableStatus;
      }
      if (other.SurfaceResult != global::Spiderrock.Protobuf.SurfaceAdjResult.Unspecified) {
        SurfaceResult = other.SurfaceResult;
      }
      if (other.NetTimestamp != 0L) {
        NetTimestamp = other.NetTimestamp;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.LiveAtmVolV4.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 825: {
            UPrc = input.ReadDouble();
            break;
          }
          case 853: {
            Years = input.ReadFloat();
            break;
          }
          case 877: {
            Rate = input.ReadFloat();
            break;
          }
          case 901: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 925: {
            DdivPv = input.ReadFloat();
            break;
          }
          case 944: {
            DdivSource = (global::Spiderrock.Protobuf.DDivSource) input.ReadEnum();
            break;
          }
          case 973: {
            AtmVol = input.ReadFloat();
            break;
          }
          case 997: {
            AtmEMA = input.ReadFloat();
            break;
          }
          case 1017: {
            UPrcRatio = input.ReadDouble();
            break;
          }
          case 1041: {
            UPrcRatioEMA = input.ReadDouble();
            break;
          }
          case 1069: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 1093: {
            SdivEMA = input.ReadFloat();
            break;
          }
          case 1113: {
            MinCPAdjVal = input.ReadDouble();
            break;
          }
          case 1137: {
            MaxCPAdjVal = input.ReadDouble();
            break;
          }
          case 1160: {
            CpAdjType = (global::Spiderrock.Protobuf.CPAdjType) input.ReadEnum();
            break;
          }
          case 1184: {
            PriceType = (global::Spiderrock.Protobuf.CalcPriceType) input.ReadEnum();
            break;
          }
          case 1210: {
            if (uPrcDriverKey_ == null) {
              UPrcDriverKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(UPrcDriverKey);
            break;
          }
          case 1232: {
            UPrcDriverType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1257: {
            UPrcDriver = input.ReadDouble();
            break;
          }
          case 1285: {
            AxisFUPrc = input.ReadFloat();
            break;
          }
          case 1305: {
            SpotUPrc = input.ReadDouble();
            break;
          }
          case 1333: {
            VWidth = input.ReadFloat();
            break;
          }
          case 1352: {
            NumAtmStrikes = input.ReadInt32();
            break;
          }
          case 1376: {
            TradeableStatus = (global::Spiderrock.Protobuf.TradeableStatus) input.ReadEnum();
            break;
          }
          case 1400: {
            SurfaceResult = (global::Spiderrock.Protobuf.SurfaceAdjResult) input.ReadEnum();
            break;
          }
          case 1424: {
            NetTimestamp = input.ReadInt64();
            break;
          }
          case 1450: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.LiveAtmVolV4.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 825: {
            UPrc = input.ReadDouble();
            break;
          }
          case 853: {
            Years = input.ReadFloat();
            break;
          }
          case 877: {
            Rate = input.ReadFloat();
            break;
          }
          case 901: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 925: {
            DdivPv = input.ReadFloat();
            break;
          }
          case 944: {
            DdivSource = (global::Spiderrock.Protobuf.DDivSource) input.ReadEnum();
            break;
          }
          case 973: {
            AtmVol = input.ReadFloat();
            break;
          }
          case 997: {
            AtmEMA = input.ReadFloat();
            break;
          }
          case 1017: {
            UPrcRatio = input.ReadDouble();
            break;
          }
          case 1041: {
            UPrcRatioEMA = input.ReadDouble();
            break;
          }
          case 1069: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 1093: {
            SdivEMA = input.ReadFloat();
            break;
          }
          case 1113: {
            MinCPAdjVal = input.ReadDouble();
            break;
          }
          case 1137: {
            MaxCPAdjVal = input.ReadDouble();
            break;
          }
          case 1160: {
            CpAdjType = (global::Spiderrock.Protobuf.CPAdjType) input.ReadEnum();
            break;
          }
          case 1184: {
            PriceType = (global::Spiderrock.Protobuf.CalcPriceType) input.ReadEnum();
            break;
          }
          case 1210: {
            if (uPrcDriverKey_ == null) {
              UPrcDriverKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(UPrcDriverKey);
            break;
          }
          case 1232: {
            UPrcDriverType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 1257: {
            UPrcDriver = input.ReadDouble();
            break;
          }
          case 1285: {
            AxisFUPrc = input.ReadFloat();
            break;
          }
          case 1305: {
            SpotUPrc = input.ReadDouble();
            break;
          }
          case 1333: {
            VWidth = input.ReadFloat();
            break;
          }
          case 1352: {
            NumAtmStrikes = input.ReadInt32();
            break;
          }
          case 1376: {
            TradeableStatus = (global::Spiderrock.Protobuf.TradeableStatus) input.ReadEnum();
            break;
          }
          case 1400: {
            SurfaceResult = (global::Spiderrock.Protobuf.SurfaceAdjResult) input.ReadEnum();
            break;
          }
          case 1424: {
            NetTimestamp = input.ReadInt64();
            break;
          }
          case 1450: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the LiveAtmVolV4 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.LiveAtmVolV4.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ekey_ = other.ekey_ != null ? other.ekey_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ekey" field.</summary>
        public const int EkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.ExpiryKey ekey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ExpiryKey Ekey {
          get { return ekey_; }
          set {
            ekey_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ekey, other.Ekey)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ekey_ != null) hash ^= Ekey.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ekey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ekey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ekey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ekey);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ekey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ekey);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ekey_ != null) {
            if (ekey_ == null) {
              Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            Ekey.MergeFrom(other.Ekey);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ekey_ == null) {
                  Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Ekey);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ekey_ == null) {
                  Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Ekey);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
