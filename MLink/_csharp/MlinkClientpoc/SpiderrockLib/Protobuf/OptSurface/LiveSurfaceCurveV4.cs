// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/OptSurface/LiveSurfaceCurveV4.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/OptSurface/LiveSurfaceCurveV4.proto</summary>
  public static partial class LiveSurfaceCurveV4Reflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/OptSurface/LiveSurfaceCurveV4.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LiveSurfaceCurveV4Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CixQcm90b2J1Zi9PcHRTdXJmYWNlL0xpdmVTdXJmYWNlQ3VydmVWNC5wcm90",
            "bxITc3BpZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24ucHJv",
            "dG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8i4RcKEkxpdmVT",
            "dXJmYWNlQ3VydmVWNBIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuTWVzc2FnZU1ldGFkYXRhEjoKBHBrZXkYAiABKAsyLC5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLkxpdmVTdXJmYWNlQ3VydmVWNC5QS2V5Ei4KBnRpY2tl",
            "chhkIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5EiwKBGZr",
            "ZXkYZyABKAsyHi5zcGlkZXJyb2NrLnByb3RvYnVmLkV4cGlyeUtleRI4ChB1",
            "X3ByY19kcml2ZXJfa2V5GGogASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5F",
            "eHBpcnlLZXkSOwoRdV9wcmNfZHJpdmVyX3R5cGUYbSABKA4yIC5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlNwZHJLZXlUeXBlEhQKDHVfcHJjX2RyaXZlchhwIAEo",
            "ARINCgV1X3ByYxhzIAEoARINCgV1X2JpZBh2IAEoARINCgV1X2Fzaxh5IAEo",
            "ARINCgV5ZWFycxh8IAEoAhIMCgRyYXRlGH8gASgCEg0KBHNkaXYYggEgASgC",
            "Eg0KBGRkaXYYhQEgASgCEhAKB2RkaXZfcHYYiAEgASgCEjUKC2RkaXZfc291",
            "cmNlGIsBIAEoDjIfLnNwaWRlcnJvY2sucHJvdG9idWYuRERpdlNvdXJjZRIV",
            "CgxzeW1ib2xfcmF0aW8YjgEgASgCEjMKB2V4X3R5cGUYkQEgASgOMiEuc3Bp",
            "ZGVycm9jay5wcm90b2J1Zi5FeGVyY2lzZVR5cGUSNwoKbW9kZWxfdHlwZRiU",
            "ASABKA4yIi5zcGlkZXJyb2NrLnByb3RvYnVmLkNhbGNNb2RlbFR5cGUSNwoK",
            "cHJpY2VfdHlwZRiXASABKA4yIi5zcGlkZXJyb2NrLnByb3RvYnVmLkNhbGNQ",
            "cmljZVR5cGUSEQoIZWFybl9jbnQYmgEgASgCEhUKDGVhcm5fY250X2Fkahid",
            "ASABKAISFAoLYXhpc192b2xfclQYoAEgASgCEhMKCmF4aXNfZlVQcmMYowEg",
            "ASgCEjsKDm1vbmV5bmVzc190eXBlGKYBIAEoDjIiLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuTW9uZXluZXNzVHlwZRI+ChBwcmljZV9xdW90ZV90eXBlGKkBIAEo",
            "DjIjLnNwaWRlcnJvY2sucHJvdG9idWYuUHJpY2VRdW90ZVR5cGUSEAoHYXRt",
            "X3ZvbBisASABKAISEAoHYXRtX2NlbhivASABKAISFQoMYXRtX3ZvbF9oaXN0",
            "GLIBIAEoAhIVCgxhdG1fY2VuX2hpc3QYtQEgASgCEg8KBmVfbW92ZRi4ASAB",
            "KAISFAoLZV9tb3ZlX2hpc3QYuwEgASgCEhQKC3VfcHJjX3JhdGlvGL4BIAEo",
            "ARIUCgttaW5fYXRtX3ZvbBjBASABKAISFAoLbWF4X2F0bV92b2wYxAEgASgC",
            "EhYKDW1pbl9jUEFkal92YWwYxwEgASgBEhYKDW1heF9jUEFkal92YWwYygEg",
            "ASgBEhcKDmF0bV9maXhlZF9tb3ZlGM0BIAEoAhIQCgdhdG1fcGhpGNABIAEo",
            "AhIQCgdhdG1fcmhvGNMBIAEoAhIRCghhdG1fdmVnYRjWASABKAISDgoFc2xv",
            "cGUY2QEgASgCEhQKC3Zhcl9zd2FwX2ZWGNwBIAEoAhISCgltaW5feEF4aXMY",
            "3wEgASgCEhIKCW1heF94QXhpcxjiASABKAISNAoLc2tld190aWNrZXIY5QEg",
            "ASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5UaWNrZXJLZXkSEAoHeF9zaGlm",
            "dBjoASABKAESDwoGeF9tdWx0GOsBIAEoARISCglza2V3X211bHQY7gEgASgB",
            "EhEKCHNrZXdfYzAwGPEBIAEoAhIRCghza2V3X2MwMRj0ASABKAISEQoIc2tl",
            "d19jMDIY9wEgASgCEhEKCHNrZXdfYzAzGPoBIAEoAhIRCghza2V3X2MwNBj9",
            "ASABKAISEQoIc2tld19jMDUYgAIgASgCEhEKCHNrZXdfYzA2GIMCIAEoAhIR",
            "Cghza2V3X2MwNxiGAiABKAISEQoIc2tld19jMDgYiQIgASgCEhEKCHNrZXdf",
            "YzA5GIwCIAEoAhIRCghza2V3X2MxMBiPAiABKAISEQoIc2tld19jMTEYkgIg",
            "ASgCEhEKCHNrZXdfYzEyGJUCIAEoAhIRCghza2V3X2MxMxiYAiABKAISEQoI",
            "c2tld19jMTQYmwIgASgCEhEKCHNrZXdfYzE1GJ4CIAEoAhIRCghza2V3X2Mx",
            "NhihAiABKAISEQoIc2tld19jMTcYpAIgASgCEhEKCHNrZXdfYzE4GKcCIAEo",
            "AhIRCghza2V3X2MxORiqAiABKAISEQoIc2tld19jMjAYrQIgASgCEhEKCHNr",
            "ZXdfYzIxGLACIAEoAhIRCghza2V3X2MyMhizAiABKAISEQoIc2tld19jMjMY",
            "tgIgASgCEhEKCHNrZXdfYzI0GLkCIAEoAhIRCghza2V3X2MyNRi8AiABKAIS",
            "EQoIc2tld19jMjYYvwIgASgCEhEKCHNrZXdfYzI3GMICIAEoAhIRCghza2V3",
            "X2MyOBjFAiABKAISEQoIc2tld19jMjkYyAIgASgCEhEKCHNrZXdfYzMwGMsC",
            "IAEoAhITCgpjcF9hZGpfZDA0GM4CIAEoAhITCgpjcF9hZGpfZDAzGNECIAEo",
            "AhITCgpjcF9hZGpfZDAyGNQCIAEoAhITCgpjcF9hZGpfZDAxGNcCIAEoAhIT",
            "CgpjcF9hZGpfdTAxGNoCIAEoAhITCgpjcF9hZGpfdTAyGN0CIAEoAhITCgpj",
            "cF9hZGpfdTAzGOACIAEoAhITCgpjcF9hZGpfdTA0GOMCIAEoAhIPCgZwd2lk",
            "dGgY5gIgASgCEg8KBnZ3aWR0aBjpAiABKAISDgoFY19jbnQY7AIgASgFEg4K",
            "BXBfY250GO8CIAEoBRITCgpjX2JpZF9taXNzGPICIAEoBRITCgpjX2Fza19t",
            "aXNzGPUCIAEoBRITCgpwX2JpZF9taXNzGPgCIAEoBRITCgpwX2Fza19taXNz",
            "GPsCIAEoBRIUCgtmaXRfYXZnX2Vychj+AiABKAISGAoPZml0X2F2Z19hYnNf",
            "ZXJyGIEDIAEoAhIYCg9maXRfbWF4X3ByY19lcnIYhAMgASgCEhMKCmZpdF9l",
            "cnJfeFgYhwMgASgCEjEKCmZpdF9lcnJfY1AYigMgASgOMhwuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5DYWxsUHV0EhMKCmZpdF9lcnJfZGUYjQMgASgCEhQKC2Zp",
            "dF9lcnJfYmlkGJADIAEoAhIUCgtmaXRfZXJyX2FzaxiTAyABKAISFAoLZml0",
            "X2Vycl9wcmMYlgMgASgCEhQKC2ZpdF9lcnJfdm9sGJkDIAEoAhIXCg5udW1f",
            "c2FkZGxlX3B0cxicAyABKAUSGAoPbWluX3NhZGRsZV9zcGFuGJ8DIAEoAhId",
            "ChRtYXhfc2FkZGxlX2N1cnZhdHVyZRiiAyABKAISOwoObWFya2V0X3Nlc3Np",
            "b24YpQMgASgOMiIuc3BpZGVycm9jay5wcm90b2J1Zi5NYXJrZXRTZXNzaW9u",
            "Ej8KEHRyYWRlYWJsZV9zdGF0dXMYqAMgASgOMiQuc3BpZGVycm9jay5wcm90",
            "b2J1Zi5UcmFkZWFibGVTdGF0dXMSOwoOc3VyZmFjZV9yZXN1bHQYqwMgASgO",
            "MiIuc3BpZGVycm9jay5wcm90b2J1Zi5TdXJmYWNlUmVzdWx0Ei4KCXRpbWVz",
            "dGFtcBiuAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wGnEKBFBL",
            "ZXkSLAoEZWtleRgKIAEoCzIeLnNwaWRlcnJvY2sucHJvdG9idWYuRXhwaXJ5",
            "S2V5EjsKDHN1cmZhY2VfdHlwZRgLIAEoDjIlLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuU3VyZmFjZUN1cnZlVHlwZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveSurfaceCurveV4), global::Spiderrock.Protobuf.LiveSurfaceCurveV4.Parser, new[]{ "Meta", "Pkey", "Ticker", "Fkey", "UPrcDriverKey", "UPrcDriverType", "UPrcDriver", "UPrc", "UBid", "UAsk", "Years", "Rate", "Sdiv", "Ddiv", "DdivPv", "DdivSource", "SymbolRatio", "ExType", "ModelType", "PriceType", "EarnCnt", "EarnCntAdj", "AxisVolRT", "AxisFUPrc", "MoneynessType", "PriceQuoteType", "AtmVol", "AtmCen", "AtmVolHist", "AtmCenHist", "EMove", "EMoveHist", "UPrcRatio", "MinAtmVol", "MaxAtmVol", "MinCPAdjVal", "MaxCPAdjVal", "AtmFixedMove", "AtmPhi", "AtmRho", "AtmVega", "Slope", "VarSwapFV", "MinXAxis", "MaxXAxis", "SkewTicker", "XShift", "XMult", "SkewMult", "SkewC00", "SkewC01", "SkewC02", "SkewC03", "SkewC04", "SkewC05", "SkewC06", "SkewC07", "SkewC08", "SkewC09", "SkewC10", "SkewC11", "SkewC12", "SkewC13", "SkewC14", "SkewC15", "SkewC16", "SkewC17", "SkewC18", "SkewC19", "SkewC20", "SkewC21", "SkewC22", "SkewC23", "SkewC24", "SkewC25", "SkewC26", "SkewC27", "SkewC28", "SkewC29", "SkewC30", "CpAdjD04", "CpAdjD03", "CpAdjD02", "CpAdjD01", "CpAdjU01", "CpAdjU02", "CpAdjU03", "CpAdjU04", "Pwidth", "Vwidth", "CCnt", "PCnt", "CBidMiss", "CAskMiss", "PBidMiss", "PAskMiss", "FitAvgErr", "FitAvgAbsErr", "FitMaxPrcErr", "FitErrXX", "FitErrCP", "FitErrDe", "FitErrBid", "FitErrAsk", "FitErrPrc", "FitErrVol", "NumSaddlePts", "MinSaddleSpan", "MaxSaddleCurvature", "MarketSession", "TradeableStatus", "SurfaceResult", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.LiveSurfaceCurveV4.Types.PKey), global::Spiderrock.Protobuf.LiveSurfaceCurveV4.Types.PKey.Parser, new[]{ "Ekey", "SurfaceType" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///LiveSurfaceCurve (surfaceType = 'Live') records are computed and publish continuously during trading hours and represent a current best implied volatility market fit.
  ///SurfaceType = 'PriorDay' records contain the `closing surface record from the prior trading period (usually from just before the last main session close).
  /// </summary>
  public sealed partial class LiveSurfaceCurveV4 : pb::IMessage<LiveSurfaceCurveV4>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LiveSurfaceCurveV4> _parser = new pb::MessageParser<LiveSurfaceCurveV4>(() => new LiveSurfaceCurveV4());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LiveSurfaceCurveV4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.LiveSurfaceCurveV4Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveSurfaceCurveV4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveSurfaceCurveV4(LiveSurfaceCurveV4 other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      fkey_ = other.fkey_ != null ? other.fkey_.Clone() : null;
      uPrcDriverKey_ = other.uPrcDriverKey_ != null ? other.uPrcDriverKey_.Clone() : null;
      uPrcDriverType_ = other.uPrcDriverType_;
      uPrcDriver_ = other.uPrcDriver_;
      uPrc_ = other.uPrc_;
      uBid_ = other.uBid_;
      uAsk_ = other.uAsk_;
      years_ = other.years_;
      rate_ = other.rate_;
      sdiv_ = other.sdiv_;
      ddiv_ = other.ddiv_;
      ddivPv_ = other.ddivPv_;
      ddivSource_ = other.ddivSource_;
      symbolRatio_ = other.symbolRatio_;
      exType_ = other.exType_;
      modelType_ = other.modelType_;
      priceType_ = other.priceType_;
      earnCnt_ = other.earnCnt_;
      earnCntAdj_ = other.earnCntAdj_;
      axisVolRT_ = other.axisVolRT_;
      axisFUPrc_ = other.axisFUPrc_;
      moneynessType_ = other.moneynessType_;
      priceQuoteType_ = other.priceQuoteType_;
      atmVol_ = other.atmVol_;
      atmCen_ = other.atmCen_;
      atmVolHist_ = other.atmVolHist_;
      atmCenHist_ = other.atmCenHist_;
      eMove_ = other.eMove_;
      eMoveHist_ = other.eMoveHist_;
      uPrcRatio_ = other.uPrcRatio_;
      minAtmVol_ = other.minAtmVol_;
      maxAtmVol_ = other.maxAtmVol_;
      minCPAdjVal_ = other.minCPAdjVal_;
      maxCPAdjVal_ = other.maxCPAdjVal_;
      atmFixedMove_ = other.atmFixedMove_;
      atmPhi_ = other.atmPhi_;
      atmRho_ = other.atmRho_;
      atmVega_ = other.atmVega_;
      slope_ = other.slope_;
      varSwapFV_ = other.varSwapFV_;
      minXAxis_ = other.minXAxis_;
      maxXAxis_ = other.maxXAxis_;
      skewTicker_ = other.skewTicker_ != null ? other.skewTicker_.Clone() : null;
      xShift_ = other.xShift_;
      xMult_ = other.xMult_;
      skewMult_ = other.skewMult_;
      skewC00_ = other.skewC00_;
      skewC01_ = other.skewC01_;
      skewC02_ = other.skewC02_;
      skewC03_ = other.skewC03_;
      skewC04_ = other.skewC04_;
      skewC05_ = other.skewC05_;
      skewC06_ = other.skewC06_;
      skewC07_ = other.skewC07_;
      skewC08_ = other.skewC08_;
      skewC09_ = other.skewC09_;
      skewC10_ = other.skewC10_;
      skewC11_ = other.skewC11_;
      skewC12_ = other.skewC12_;
      skewC13_ = other.skewC13_;
      skewC14_ = other.skewC14_;
      skewC15_ = other.skewC15_;
      skewC16_ = other.skewC16_;
      skewC17_ = other.skewC17_;
      skewC18_ = other.skewC18_;
      skewC19_ = other.skewC19_;
      skewC20_ = other.skewC20_;
      skewC21_ = other.skewC21_;
      skewC22_ = other.skewC22_;
      skewC23_ = other.skewC23_;
      skewC24_ = other.skewC24_;
      skewC25_ = other.skewC25_;
      skewC26_ = other.skewC26_;
      skewC27_ = other.skewC27_;
      skewC28_ = other.skewC28_;
      skewC29_ = other.skewC29_;
      skewC30_ = other.skewC30_;
      cpAdjD04_ = other.cpAdjD04_;
      cpAdjD03_ = other.cpAdjD03_;
      cpAdjD02_ = other.cpAdjD02_;
      cpAdjD01_ = other.cpAdjD01_;
      cpAdjU01_ = other.cpAdjU01_;
      cpAdjU02_ = other.cpAdjU02_;
      cpAdjU03_ = other.cpAdjU03_;
      cpAdjU04_ = other.cpAdjU04_;
      pwidth_ = other.pwidth_;
      vwidth_ = other.vwidth_;
      cCnt_ = other.cCnt_;
      pCnt_ = other.pCnt_;
      cBidMiss_ = other.cBidMiss_;
      cAskMiss_ = other.cAskMiss_;
      pBidMiss_ = other.pBidMiss_;
      pAskMiss_ = other.pAskMiss_;
      fitAvgErr_ = other.fitAvgErr_;
      fitAvgAbsErr_ = other.fitAvgAbsErr_;
      fitMaxPrcErr_ = other.fitMaxPrcErr_;
      fitErrXX_ = other.fitErrXX_;
      fitErrCP_ = other.fitErrCP_;
      fitErrDe_ = other.fitErrDe_;
      fitErrBid_ = other.fitErrBid_;
      fitErrAsk_ = other.fitErrAsk_;
      fitErrPrc_ = other.fitErrPrc_;
      fitErrVol_ = other.fitErrVol_;
      numSaddlePts_ = other.numSaddlePts_;
      minSaddleSpan_ = other.minSaddleSpan_;
      maxSaddleCurvature_ = other.maxSaddleCurvature_;
      marketSession_ = other.marketSession_;
      tradeableStatus_ = other.tradeableStatus_;
      surfaceResult_ = other.surfaceResult_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LiveSurfaceCurveV4 Clone() {
      return new LiveSurfaceCurveV4(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.LiveSurfaceCurveV4.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.LiveSurfaceCurveV4.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 100;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// underlying stock key that this option expiration attaches to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "fkey" field.</summary>
    public const int FkeyFieldNumber = 103;
    private global::Spiderrock.Protobuf.ExpiryKey fkey_;
    /// <summary>
    /// underlying future key (if any)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey Fkey {
      get { return fkey_; }
      set {
        fkey_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_driver_key" field.</summary>
    public const int UPrcDriverKeyFieldNumber = 106;
    private global::Spiderrock.Protobuf.ExpiryKey uPrcDriverKey_;
    /// <summary>
    /// underlier driver key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExpiryKey UPrcDriverKey {
      get { return uPrcDriverKey_; }
      set {
        uPrcDriverKey_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_driver_type" field.</summary>
    public const int UPrcDriverTypeFieldNumber = 109;
    private global::Spiderrock.Protobuf.SpdrKeyType uPrcDriverType_ = global::Spiderrock.Protobuf.SpdrKeyType.Unspecified;
    /// <summary>
    /// underlier driver key type (stock or future)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SpdrKeyType UPrcDriverType {
      get { return uPrcDriverType_; }
      set {
        uPrcDriverType_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_driver" field.</summary>
    public const int UPrcDriverFieldNumber = 112;
    private double uPrcDriver_;
    /// <summary>
    /// underlier driver (mid-market)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrcDriver {
      get { return uPrcDriver_; }
      set {
        uPrcDriver_ = value;
      }
    }

    /// <summary>Field number for the "u_prc" field.</summary>
    public const int UPrcFieldNumber = 115;
    private double uPrc_;
    /// <summary>
    /// effective uPrc used for surface fitting
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrc {
      get { return uPrc_; }
      set {
        uPrc_ = value;
      }
    }

    /// <summary>Field number for the "u_bid" field.</summary>
    public const int UBidFieldNumber = 118;
    private double uBid_;
    /// <summary>
    /// effective uBid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UBid {
      get { return uBid_; }
      set {
        uBid_ = value;
      }
    }

    /// <summary>Field number for the "u_ask" field.</summary>
    public const int UAskFieldNumber = 121;
    private double uAsk_;
    /// <summary>
    /// effective uAsk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UAsk {
      get { return uAsk_; }
      set {
        uAsk_ = value;
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 124;
    private float years_;
    /// <summary>
    /// time to expiration (in years)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 127;
    private float rate_;
    /// <summary>
    /// average interest rate to expiration (SR global rate curve)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "sdiv" field.</summary>
    public const int SdivFieldNumber = 130;
    private float sdiv_;
    /// <summary>
    /// stock dividend (borrow rate)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Sdiv {
      get { return sdiv_; }
      set {
        sdiv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv" field.</summary>
    public const int DdivFieldNumber = 133;
    private float ddiv_;
    /// <summary>
    /// (expected) cumulative discrete dividend $ amounts prior to expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ddiv {
      get { return ddiv_; }
      set {
        ddiv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv_pv" field.</summary>
    public const int DdivPvFieldNumber = 136;
    private float ddivPv_;
    /// <summary>
    /// (expected) cumulative npv of discrete dividend $ amounts prior to expiration (SR global rate curve)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DdivPv {
      get { return ddivPv_; }
      set {
        ddivPv_ = value;
      }
    }

    /// <summary>Field number for the "ddiv_source" field.</summary>
    public const int DdivSourceFieldNumber = 139;
    private global::Spiderrock.Protobuf.DDivSource ddivSource_ = global::Spiderrock.Protobuf.DDivSource.Unspecified;
    /// <summary>
    /// Forecast if any of the dividends prior to expiry are forecast rather than announced
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.DDivSource DdivSource {
      get { return ddivSource_; }
      set {
        ddivSource_ = value;
      }
    }

    /// <summary>Field number for the "symbol_ratio" field.</summary>
    public const int SymbolRatioFieldNumber = 142;
    private float symbolRatio_;
    /// <summary>
    /// underlier price ratio (usually 1.0 or a multi-hedge option price ratio; if one exists)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SymbolRatio {
      get { return symbolRatio_; }
      set {
        symbolRatio_ = value;
      }
    }

    /// <summary>Field number for the "ex_type" field.</summary>
    public const int ExTypeFieldNumber = 145;
    private global::Spiderrock.Protobuf.ExerciseType exType_ = global::Spiderrock.Protobuf.ExerciseType.Unspecified;
    /// <summary>
    /// exercise type (American or European)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.ExerciseType ExType {
      get { return exType_; }
      set {
        exType_ = value;
      }
    }

    /// <summary>Field number for the "model_type" field.</summary>
    public const int ModelTypeFieldNumber = 148;
    private global::Spiderrock.Protobuf.CalcModelType modelType_ = global::Spiderrock.Protobuf.CalcModelType.Unspecified;
    /// <summary>
    /// option pricing model used for price calcs (Normal, LogNormal, etc.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CalcModelType ModelType {
      get { return modelType_; }
      set {
        modelType_ = value;
      }
    }

    /// <summary>Field number for the "price_type" field.</summary>
    public const int PriceTypeFieldNumber = 151;
    private global::Spiderrock.Protobuf.CalcPriceType priceType_ = global::Spiderrock.Protobuf.CalcPriceType.Unspecified;
    /// <summary>
    /// Equity has independent sdiv and rate, Future has sdiv = rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CalcPriceType PriceType {
      get { return priceType_; }
      set {
        priceType_ = value;
      }
    }

    /// <summary>Field number for the "earn_cnt" field.</summary>
    public const int EarnCntFieldNumber = 154;
    private float earnCnt_;
    /// <summary>
    /// number of qualifying earnings events prior to expiration [can be fractional] (from StockEarningsCalendar)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EarnCnt {
      get { return earnCnt_; }
      set {
        earnCnt_ = value;
      }
    }

    /// <summary>Field number for the "earn_cnt_adj" field.</summary>
    public const int EarnCntAdjFieldNumber = 157;
    private float earnCntAdj_;
    /// <summary>
    /// number of qualifying earnings events prior to expiration [adjusted] (from StockEarningsCalendar + LiveSurfaceTerm)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EarnCntAdj {
      get { return earnCntAdj_; }
      set {
        earnCntAdj_ = value;
      }
    }

    /// <summary>Field number for the "axis_vol_rT" field.</summary>
    public const int AxisVolRTFieldNumber = 160;
    private float axisVolRT_;
    /// <summary>
    /// axis volatility x sqrt(years) (used to compute xAxis) [usually the minimum curve volatility]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AxisVolRT {
      get { return axisVolRT_; }
      set {
        axisVolRT_ = value;
      }
    }

    /// <summary>Field number for the "axis_fUPrc" field.</summary>
    public const int AxisFUPrcFieldNumber = 163;
    private float axisFUPrc_;
    /// <summary>
    /// axis FwdUPrc (fwd underlying price used to compute xAxis)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AxisFUPrc {
      get { return axisFUPrc_; }
      set {
        axisFUPrc_ = value;
      }
    }

    /// <summary>Field number for the "moneyness_type" field.</summary>
    public const int MoneynessTypeFieldNumber = 166;
    private global::Spiderrock.Protobuf.MoneynessType moneynessType_ = global::Spiderrock.Protobuf.MoneynessType.Unspecified;
    /// <summary>
    /// moneyness (xAxis) convention
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MoneynessType MoneynessType {
      get { return moneynessType_; }
      set {
        moneynessType_ = value;
      }
    }

    /// <summary>Field number for the "price_quote_type" field.</summary>
    public const int PriceQuoteTypeFieldNumber = 169;
    private global::Spiderrock.Protobuf.PriceQuoteType priceQuoteType_ = global::Spiderrock.Protobuf.PriceQuoteType.Unspecified;
    /// <summary>
    /// Price or Vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceQuoteType PriceQuoteType {
      get { return priceQuoteType_; }
      set {
        priceQuoteType_ = value;
      }
    }

    /// <summary>Field number for the "atm_vol" field.</summary>
    public const int AtmVolFieldNumber = 172;
    private float atmVol_;
    /// <summary>
    /// atm vol (xAxis = 0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmVol {
      get { return atmVol_; }
      set {
        atmVol_ = value;
      }
    }

    /// <summary>Field number for the "atm_cen" field.</summary>
    public const int AtmCenFieldNumber = 175;
    private float atmCen_;
    /// <summary>
    /// atm vol (xAxis = 0) (eMove/earnCntAdj censored)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmCen {
      get { return atmCen_; }
      set {
        atmCen_ = value;
      }
    }

    /// <summary>Field number for the "atm_vol_hist" field.</summary>
    public const int AtmVolHistFieldNumber = 178;
    private float atmVolHist_;
    /// <summary>
    /// historical realized volatility (includes eMoveHist x earnCntAdj adjustment).  Note that this is the default atmVol if no implied markets existed previous day.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmVolHist {
      get { return atmVolHist_; }
      set {
        atmVolHist_ = value;
      }
    }

    /// <summary>Field number for the "atm_cen_hist" field.</summary>
    public const int AtmCenHistFieldNumber = 181;
    private float atmCenHist_;
    /// <summary>
    /// censored (earnings events removed) historical realized volatility.  Trailing periods is 2x forward time to expiration.  From HistoricalVolatility(windowType=hlCen).mv_nnn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmCenHist {
      get { return atmCenHist_; }
      set {
        atmCenHist_ = value;
      }
    }

    /// <summary>Field number for the "e_move" field.</summary>
    public const int EMoveFieldNumber = 184;
    private float eMove_;
    /// <summary>
    /// implied earnings move (from LiveSurfaceTerm)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EMove {
      get { return eMove_; }
      set {
        eMove_ = value;
      }
    }

    /// <summary>Field number for the "e_move_hist" field.</summary>
    public const int EMoveHistFieldNumber = 187;
    private float eMoveHist_;
    /// <summary>
    /// historical earnings move (avg of trailing 8 moves). From StockEarningsCalendar.eMoveHist
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float EMoveHist {
      get { return eMoveHist_; }
      set {
        eMoveHist_ = value;
      }
    }

    /// <summary>Field number for the "u_prc_ratio" field.</summary>
    public const int UPrcRatioFieldNumber = 190;
    private double uPrcRatio_;
    /// <summary>
    /// uPrcAdj = uPrc * uPrcRatioFit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UPrcRatio {
      get { return uPrcRatio_; }
      set {
        uPrcRatio_ = value;
      }
    }

    /// <summary>Field number for the "min_atm_vol" field.</summary>
    public const int MinAtmVolFieldNumber = 193;
    private float minAtmVol_;
    /// <summary>
    /// minimum estimated atm vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinAtmVol {
      get { return minAtmVol_; }
      set {
        minAtmVol_ = value;
      }
    }

    /// <summary>Field number for the "max_atm_vol" field.</summary>
    public const int MaxAtmVolFieldNumber = 196;
    private float maxAtmVol_;
    /// <summary>
    /// maximum estimated atm vol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxAtmVol {
      get { return maxAtmVol_; }
      set {
        maxAtmVol_ = value;
      }
    }

    /// <summary>Field number for the "min_cPAdj_val" field.</summary>
    public const int MinCPAdjValFieldNumber = 199;
    private double minCPAdjVal_;
    /// <summary>
    /// minimum cpAdjVal (sdiv or uPrcRatio)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MinCPAdjVal {
      get { return minCPAdjVal_; }
      set {
        minCPAdjVal_ = value;
      }
    }

    /// <summary>Field number for the "max_cPAdj_val" field.</summary>
    public const int MaxCPAdjValFieldNumber = 202;
    private double maxCPAdjVal_;
    /// <summary>
    /// minimum cpAdjVal (sdiv or uPrcRatio)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MaxCPAdjVal {
      get { return maxCPAdjVal_; }
      set {
        maxCPAdjVal_ = value;
      }
    }

    /// <summary>Field number for the "atm_fixed_move" field.</summary>
    public const int AtmFixedMoveFieldNumber = 205;
    private float atmFixedMove_;
    /// <summary>
    /// fixed strike atm move from prior period
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmFixedMove {
      get { return atmFixedMove_; }
      set {
        atmFixedMove_ = value;
      }
    }

    /// <summary>Field number for the "atm_phi" field.</summary>
    public const int AtmPhiFieldNumber = 208;
    private float atmPhi_;
    /// <summary>
    /// surface phi @ xAxis = 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmPhi {
      get { return atmPhi_; }
      set {
        atmPhi_ = value;
      }
    }

    /// <summary>Field number for the "atm_rho" field.</summary>
    public const int AtmRhoFieldNumber = 211;
    private float atmRho_;
    /// <summary>
    /// surface rho @ xAxis = 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmRho {
      get { return atmRho_; }
      set {
        atmRho_ = value;
      }
    }

    /// <summary>Field number for the "atm_vega" field.</summary>
    public const int AtmVegaFieldNumber = 214;
    private float atmVega_;
    /// <summary>
    /// surface vega @ xAxis = 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AtmVega {
      get { return atmVega_; }
      set {
        atmVega_ = value;
      }
    }

    /// <summary>Field number for the "slope" field.</summary>
    public const int SlopeFieldNumber = 217;
    private float slope_;
    /// <summary>
    /// volatility surface slope (dVol / dXAxis) @ ATM (xAxis=0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Slope {
      get { return slope_; }
      set {
        slope_ = value;
      }
    }

    /// <summary>Field number for the "var_swap_fV" field.</summary>
    public const int VarSwapFVFieldNumber = 220;
    private float varSwapFV_;
    /// <summary>
    /// variance swap fair value (estimated by numerical integration over OTM price surface)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VarSwapFV {
      get { return varSwapFV_; }
      set {
        varSwapFV_ = value;
      }
    }

    /// <summary>Field number for the "min_xAxis" field.</summary>
    public const int MinXAxisFieldNumber = 223;
    private float minXAxis_;
    /// <summary>
    /// minimum xAxis value; left most point with a valid supporting strike
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinXAxis {
      get { return minXAxis_; }
      set {
        minXAxis_ = value;
      }
    }

    /// <summary>Field number for the "max_xAxis" field.</summary>
    public const int MaxXAxisFieldNumber = 226;
    private float maxXAxis_;
    /// <summary>
    /// maximum xAxis value; right most point with a valid supporting strike
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxXAxis {
      get { return maxXAxis_; }
      set {
        maxXAxis_ = value;
      }
    }

    /// <summary>Field number for the "skew_ticker" field.</summary>
    public const int SkewTickerFieldNumber = 229;
    private global::Spiderrock.Protobuf.TickerKey skewTicker_;
    /// <summary>
    /// references a SkewBasisCurve record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey SkewTicker {
      get { return skewTicker_; }
      set {
        skewTicker_ = value;
      }
    }

    /// <summary>Field number for the "x_shift" field.</summary>
    public const int XShiftFieldNumber = 232;
    private double xShift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double XShift {
      get { return xShift_; }
      set {
        xShift_ = value;
      }
    }

    /// <summary>Field number for the "x_mult" field.</summary>
    public const int XMultFieldNumber = 235;
    private double xMult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double XMult {
      get { return xMult_; }
      set {
        xMult_ = value;
      }
    }

    /// <summary>Field number for the "skew_mult" field.</summary>
    public const int SkewMultFieldNumber = 238;
    private double skewMult_;
    /// <summary>
    /// SVOL = skewMult * BasisSkewFn(xShift + xMult * xAxis) + IVolBias(xAxis)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SkewMult {
      get { return skewMult_; }
      set {
        skewMult_ = value;
      }
    }

    /// <summary>Field number for the "skew_c00" field.</summary>
    public const int SkewC00FieldNumber = 241;
    private float skewC00_;
    /// <summary>
    /// curve coeff[0]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC00 {
      get { return skewC00_; }
      set {
        skewC00_ = value;
      }
    }

    /// <summary>Field number for the "skew_c01" field.</summary>
    public const int SkewC01FieldNumber = 244;
    private float skewC01_;
    /// <summary>
    /// curve coeff[1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC01 {
      get { return skewC01_; }
      set {
        skewC01_ = value;
      }
    }

    /// <summary>Field number for the "skew_c02" field.</summary>
    public const int SkewC02FieldNumber = 247;
    private float skewC02_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC02 {
      get { return skewC02_; }
      set {
        skewC02_ = value;
      }
    }

    /// <summary>Field number for the "skew_c03" field.</summary>
    public const int SkewC03FieldNumber = 250;
    private float skewC03_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC03 {
      get { return skewC03_; }
      set {
        skewC03_ = value;
      }
    }

    /// <summary>Field number for the "skew_c04" field.</summary>
    public const int SkewC04FieldNumber = 253;
    private float skewC04_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC04 {
      get { return skewC04_; }
      set {
        skewC04_ = value;
      }
    }

    /// <summary>Field number for the "skew_c05" field.</summary>
    public const int SkewC05FieldNumber = 256;
    private float skewC05_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC05 {
      get { return skewC05_; }
      set {
        skewC05_ = value;
      }
    }

    /// <summary>Field number for the "skew_c06" field.</summary>
    public const int SkewC06FieldNumber = 259;
    private float skewC06_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC06 {
      get { return skewC06_; }
      set {
        skewC06_ = value;
      }
    }

    /// <summary>Field number for the "skew_c07" field.</summary>
    public const int SkewC07FieldNumber = 262;
    private float skewC07_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC07 {
      get { return skewC07_; }
      set {
        skewC07_ = value;
      }
    }

    /// <summary>Field number for the "skew_c08" field.</summary>
    public const int SkewC08FieldNumber = 265;
    private float skewC08_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC08 {
      get { return skewC08_; }
      set {
        skewC08_ = value;
      }
    }

    /// <summary>Field number for the "skew_c09" field.</summary>
    public const int SkewC09FieldNumber = 268;
    private float skewC09_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC09 {
      get { return skewC09_; }
      set {
        skewC09_ = value;
      }
    }

    /// <summary>Field number for the "skew_c10" field.</summary>
    public const int SkewC10FieldNumber = 271;
    private float skewC10_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC10 {
      get { return skewC10_; }
      set {
        skewC10_ = value;
      }
    }

    /// <summary>Field number for the "skew_c11" field.</summary>
    public const int SkewC11FieldNumber = 274;
    private float skewC11_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC11 {
      get { return skewC11_; }
      set {
        skewC11_ = value;
      }
    }

    /// <summary>Field number for the "skew_c12" field.</summary>
    public const int SkewC12FieldNumber = 277;
    private float skewC12_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC12 {
      get { return skewC12_; }
      set {
        skewC12_ = value;
      }
    }

    /// <summary>Field number for the "skew_c13" field.</summary>
    public const int SkewC13FieldNumber = 280;
    private float skewC13_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC13 {
      get { return skewC13_; }
      set {
        skewC13_ = value;
      }
    }

    /// <summary>Field number for the "skew_c14" field.</summary>
    public const int SkewC14FieldNumber = 283;
    private float skewC14_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC14 {
      get { return skewC14_; }
      set {
        skewC14_ = value;
      }
    }

    /// <summary>Field number for the "skew_c15" field.</summary>
    public const int SkewC15FieldNumber = 286;
    private float skewC15_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC15 {
      get { return skewC15_; }
      set {
        skewC15_ = value;
      }
    }

    /// <summary>Field number for the "skew_c16" field.</summary>
    public const int SkewC16FieldNumber = 289;
    private float skewC16_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC16 {
      get { return skewC16_; }
      set {
        skewC16_ = value;
      }
    }

    /// <summary>Field number for the "skew_c17" field.</summary>
    public const int SkewC17FieldNumber = 292;
    private float skewC17_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC17 {
      get { return skewC17_; }
      set {
        skewC17_ = value;
      }
    }

    /// <summary>Field number for the "skew_c18" field.</summary>
    public const int SkewC18FieldNumber = 295;
    private float skewC18_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC18 {
      get { return skewC18_; }
      set {
        skewC18_ = value;
      }
    }

    /// <summary>Field number for the "skew_c19" field.</summary>
    public const int SkewC19FieldNumber = 298;
    private float skewC19_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC19 {
      get { return skewC19_; }
      set {
        skewC19_ = value;
      }
    }

    /// <summary>Field number for the "skew_c20" field.</summary>
    public const int SkewC20FieldNumber = 301;
    private float skewC20_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC20 {
      get { return skewC20_; }
      set {
        skewC20_ = value;
      }
    }

    /// <summary>Field number for the "skew_c21" field.</summary>
    public const int SkewC21FieldNumber = 304;
    private float skewC21_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC21 {
      get { return skewC21_; }
      set {
        skewC21_ = value;
      }
    }

    /// <summary>Field number for the "skew_c22" field.</summary>
    public const int SkewC22FieldNumber = 307;
    private float skewC22_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC22 {
      get { return skewC22_; }
      set {
        skewC22_ = value;
      }
    }

    /// <summary>Field number for the "skew_c23" field.</summary>
    public const int SkewC23FieldNumber = 310;
    private float skewC23_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC23 {
      get { return skewC23_; }
      set {
        skewC23_ = value;
      }
    }

    /// <summary>Field number for the "skew_c24" field.</summary>
    public const int SkewC24FieldNumber = 313;
    private float skewC24_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC24 {
      get { return skewC24_; }
      set {
        skewC24_ = value;
      }
    }

    /// <summary>Field number for the "skew_c25" field.</summary>
    public const int SkewC25FieldNumber = 316;
    private float skewC25_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC25 {
      get { return skewC25_; }
      set {
        skewC25_ = value;
      }
    }

    /// <summary>Field number for the "skew_c26" field.</summary>
    public const int SkewC26FieldNumber = 319;
    private float skewC26_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC26 {
      get { return skewC26_; }
      set {
        skewC26_ = value;
      }
    }

    /// <summary>Field number for the "skew_c27" field.</summary>
    public const int SkewC27FieldNumber = 322;
    private float skewC27_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC27 {
      get { return skewC27_; }
      set {
        skewC27_ = value;
      }
    }

    /// <summary>Field number for the "skew_c28" field.</summary>
    public const int SkewC28FieldNumber = 325;
    private float skewC28_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC28 {
      get { return skewC28_; }
      set {
        skewC28_ = value;
      }
    }

    /// <summary>Field number for the "skew_c29" field.</summary>
    public const int SkewC29FieldNumber = 328;
    private float skewC29_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC29 {
      get { return skewC29_; }
      set {
        skewC29_ = value;
      }
    }

    /// <summary>Field number for the "skew_c30" field.</summary>
    public const int SkewC30FieldNumber = 331;
    private float skewC30_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float SkewC30 {
      get { return skewC30_; }
      set {
        skewC30_ = value;
      }
    }

    /// <summary>Field number for the "cp_adj_d04" field.</summary>
    public const int CpAdjD04FieldNumber = 334;
    private float cpAdjD04_;
    /// <summary>
    /// xAxis = -4.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CpAdjD04 {
      get { return cpAdjD04_; }
      set {
        cpAdjD04_ = value;
      }
    }

    /// <summary>Field number for the "cp_adj_d03" field.</summary>
    public const int CpAdjD03FieldNumber = 337;
    private float cpAdjD03_;
    /// <summary>
    /// xAxis = -3.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CpAdjD03 {
      get { return cpAdjD03_; }
      set {
        cpAdjD03_ = value;
      }
    }

    /// <summary>Field number for the "cp_adj_d02" field.</summary>
    public const int CpAdjD02FieldNumber = 340;
    private float cpAdjD02_;
    /// <summary>
    /// xAxis = -2.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CpAdjD02 {
      get { return cpAdjD02_; }
      set {
        cpAdjD02_ = value;
      }
    }

    /// <summary>Field number for the "cp_adj_d01" field.</summary>
    public const int CpAdjD01FieldNumber = 343;
    private float cpAdjD01_;
    /// <summary>
    /// xAxis = -1.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CpAdjD01 {
      get { return cpAdjD01_; }
      set {
        cpAdjD01_ = value;
      }
    }

    /// <summary>Field number for the "cp_adj_u01" field.</summary>
    public const int CpAdjU01FieldNumber = 346;
    private float cpAdjU01_;
    /// <summary>
    /// xAxis = +1.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CpAdjU01 {
      get { return cpAdjU01_; }
      set {
        cpAdjU01_ = value;
      }
    }

    /// <summary>Field number for the "cp_adj_u02" field.</summary>
    public const int CpAdjU02FieldNumber = 349;
    private float cpAdjU02_;
    /// <summary>
    /// xAxis = +2.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CpAdjU02 {
      get { return cpAdjU02_; }
      set {
        cpAdjU02_ = value;
      }
    }

    /// <summary>Field number for the "cp_adj_u03" field.</summary>
    public const int CpAdjU03FieldNumber = 352;
    private float cpAdjU03_;
    /// <summary>
    /// xAxis = +3.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CpAdjU03 {
      get { return cpAdjU03_; }
      set {
        cpAdjU03_ = value;
      }
    }

    /// <summary>Field number for the "cp_adj_u04" field.</summary>
    public const int CpAdjU04FieldNumber = 355;
    private float cpAdjU04_;
    /// <summary>
    /// xAxis = +4.0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float CpAdjU04 {
      get { return cpAdjU04_; }
      set {
        cpAdjU04_ = value;
      }
    }

    /// <summary>Field number for the "pwidth" field.</summary>
    public const int PwidthFieldNumber = 358;
    private float pwidth_;
    /// <summary>
    /// minimum mkt premium width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Pwidth {
      get { return pwidth_; }
      set {
        pwidth_ = value;
      }
    }

    /// <summary>Field number for the "vwidth" field.</summary>
    public const int VwidthFieldNumber = 361;
    private float vwidth_;
    /// <summary>
    /// minimum mkt volatility width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Vwidth {
      get { return vwidth_; }
      set {
        vwidth_ = value;
      }
    }

    /// <summary>Field number for the "c_cnt" field.</summary>
    public const int CCntFieldNumber = 364;
    private int cCnt_;
    /// <summary>
    /// num call strikes in base fit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CCnt {
      get { return cCnt_; }
      set {
        cCnt_ = value;
      }
    }

    /// <summary>Field number for the "p_cnt" field.</summary>
    public const int PCntFieldNumber = 367;
    private int pCnt_;
    /// <summary>
    /// num put strikes in base fit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PCnt {
      get { return pCnt_; }
      set {
        pCnt_ = value;
      }
    }

    /// <summary>Field number for the "c_bid_miss" field.</summary>
    public const int CBidMissFieldNumber = 370;
    private int cBidMiss_;
    /// <summary>
    /// number of call bid violations (surface outside the market)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CBidMiss {
      get { return cBidMiss_; }
      set {
        cBidMiss_ = value;
      }
    }

    /// <summary>Field number for the "c_ask_miss" field.</summary>
    public const int CAskMissFieldNumber = 373;
    private int cAskMiss_;
    /// <summary>
    /// number of call ask violations (surface outside the market)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CAskMiss {
      get { return cAskMiss_; }
      set {
        cAskMiss_ = value;
      }
    }

    /// <summary>Field number for the "p_bid_miss" field.</summary>
    public const int PBidMissFieldNumber = 376;
    private int pBidMiss_;
    /// <summary>
    /// number of put bid violations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PBidMiss {
      get { return pBidMiss_; }
      set {
        pBidMiss_ = value;
      }
    }

    /// <summary>Field number for the "p_ask_miss" field.</summary>
    public const int PAskMissFieldNumber = 379;
    private int pAskMiss_;
    /// <summary>
    /// number of put ask violations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PAskMiss {
      get { return pAskMiss_; }
      set {
        pAskMiss_ = value;
      }
    }

    /// <summary>Field number for the "fit_avg_err" field.</summary>
    public const int FitAvgErrFieldNumber = 382;
    private float fitAvgErr_;
    /// <summary>
    /// average error (sPrc - midPrc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitAvgErr {
      get { return fitAvgErr_; }
      set {
        fitAvgErr_ = value;
      }
    }

    /// <summary>Field number for the "fit_avg_abs_err" field.</summary>
    public const int FitAvgAbsErrFieldNumber = 385;
    private float fitAvgAbsErr_;
    /// <summary>
    /// average absolute error (sPrc - midPrc)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitAvgAbsErr {
      get { return fitAvgAbsErr_; }
      set {
        fitAvgAbsErr_ = value;
      }
    }

    /// <summary>Field number for the "fit_max_prc_err" field.</summary>
    public const int FitMaxPrcErrFieldNumber = 388;
    private float fitMaxPrcErr_;
    /// <summary>
    /// worst case surface premium violation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitMaxPrcErr {
      get { return fitMaxPrcErr_; }
      set {
        fitMaxPrcErr_ = value;
      }
    }

    /// <summary>Field number for the "fit_err_xX" field.</summary>
    public const int FitErrXXFieldNumber = 391;
    private float fitErrXX_;
    /// <summary>
    /// okey_xx of the option with the largest fit error in this expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitErrXX {
      get { return fitErrXX_; }
      set {
        fitErrXX_ = value;
      }
    }

    /// <summary>Field number for the "fit_err_cP" field.</summary>
    public const int FitErrCPFieldNumber = 394;
    private global::Spiderrock.Protobuf.CallPut fitErrCP_ = global::Spiderrock.Protobuf.CallPut.Unspecified;
    /// <summary>
    /// okey_cp of the option with the largest fit error in this expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.CallPut FitErrCP {
      get { return fitErrCP_; }
      set {
        fitErrCP_ = value;
      }
    }

    /// <summary>Field number for the "fit_err_de" field.</summary>
    public const int FitErrDeFieldNumber = 397;
    private float fitErrDe_;
    /// <summary>
    /// delta of fixErrXX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitErrDe {
      get { return fitErrDe_; }
      set {
        fitErrDe_ = value;
      }
    }

    /// <summary>Field number for the "fit_err_bid" field.</summary>
    public const int FitErrBidFieldNumber = 400;
    private float fitErrBid_;
    /// <summary>
    /// bid of the option with the largest fit error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitErrBid {
      get { return fitErrBid_; }
      set {
        fitErrBid_ = value;
      }
    }

    /// <summary>Field number for the "fit_err_ask" field.</summary>
    public const int FitErrAskFieldNumber = 403;
    private float fitErrAsk_;
    /// <summary>
    /// ask of the option with the largest fit error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitErrAsk {
      get { return fitErrAsk_; }
      set {
        fitErrAsk_ = value;
      }
    }

    /// <summary>Field number for the "fit_err_prc" field.</summary>
    public const int FitErrPrcFieldNumber = 406;
    private float fitErrPrc_;
    /// <summary>
    /// surface prc of the option with the largest fit error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitErrPrc {
      get { return fitErrPrc_; }
      set {
        fitErrPrc_ = value;
      }
    }

    /// <summary>Field number for the "fit_err_vol" field.</summary>
    public const int FitErrVolFieldNumber = 409;
    private float fitErrVol_;
    /// <summary>
    /// surface vol of the option with the largest fit error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FitErrVol {
      get { return fitErrVol_; }
      set {
        fitErrVol_ = value;
      }
    }

    /// <summary>Field number for the "num_saddle_pts" field.</summary>
    public const int NumSaddlePtsFieldNumber = 412;
    private int numSaddlePts_;
    /// <summary>
    /// number of saddle points
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumSaddlePts {
      get { return numSaddlePts_; }
      set {
        numSaddlePts_ = value;
      }
    }

    /// <summary>Field number for the "min_saddle_span" field.</summary>
    public const int MinSaddleSpanFieldNumber = 415;
    private float minSaddleSpan_;
    /// <summary>
    /// smallest distance between saddle points
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinSaddleSpan {
      get { return minSaddleSpan_; }
      set {
        minSaddleSpan_ = value;
      }
    }

    /// <summary>Field number for the "max_saddle_curvature" field.</summary>
    public const int MaxSaddleCurvatureFieldNumber = 418;
    private float maxSaddleCurvature_;
    /// <summary>
    /// maximum saddle point curvature
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxSaddleCurvature {
      get { return maxSaddleCurvature_; }
      set {
        maxSaddleCurvature_ = value;
      }
    }

    /// <summary>Field number for the "market_session" field.</summary>
    public const int MarketSessionFieldNumber = 421;
    private global::Spiderrock.Protobuf.MarketSession marketSession_ = global::Spiderrock.Protobuf.MarketSession.Unspecified;
    /// <summary>
    /// market session this surface is from
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarketSession MarketSession {
      get { return marketSession_; }
      set {
        marketSession_ = value;
      }
    }

    /// <summary>Field number for the "tradeable_status" field.</summary>
    public const int TradeableStatusFieldNumber = 424;
    private global::Spiderrock.Protobuf.TradeableStatus tradeableStatus_ = global::Spiderrock.Protobuf.TradeableStatus.Unspecified;
    /// <summary>
    /// indicates whether the surface is currently tradeable or not (all server surface integrity checks pass)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TradeableStatus TradeableStatus {
      get { return tradeableStatus_; }
      set {
        tradeableStatus_ = value;
      }
    }

    /// <summary>Field number for the "surface_result" field.</summary>
    public const int SurfaceResultFieldNumber = 427;
    private global::Spiderrock.Protobuf.SurfaceResult surfaceResult_ = global::Spiderrock.Protobuf.SurfaceResult.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SurfaceResult SurfaceResult {
      get { return surfaceResult_; }
      set {
        surfaceResult_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 430;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LiveSurfaceCurveV4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LiveSurfaceCurveV4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (!object.Equals(Fkey, other.Fkey)) return false;
      if (!object.Equals(UPrcDriverKey, other.UPrcDriverKey)) return false;
      if (UPrcDriverType != other.UPrcDriverType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrcDriver, other.UPrcDriver)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrc, other.UPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UBid, other.UBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UAsk, other.UAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rate, other.Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sdiv, other.Sdiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ddiv, other.Ddiv)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DdivPv, other.DdivPv)) return false;
      if (DdivSource != other.DdivSource) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SymbolRatio, other.SymbolRatio)) return false;
      if (ExType != other.ExType) return false;
      if (ModelType != other.ModelType) return false;
      if (PriceType != other.PriceType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EarnCnt, other.EarnCnt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EarnCntAdj, other.EarnCntAdj)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AxisVolRT, other.AxisVolRT)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AxisFUPrc, other.AxisFUPrc)) return false;
      if (MoneynessType != other.MoneynessType) return false;
      if (PriceQuoteType != other.PriceQuoteType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVol, other.AtmVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmCen, other.AtmCen)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVolHist, other.AtmVolHist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmCenHist, other.AtmCenHist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EMove, other.EMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EMoveHist, other.EMoveHist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UPrcRatio, other.UPrcRatio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinAtmVol, other.MinAtmVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxAtmVol, other.MaxAtmVol)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinCPAdjVal, other.MinCPAdjVal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxCPAdjVal, other.MaxCPAdjVal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmFixedMove, other.AtmFixedMove)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmPhi, other.AtmPhi)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmRho, other.AtmRho)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtmVega, other.AtmVega)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Slope, other.Slope)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VarSwapFV, other.VarSwapFV)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinXAxis, other.MinXAxis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxXAxis, other.MaxXAxis)) return false;
      if (!object.Equals(SkewTicker, other.SkewTicker)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(XShift, other.XShift)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(XMult, other.XMult)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SkewMult, other.SkewMult)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC00, other.SkewC00)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC01, other.SkewC01)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC02, other.SkewC02)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC03, other.SkewC03)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC04, other.SkewC04)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC05, other.SkewC05)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC06, other.SkewC06)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC07, other.SkewC07)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC08, other.SkewC08)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC09, other.SkewC09)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC10, other.SkewC10)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC11, other.SkewC11)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC12, other.SkewC12)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC13, other.SkewC13)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC14, other.SkewC14)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC15, other.SkewC15)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC16, other.SkewC16)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC17, other.SkewC17)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC18, other.SkewC18)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC19, other.SkewC19)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC20, other.SkewC20)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC21, other.SkewC21)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC22, other.SkewC22)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC23, other.SkewC23)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC24, other.SkewC24)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC25, other.SkewC25)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC26, other.SkewC26)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC27, other.SkewC27)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC28, other.SkewC28)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC29, other.SkewC29)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SkewC30, other.SkewC30)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpAdjD04, other.CpAdjD04)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpAdjD03, other.CpAdjD03)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpAdjD02, other.CpAdjD02)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpAdjD01, other.CpAdjD01)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpAdjU01, other.CpAdjU01)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpAdjU02, other.CpAdjU02)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpAdjU03, other.CpAdjU03)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CpAdjU04, other.CpAdjU04)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pwidth, other.Pwidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vwidth, other.Vwidth)) return false;
      if (CCnt != other.CCnt) return false;
      if (PCnt != other.PCnt) return false;
      if (CBidMiss != other.CBidMiss) return false;
      if (CAskMiss != other.CAskMiss) return false;
      if (PBidMiss != other.PBidMiss) return false;
      if (PAskMiss != other.PAskMiss) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitAvgErr, other.FitAvgErr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitAvgAbsErr, other.FitAvgAbsErr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitMaxPrcErr, other.FitMaxPrcErr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitErrXX, other.FitErrXX)) return false;
      if (FitErrCP != other.FitErrCP) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitErrDe, other.FitErrDe)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitErrBid, other.FitErrBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitErrAsk, other.FitErrAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitErrPrc, other.FitErrPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FitErrVol, other.FitErrVol)) return false;
      if (NumSaddlePts != other.NumSaddlePts) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinSaddleSpan, other.MinSaddleSpan)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSaddleCurvature, other.MaxSaddleCurvature)) return false;
      if (MarketSession != other.MarketSession) return false;
      if (TradeableStatus != other.TradeableStatus) return false;
      if (SurfaceResult != other.SurfaceResult) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (fkey_ != null) hash ^= Fkey.GetHashCode();
      if (uPrcDriverKey_ != null) hash ^= UPrcDriverKey.GetHashCode();
      if (UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) hash ^= UPrcDriverType.GetHashCode();
      if (UPrcDriver != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrcDriver);
      if (UPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrc);
      if (UBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UBid);
      if (UAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UAsk);
      if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
      if (Rate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rate);
      if (Sdiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sdiv);
      if (Ddiv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ddiv);
      if (DdivPv != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DdivPv);
      if (DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) hash ^= DdivSource.GetHashCode();
      if (SymbolRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SymbolRatio);
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) hash ^= ExType.GetHashCode();
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) hash ^= ModelType.GetHashCode();
      if (PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) hash ^= PriceType.GetHashCode();
      if (EarnCnt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EarnCnt);
      if (EarnCntAdj != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EarnCntAdj);
      if (AxisVolRT != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AxisVolRT);
      if (AxisFUPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AxisFUPrc);
      if (MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) hash ^= MoneynessType.GetHashCode();
      if (PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) hash ^= PriceQuoteType.GetHashCode();
      if (AtmVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVol);
      if (AtmCen != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmCen);
      if (AtmVolHist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVolHist);
      if (AtmCenHist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmCenHist);
      if (EMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EMove);
      if (EMoveHist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EMoveHist);
      if (UPrcRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UPrcRatio);
      if (MinAtmVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinAtmVol);
      if (MaxAtmVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxAtmVol);
      if (MinCPAdjVal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinCPAdjVal);
      if (MaxCPAdjVal != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxCPAdjVal);
      if (AtmFixedMove != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmFixedMove);
      if (AtmPhi != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmPhi);
      if (AtmRho != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmRho);
      if (AtmVega != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtmVega);
      if (Slope != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Slope);
      if (VarSwapFV != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VarSwapFV);
      if (MinXAxis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinXAxis);
      if (MaxXAxis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxXAxis);
      if (skewTicker_ != null) hash ^= SkewTicker.GetHashCode();
      if (XShift != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(XShift);
      if (XMult != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(XMult);
      if (SkewMult != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SkewMult);
      if (SkewC00 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC00);
      if (SkewC01 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC01);
      if (SkewC02 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC02);
      if (SkewC03 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC03);
      if (SkewC04 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC04);
      if (SkewC05 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC05);
      if (SkewC06 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC06);
      if (SkewC07 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC07);
      if (SkewC08 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC08);
      if (SkewC09 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC09);
      if (SkewC10 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC10);
      if (SkewC11 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC11);
      if (SkewC12 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC12);
      if (SkewC13 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC13);
      if (SkewC14 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC14);
      if (SkewC15 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC15);
      if (SkewC16 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC16);
      if (SkewC17 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC17);
      if (SkewC18 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC18);
      if (SkewC19 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC19);
      if (SkewC20 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC20);
      if (SkewC21 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC21);
      if (SkewC22 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC22);
      if (SkewC23 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC23);
      if (SkewC24 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC24);
      if (SkewC25 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC25);
      if (SkewC26 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC26);
      if (SkewC27 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC27);
      if (SkewC28 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC28);
      if (SkewC29 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC29);
      if (SkewC30 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SkewC30);
      if (CpAdjD04 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpAdjD04);
      if (CpAdjD03 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpAdjD03);
      if (CpAdjD02 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpAdjD02);
      if (CpAdjD01 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpAdjD01);
      if (CpAdjU01 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpAdjU01);
      if (CpAdjU02 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpAdjU02);
      if (CpAdjU03 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpAdjU03);
      if (CpAdjU04 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CpAdjU04);
      if (Pwidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pwidth);
      if (Vwidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vwidth);
      if (CCnt != 0) hash ^= CCnt.GetHashCode();
      if (PCnt != 0) hash ^= PCnt.GetHashCode();
      if (CBidMiss != 0) hash ^= CBidMiss.GetHashCode();
      if (CAskMiss != 0) hash ^= CAskMiss.GetHashCode();
      if (PBidMiss != 0) hash ^= PBidMiss.GetHashCode();
      if (PAskMiss != 0) hash ^= PAskMiss.GetHashCode();
      if (FitAvgErr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitAvgErr);
      if (FitAvgAbsErr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitAvgAbsErr);
      if (FitMaxPrcErr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitMaxPrcErr);
      if (FitErrXX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitErrXX);
      if (FitErrCP != global::Spiderrock.Protobuf.CallPut.Unspecified) hash ^= FitErrCP.GetHashCode();
      if (FitErrDe != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitErrDe);
      if (FitErrBid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitErrBid);
      if (FitErrAsk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitErrAsk);
      if (FitErrPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitErrPrc);
      if (FitErrVol != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FitErrVol);
      if (NumSaddlePts != 0) hash ^= NumSaddlePts.GetHashCode();
      if (MinSaddleSpan != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinSaddleSpan);
      if (MaxSaddleCurvature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSaddleCurvature);
      if (MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) hash ^= MarketSession.GetHashCode();
      if (TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) hash ^= TradeableStatus.GetHashCode();
      if (SurfaceResult != global::Spiderrock.Protobuf.SurfaceResult.Unspecified) hash ^= SurfaceResult.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (fkey_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(Fkey);
      }
      if (uPrcDriverKey_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(UPrcDriverKey);
      }
      if (UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) UPrcDriverType);
      }
      if (UPrcDriver != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(UPrcDriver);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(153, 7);
        output.WriteDouble(UPrc);
      }
      if (UBid != 0D) {
        output.WriteRawTag(177, 7);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(UAsk);
      }
      if (Years != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(Years);
      }
      if (Rate != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(Rate);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(Sdiv);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(Ddiv);
      }
      if (DdivPv != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(DdivPv);
      }
      if (DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) DdivSource);
      }
      if (SymbolRatio != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(SymbolRatio);
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) ExType);
      }
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) ModelType);
      }
      if (PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) PriceType);
      }
      if (EarnCnt != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(EarnCnt);
      }
      if (EarnCntAdj != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(EarnCntAdj);
      }
      if (AxisVolRT != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(AxisVolRT);
      }
      if (AxisFUPrc != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(AxisFUPrc);
      }
      if (MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) {
        output.WriteRawTag(176, 10);
        output.WriteEnum((int) MoneynessType);
      }
      if (PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) {
        output.WriteRawTag(200, 10);
        output.WriteEnum((int) PriceQuoteType);
      }
      if (AtmVol != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(AtmVol);
      }
      if (AtmCen != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(AtmCen);
      }
      if (AtmVolHist != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(AtmVolHist);
      }
      if (AtmCenHist != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(AtmCenHist);
      }
      if (EMove != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(EMove);
      }
      if (EMoveHist != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(EMoveHist);
      }
      if (UPrcRatio != 0D) {
        output.WriteRawTag(241, 11);
        output.WriteDouble(UPrcRatio);
      }
      if (MinAtmVol != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(MinAtmVol);
      }
      if (MaxAtmVol != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(MaxAtmVol);
      }
      if (MinCPAdjVal != 0D) {
        output.WriteRawTag(185, 12);
        output.WriteDouble(MinCPAdjVal);
      }
      if (MaxCPAdjVal != 0D) {
        output.WriteRawTag(209, 12);
        output.WriteDouble(MaxCPAdjVal);
      }
      if (AtmFixedMove != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(AtmFixedMove);
      }
      if (AtmPhi != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(AtmPhi);
      }
      if (AtmRho != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(AtmRho);
      }
      if (AtmVega != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(AtmVega);
      }
      if (Slope != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(Slope);
      }
      if (VarSwapFV != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(VarSwapFV);
      }
      if (MinXAxis != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(MinXAxis);
      }
      if (MaxXAxis != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(MaxXAxis);
      }
      if (skewTicker_ != null) {
        output.WriteRawTag(170, 14);
        output.WriteMessage(SkewTicker);
      }
      if (XShift != 0D) {
        output.WriteRawTag(193, 14);
        output.WriteDouble(XShift);
      }
      if (XMult != 0D) {
        output.WriteRawTag(217, 14);
        output.WriteDouble(XMult);
      }
      if (SkewMult != 0D) {
        output.WriteRawTag(241, 14);
        output.WriteDouble(SkewMult);
      }
      if (SkewC00 != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(SkewC00);
      }
      if (SkewC01 != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(SkewC01);
      }
      if (SkewC02 != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(SkewC02);
      }
      if (SkewC03 != 0F) {
        output.WriteRawTag(213, 15);
        output.WriteFloat(SkewC03);
      }
      if (SkewC04 != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(SkewC04);
      }
      if (SkewC05 != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(SkewC05);
      }
      if (SkewC06 != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(SkewC06);
      }
      if (SkewC07 != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(SkewC07);
      }
      if (SkewC08 != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(SkewC08);
      }
      if (SkewC09 != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(SkewC09);
      }
      if (SkewC10 != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(SkewC10);
      }
      if (SkewC11 != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(SkewC11);
      }
      if (SkewC12 != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(SkewC12);
      }
      if (SkewC13 != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(SkewC13);
      }
      if (SkewC14 != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(SkewC14);
      }
      if (SkewC15 != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(SkewC15);
      }
      if (SkewC16 != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(SkewC16);
      }
      if (SkewC17 != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(SkewC17);
      }
      if (SkewC18 != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(SkewC18);
      }
      if (SkewC19 != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(SkewC19);
      }
      if (SkewC20 != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(SkewC20);
      }
      if (SkewC21 != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(SkewC21);
      }
      if (SkewC22 != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(SkewC22);
      }
      if (SkewC23 != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(SkewC23);
      }
      if (SkewC24 != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(SkewC24);
      }
      if (SkewC25 != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(SkewC25);
      }
      if (SkewC26 != 0F) {
        output.WriteRawTag(253, 19);
        output.WriteFloat(SkewC26);
      }
      if (SkewC27 != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(SkewC27);
      }
      if (SkewC28 != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(SkewC28);
      }
      if (SkewC29 != 0F) {
        output.WriteRawTag(197, 20);
        output.WriteFloat(SkewC29);
      }
      if (SkewC30 != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(SkewC30);
      }
      if (CpAdjD04 != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(CpAdjD04);
      }
      if (CpAdjD03 != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(CpAdjD03);
      }
      if (CpAdjD02 != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(CpAdjD02);
      }
      if (CpAdjD01 != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(CpAdjD01);
      }
      if (CpAdjU01 != 0F) {
        output.WriteRawTag(213, 21);
        output.WriteFloat(CpAdjU01);
      }
      if (CpAdjU02 != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(CpAdjU02);
      }
      if (CpAdjU03 != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(CpAdjU03);
      }
      if (CpAdjU04 != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(CpAdjU04);
      }
      if (Pwidth != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(Pwidth);
      }
      if (Vwidth != 0F) {
        output.WriteRawTag(205, 22);
        output.WriteFloat(Vwidth);
      }
      if (CCnt != 0) {
        output.WriteRawTag(224, 22);
        output.WriteInt32(CCnt);
      }
      if (PCnt != 0) {
        output.WriteRawTag(248, 22);
        output.WriteInt32(PCnt);
      }
      if (CBidMiss != 0) {
        output.WriteRawTag(144, 23);
        output.WriteInt32(CBidMiss);
      }
      if (CAskMiss != 0) {
        output.WriteRawTag(168, 23);
        output.WriteInt32(CAskMiss);
      }
      if (PBidMiss != 0) {
        output.WriteRawTag(192, 23);
        output.WriteInt32(PBidMiss);
      }
      if (PAskMiss != 0) {
        output.WriteRawTag(216, 23);
        output.WriteInt32(PAskMiss);
      }
      if (FitAvgErr != 0F) {
        output.WriteRawTag(245, 23);
        output.WriteFloat(FitAvgErr);
      }
      if (FitAvgAbsErr != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(FitAvgAbsErr);
      }
      if (FitMaxPrcErr != 0F) {
        output.WriteRawTag(165, 24);
        output.WriteFloat(FitMaxPrcErr);
      }
      if (FitErrXX != 0F) {
        output.WriteRawTag(189, 24);
        output.WriteFloat(FitErrXX);
      }
      if (FitErrCP != global::Spiderrock.Protobuf.CallPut.Unspecified) {
        output.WriteRawTag(208, 24);
        output.WriteEnum((int) FitErrCP);
      }
      if (FitErrDe != 0F) {
        output.WriteRawTag(237, 24);
        output.WriteFloat(FitErrDe);
      }
      if (FitErrBid != 0F) {
        output.WriteRawTag(133, 25);
        output.WriteFloat(FitErrBid);
      }
      if (FitErrAsk != 0F) {
        output.WriteRawTag(157, 25);
        output.WriteFloat(FitErrAsk);
      }
      if (FitErrPrc != 0F) {
        output.WriteRawTag(181, 25);
        output.WriteFloat(FitErrPrc);
      }
      if (FitErrVol != 0F) {
        output.WriteRawTag(205, 25);
        output.WriteFloat(FitErrVol);
      }
      if (NumSaddlePts != 0) {
        output.WriteRawTag(224, 25);
        output.WriteInt32(NumSaddlePts);
      }
      if (MinSaddleSpan != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(MinSaddleSpan);
      }
      if (MaxSaddleCurvature != 0F) {
        output.WriteRawTag(149, 26);
        output.WriteFloat(MaxSaddleCurvature);
      }
      if (MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        output.WriteRawTag(168, 26);
        output.WriteEnum((int) MarketSession);
      }
      if (TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) {
        output.WriteRawTag(192, 26);
        output.WriteEnum((int) TradeableStatus);
      }
      if (SurfaceResult != global::Spiderrock.Protobuf.SurfaceResult.Unspecified) {
        output.WriteRawTag(216, 26);
        output.WriteEnum((int) SurfaceResult);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(242, 26);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ticker_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Ticker);
      }
      if (fkey_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(Fkey);
      }
      if (uPrcDriverKey_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(UPrcDriverKey);
      }
      if (UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        output.WriteRawTag(232, 6);
        output.WriteEnum((int) UPrcDriverType);
      }
      if (UPrcDriver != 0D) {
        output.WriteRawTag(129, 7);
        output.WriteDouble(UPrcDriver);
      }
      if (UPrc != 0D) {
        output.WriteRawTag(153, 7);
        output.WriteDouble(UPrc);
      }
      if (UBid != 0D) {
        output.WriteRawTag(177, 7);
        output.WriteDouble(UBid);
      }
      if (UAsk != 0D) {
        output.WriteRawTag(201, 7);
        output.WriteDouble(UAsk);
      }
      if (Years != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(Years);
      }
      if (Rate != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(Rate);
      }
      if (Sdiv != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(Sdiv);
      }
      if (Ddiv != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(Ddiv);
      }
      if (DdivPv != 0F) {
        output.WriteRawTag(197, 8);
        output.WriteFloat(DdivPv);
      }
      if (DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) DdivSource);
      }
      if (SymbolRatio != 0F) {
        output.WriteRawTag(245, 8);
        output.WriteFloat(SymbolRatio);
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) ExType);
      }
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        output.WriteRawTag(160, 9);
        output.WriteEnum((int) ModelType);
      }
      if (PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) {
        output.WriteRawTag(184, 9);
        output.WriteEnum((int) PriceType);
      }
      if (EarnCnt != 0F) {
        output.WriteRawTag(213, 9);
        output.WriteFloat(EarnCnt);
      }
      if (EarnCntAdj != 0F) {
        output.WriteRawTag(237, 9);
        output.WriteFloat(EarnCntAdj);
      }
      if (AxisVolRT != 0F) {
        output.WriteRawTag(133, 10);
        output.WriteFloat(AxisVolRT);
      }
      if (AxisFUPrc != 0F) {
        output.WriteRawTag(157, 10);
        output.WriteFloat(AxisFUPrc);
      }
      if (MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) {
        output.WriteRawTag(176, 10);
        output.WriteEnum((int) MoneynessType);
      }
      if (PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) {
        output.WriteRawTag(200, 10);
        output.WriteEnum((int) PriceQuoteType);
      }
      if (AtmVol != 0F) {
        output.WriteRawTag(229, 10);
        output.WriteFloat(AtmVol);
      }
      if (AtmCen != 0F) {
        output.WriteRawTag(253, 10);
        output.WriteFloat(AtmCen);
      }
      if (AtmVolHist != 0F) {
        output.WriteRawTag(149, 11);
        output.WriteFloat(AtmVolHist);
      }
      if (AtmCenHist != 0F) {
        output.WriteRawTag(173, 11);
        output.WriteFloat(AtmCenHist);
      }
      if (EMove != 0F) {
        output.WriteRawTag(197, 11);
        output.WriteFloat(EMove);
      }
      if (EMoveHist != 0F) {
        output.WriteRawTag(221, 11);
        output.WriteFloat(EMoveHist);
      }
      if (UPrcRatio != 0D) {
        output.WriteRawTag(241, 11);
        output.WriteDouble(UPrcRatio);
      }
      if (MinAtmVol != 0F) {
        output.WriteRawTag(141, 12);
        output.WriteFloat(MinAtmVol);
      }
      if (MaxAtmVol != 0F) {
        output.WriteRawTag(165, 12);
        output.WriteFloat(MaxAtmVol);
      }
      if (MinCPAdjVal != 0D) {
        output.WriteRawTag(185, 12);
        output.WriteDouble(MinCPAdjVal);
      }
      if (MaxCPAdjVal != 0D) {
        output.WriteRawTag(209, 12);
        output.WriteDouble(MaxCPAdjVal);
      }
      if (AtmFixedMove != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(AtmFixedMove);
      }
      if (AtmPhi != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(AtmPhi);
      }
      if (AtmRho != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(AtmRho);
      }
      if (AtmVega != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(AtmVega);
      }
      if (Slope != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(Slope);
      }
      if (VarSwapFV != 0F) {
        output.WriteRawTag(229, 13);
        output.WriteFloat(VarSwapFV);
      }
      if (MinXAxis != 0F) {
        output.WriteRawTag(253, 13);
        output.WriteFloat(MinXAxis);
      }
      if (MaxXAxis != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(MaxXAxis);
      }
      if (skewTicker_ != null) {
        output.WriteRawTag(170, 14);
        output.WriteMessage(SkewTicker);
      }
      if (XShift != 0D) {
        output.WriteRawTag(193, 14);
        output.WriteDouble(XShift);
      }
      if (XMult != 0D) {
        output.WriteRawTag(217, 14);
        output.WriteDouble(XMult);
      }
      if (SkewMult != 0D) {
        output.WriteRawTag(241, 14);
        output.WriteDouble(SkewMult);
      }
      if (SkewC00 != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(SkewC00);
      }
      if (SkewC01 != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(SkewC01);
      }
      if (SkewC02 != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(SkewC02);
      }
      if (SkewC03 != 0F) {
        output.WriteRawTag(213, 15);
        output.WriteFloat(SkewC03);
      }
      if (SkewC04 != 0F) {
        output.WriteRawTag(237, 15);
        output.WriteFloat(SkewC04);
      }
      if (SkewC05 != 0F) {
        output.WriteRawTag(133, 16);
        output.WriteFloat(SkewC05);
      }
      if (SkewC06 != 0F) {
        output.WriteRawTag(157, 16);
        output.WriteFloat(SkewC06);
      }
      if (SkewC07 != 0F) {
        output.WriteRawTag(181, 16);
        output.WriteFloat(SkewC07);
      }
      if (SkewC08 != 0F) {
        output.WriteRawTag(205, 16);
        output.WriteFloat(SkewC08);
      }
      if (SkewC09 != 0F) {
        output.WriteRawTag(229, 16);
        output.WriteFloat(SkewC09);
      }
      if (SkewC10 != 0F) {
        output.WriteRawTag(253, 16);
        output.WriteFloat(SkewC10);
      }
      if (SkewC11 != 0F) {
        output.WriteRawTag(149, 17);
        output.WriteFloat(SkewC11);
      }
      if (SkewC12 != 0F) {
        output.WriteRawTag(173, 17);
        output.WriteFloat(SkewC12);
      }
      if (SkewC13 != 0F) {
        output.WriteRawTag(197, 17);
        output.WriteFloat(SkewC13);
      }
      if (SkewC14 != 0F) {
        output.WriteRawTag(221, 17);
        output.WriteFloat(SkewC14);
      }
      if (SkewC15 != 0F) {
        output.WriteRawTag(245, 17);
        output.WriteFloat(SkewC15);
      }
      if (SkewC16 != 0F) {
        output.WriteRawTag(141, 18);
        output.WriteFloat(SkewC16);
      }
      if (SkewC17 != 0F) {
        output.WriteRawTag(165, 18);
        output.WriteFloat(SkewC17);
      }
      if (SkewC18 != 0F) {
        output.WriteRawTag(189, 18);
        output.WriteFloat(SkewC18);
      }
      if (SkewC19 != 0F) {
        output.WriteRawTag(213, 18);
        output.WriteFloat(SkewC19);
      }
      if (SkewC20 != 0F) {
        output.WriteRawTag(237, 18);
        output.WriteFloat(SkewC20);
      }
      if (SkewC21 != 0F) {
        output.WriteRawTag(133, 19);
        output.WriteFloat(SkewC21);
      }
      if (SkewC22 != 0F) {
        output.WriteRawTag(157, 19);
        output.WriteFloat(SkewC22);
      }
      if (SkewC23 != 0F) {
        output.WriteRawTag(181, 19);
        output.WriteFloat(SkewC23);
      }
      if (SkewC24 != 0F) {
        output.WriteRawTag(205, 19);
        output.WriteFloat(SkewC24);
      }
      if (SkewC25 != 0F) {
        output.WriteRawTag(229, 19);
        output.WriteFloat(SkewC25);
      }
      if (SkewC26 != 0F) {
        output.WriteRawTag(253, 19);
        output.WriteFloat(SkewC26);
      }
      if (SkewC27 != 0F) {
        output.WriteRawTag(149, 20);
        output.WriteFloat(SkewC27);
      }
      if (SkewC28 != 0F) {
        output.WriteRawTag(173, 20);
        output.WriteFloat(SkewC28);
      }
      if (SkewC29 != 0F) {
        output.WriteRawTag(197, 20);
        output.WriteFloat(SkewC29);
      }
      if (SkewC30 != 0F) {
        output.WriteRawTag(221, 20);
        output.WriteFloat(SkewC30);
      }
      if (CpAdjD04 != 0F) {
        output.WriteRawTag(245, 20);
        output.WriteFloat(CpAdjD04);
      }
      if (CpAdjD03 != 0F) {
        output.WriteRawTag(141, 21);
        output.WriteFloat(CpAdjD03);
      }
      if (CpAdjD02 != 0F) {
        output.WriteRawTag(165, 21);
        output.WriteFloat(CpAdjD02);
      }
      if (CpAdjD01 != 0F) {
        output.WriteRawTag(189, 21);
        output.WriteFloat(CpAdjD01);
      }
      if (CpAdjU01 != 0F) {
        output.WriteRawTag(213, 21);
        output.WriteFloat(CpAdjU01);
      }
      if (CpAdjU02 != 0F) {
        output.WriteRawTag(237, 21);
        output.WriteFloat(CpAdjU02);
      }
      if (CpAdjU03 != 0F) {
        output.WriteRawTag(133, 22);
        output.WriteFloat(CpAdjU03);
      }
      if (CpAdjU04 != 0F) {
        output.WriteRawTag(157, 22);
        output.WriteFloat(CpAdjU04);
      }
      if (Pwidth != 0F) {
        output.WriteRawTag(181, 22);
        output.WriteFloat(Pwidth);
      }
      if (Vwidth != 0F) {
        output.WriteRawTag(205, 22);
        output.WriteFloat(Vwidth);
      }
      if (CCnt != 0) {
        output.WriteRawTag(224, 22);
        output.WriteInt32(CCnt);
      }
      if (PCnt != 0) {
        output.WriteRawTag(248, 22);
        output.WriteInt32(PCnt);
      }
      if (CBidMiss != 0) {
        output.WriteRawTag(144, 23);
        output.WriteInt32(CBidMiss);
      }
      if (CAskMiss != 0) {
        output.WriteRawTag(168, 23);
        output.WriteInt32(CAskMiss);
      }
      if (PBidMiss != 0) {
        output.WriteRawTag(192, 23);
        output.WriteInt32(PBidMiss);
      }
      if (PAskMiss != 0) {
        output.WriteRawTag(216, 23);
        output.WriteInt32(PAskMiss);
      }
      if (FitAvgErr != 0F) {
        output.WriteRawTag(245, 23);
        output.WriteFloat(FitAvgErr);
      }
      if (FitAvgAbsErr != 0F) {
        output.WriteRawTag(141, 24);
        output.WriteFloat(FitAvgAbsErr);
      }
      if (FitMaxPrcErr != 0F) {
        output.WriteRawTag(165, 24);
        output.WriteFloat(FitMaxPrcErr);
      }
      if (FitErrXX != 0F) {
        output.WriteRawTag(189, 24);
        output.WriteFloat(FitErrXX);
      }
      if (FitErrCP != global::Spiderrock.Protobuf.CallPut.Unspecified) {
        output.WriteRawTag(208, 24);
        output.WriteEnum((int) FitErrCP);
      }
      if (FitErrDe != 0F) {
        output.WriteRawTag(237, 24);
        output.WriteFloat(FitErrDe);
      }
      if (FitErrBid != 0F) {
        output.WriteRawTag(133, 25);
        output.WriteFloat(FitErrBid);
      }
      if (FitErrAsk != 0F) {
        output.WriteRawTag(157, 25);
        output.WriteFloat(FitErrAsk);
      }
      if (FitErrPrc != 0F) {
        output.WriteRawTag(181, 25);
        output.WriteFloat(FitErrPrc);
      }
      if (FitErrVol != 0F) {
        output.WriteRawTag(205, 25);
        output.WriteFloat(FitErrVol);
      }
      if (NumSaddlePts != 0) {
        output.WriteRawTag(224, 25);
        output.WriteInt32(NumSaddlePts);
      }
      if (MinSaddleSpan != 0F) {
        output.WriteRawTag(253, 25);
        output.WriteFloat(MinSaddleSpan);
      }
      if (MaxSaddleCurvature != 0F) {
        output.WriteRawTag(149, 26);
        output.WriteFloat(MaxSaddleCurvature);
      }
      if (MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        output.WriteRawTag(168, 26);
        output.WriteEnum((int) MarketSession);
      }
      if (TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) {
        output.WriteRawTag(192, 26);
        output.WriteEnum((int) TradeableStatus);
      }
      if (SurfaceResult != global::Spiderrock.Protobuf.SurfaceResult.Unspecified) {
        output.WriteRawTag(216, 26);
        output.WriteEnum((int) SurfaceResult);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(242, 26);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (fkey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Fkey);
      }
      if (uPrcDriverKey_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UPrcDriverKey);
      }
      if (UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UPrcDriverType);
      }
      if (UPrcDriver != 0D) {
        size += 2 + 8;
      }
      if (UPrc != 0D) {
        size += 2 + 8;
      }
      if (UBid != 0D) {
        size += 2 + 8;
      }
      if (UAsk != 0D) {
        size += 2 + 8;
      }
      if (Years != 0F) {
        size += 2 + 4;
      }
      if (Rate != 0F) {
        size += 2 + 4;
      }
      if (Sdiv != 0F) {
        size += 2 + 4;
      }
      if (Ddiv != 0F) {
        size += 2 + 4;
      }
      if (DdivPv != 0F) {
        size += 2 + 4;
      }
      if (DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DdivSource);
      }
      if (SymbolRatio != 0F) {
        size += 2 + 4;
      }
      if (ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ExType);
      }
      if (ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ModelType);
      }
      if (PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceType);
      }
      if (EarnCnt != 0F) {
        size += 2 + 4;
      }
      if (EarnCntAdj != 0F) {
        size += 2 + 4;
      }
      if (AxisVolRT != 0F) {
        size += 2 + 4;
      }
      if (AxisFUPrc != 0F) {
        size += 2 + 4;
      }
      if (MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MoneynessType);
      }
      if (PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceQuoteType);
      }
      if (AtmVol != 0F) {
        size += 2 + 4;
      }
      if (AtmCen != 0F) {
        size += 2 + 4;
      }
      if (AtmVolHist != 0F) {
        size += 2 + 4;
      }
      if (AtmCenHist != 0F) {
        size += 2 + 4;
      }
      if (EMove != 0F) {
        size += 2 + 4;
      }
      if (EMoveHist != 0F) {
        size += 2 + 4;
      }
      if (UPrcRatio != 0D) {
        size += 2 + 8;
      }
      if (MinAtmVol != 0F) {
        size += 2 + 4;
      }
      if (MaxAtmVol != 0F) {
        size += 2 + 4;
      }
      if (MinCPAdjVal != 0D) {
        size += 2 + 8;
      }
      if (MaxCPAdjVal != 0D) {
        size += 2 + 8;
      }
      if (AtmFixedMove != 0F) {
        size += 2 + 4;
      }
      if (AtmPhi != 0F) {
        size += 2 + 4;
      }
      if (AtmRho != 0F) {
        size += 2 + 4;
      }
      if (AtmVega != 0F) {
        size += 2 + 4;
      }
      if (Slope != 0F) {
        size += 2 + 4;
      }
      if (VarSwapFV != 0F) {
        size += 2 + 4;
      }
      if (MinXAxis != 0F) {
        size += 2 + 4;
      }
      if (MaxXAxis != 0F) {
        size += 2 + 4;
      }
      if (skewTicker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SkewTicker);
      }
      if (XShift != 0D) {
        size += 2 + 8;
      }
      if (XMult != 0D) {
        size += 2 + 8;
      }
      if (SkewMult != 0D) {
        size += 2 + 8;
      }
      if (SkewC00 != 0F) {
        size += 2 + 4;
      }
      if (SkewC01 != 0F) {
        size += 2 + 4;
      }
      if (SkewC02 != 0F) {
        size += 2 + 4;
      }
      if (SkewC03 != 0F) {
        size += 2 + 4;
      }
      if (SkewC04 != 0F) {
        size += 2 + 4;
      }
      if (SkewC05 != 0F) {
        size += 2 + 4;
      }
      if (SkewC06 != 0F) {
        size += 2 + 4;
      }
      if (SkewC07 != 0F) {
        size += 2 + 4;
      }
      if (SkewC08 != 0F) {
        size += 2 + 4;
      }
      if (SkewC09 != 0F) {
        size += 2 + 4;
      }
      if (SkewC10 != 0F) {
        size += 2 + 4;
      }
      if (SkewC11 != 0F) {
        size += 2 + 4;
      }
      if (SkewC12 != 0F) {
        size += 2 + 4;
      }
      if (SkewC13 != 0F) {
        size += 2 + 4;
      }
      if (SkewC14 != 0F) {
        size += 2 + 4;
      }
      if (SkewC15 != 0F) {
        size += 2 + 4;
      }
      if (SkewC16 != 0F) {
        size += 2 + 4;
      }
      if (SkewC17 != 0F) {
        size += 2 + 4;
      }
      if (SkewC18 != 0F) {
        size += 2 + 4;
      }
      if (SkewC19 != 0F) {
        size += 2 + 4;
      }
      if (SkewC20 != 0F) {
        size += 2 + 4;
      }
      if (SkewC21 != 0F) {
        size += 2 + 4;
      }
      if (SkewC22 != 0F) {
        size += 2 + 4;
      }
      if (SkewC23 != 0F) {
        size += 2 + 4;
      }
      if (SkewC24 != 0F) {
        size += 2 + 4;
      }
      if (SkewC25 != 0F) {
        size += 2 + 4;
      }
      if (SkewC26 != 0F) {
        size += 2 + 4;
      }
      if (SkewC27 != 0F) {
        size += 2 + 4;
      }
      if (SkewC28 != 0F) {
        size += 2 + 4;
      }
      if (SkewC29 != 0F) {
        size += 2 + 4;
      }
      if (SkewC30 != 0F) {
        size += 2 + 4;
      }
      if (CpAdjD04 != 0F) {
        size += 2 + 4;
      }
      if (CpAdjD03 != 0F) {
        size += 2 + 4;
      }
      if (CpAdjD02 != 0F) {
        size += 2 + 4;
      }
      if (CpAdjD01 != 0F) {
        size += 2 + 4;
      }
      if (CpAdjU01 != 0F) {
        size += 2 + 4;
      }
      if (CpAdjU02 != 0F) {
        size += 2 + 4;
      }
      if (CpAdjU03 != 0F) {
        size += 2 + 4;
      }
      if (CpAdjU04 != 0F) {
        size += 2 + 4;
      }
      if (Pwidth != 0F) {
        size += 2 + 4;
      }
      if (Vwidth != 0F) {
        size += 2 + 4;
      }
      if (CCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CCnt);
      }
      if (PCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PCnt);
      }
      if (CBidMiss != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CBidMiss);
      }
      if (CAskMiss != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CAskMiss);
      }
      if (PBidMiss != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PBidMiss);
      }
      if (PAskMiss != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PAskMiss);
      }
      if (FitAvgErr != 0F) {
        size += 2 + 4;
      }
      if (FitAvgAbsErr != 0F) {
        size += 2 + 4;
      }
      if (FitMaxPrcErr != 0F) {
        size += 2 + 4;
      }
      if (FitErrXX != 0F) {
        size += 2 + 4;
      }
      if (FitErrCP != global::Spiderrock.Protobuf.CallPut.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FitErrCP);
      }
      if (FitErrDe != 0F) {
        size += 2 + 4;
      }
      if (FitErrBid != 0F) {
        size += 2 + 4;
      }
      if (FitErrAsk != 0F) {
        size += 2 + 4;
      }
      if (FitErrPrc != 0F) {
        size += 2 + 4;
      }
      if (FitErrVol != 0F) {
        size += 2 + 4;
      }
      if (NumSaddlePts != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumSaddlePts);
      }
      if (MinSaddleSpan != 0F) {
        size += 2 + 4;
      }
      if (MaxSaddleCurvature != 0F) {
        size += 2 + 4;
      }
      if (MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MarketSession);
      }
      if (TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TradeableStatus);
      }
      if (SurfaceResult != global::Spiderrock.Protobuf.SurfaceResult.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SurfaceResult);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LiveSurfaceCurveV4 other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.LiveSurfaceCurveV4.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.fkey_ != null) {
        if (fkey_ == null) {
          Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        Fkey.MergeFrom(other.Fkey);
      }
      if (other.uPrcDriverKey_ != null) {
        if (uPrcDriverKey_ == null) {
          UPrcDriverKey = new global::Spiderrock.Protobuf.ExpiryKey();
        }
        UPrcDriverKey.MergeFrom(other.UPrcDriverKey);
      }
      if (other.UPrcDriverType != global::Spiderrock.Protobuf.SpdrKeyType.Unspecified) {
        UPrcDriverType = other.UPrcDriverType;
      }
      if (other.UPrcDriver != 0D) {
        UPrcDriver = other.UPrcDriver;
      }
      if (other.UPrc != 0D) {
        UPrc = other.UPrc;
      }
      if (other.UBid != 0D) {
        UBid = other.UBid;
      }
      if (other.UAsk != 0D) {
        UAsk = other.UAsk;
      }
      if (other.Years != 0F) {
        Years = other.Years;
      }
      if (other.Rate != 0F) {
        Rate = other.Rate;
      }
      if (other.Sdiv != 0F) {
        Sdiv = other.Sdiv;
      }
      if (other.Ddiv != 0F) {
        Ddiv = other.Ddiv;
      }
      if (other.DdivPv != 0F) {
        DdivPv = other.DdivPv;
      }
      if (other.DdivSource != global::Spiderrock.Protobuf.DDivSource.Unspecified) {
        DdivSource = other.DdivSource;
      }
      if (other.SymbolRatio != 0F) {
        SymbolRatio = other.SymbolRatio;
      }
      if (other.ExType != global::Spiderrock.Protobuf.ExerciseType.Unspecified) {
        ExType = other.ExType;
      }
      if (other.ModelType != global::Spiderrock.Protobuf.CalcModelType.Unspecified) {
        ModelType = other.ModelType;
      }
      if (other.PriceType != global::Spiderrock.Protobuf.CalcPriceType.Unspecified) {
        PriceType = other.PriceType;
      }
      if (other.EarnCnt != 0F) {
        EarnCnt = other.EarnCnt;
      }
      if (other.EarnCntAdj != 0F) {
        EarnCntAdj = other.EarnCntAdj;
      }
      if (other.AxisVolRT != 0F) {
        AxisVolRT = other.AxisVolRT;
      }
      if (other.AxisFUPrc != 0F) {
        AxisFUPrc = other.AxisFUPrc;
      }
      if (other.MoneynessType != global::Spiderrock.Protobuf.MoneynessType.Unspecified) {
        MoneynessType = other.MoneynessType;
      }
      if (other.PriceQuoteType != global::Spiderrock.Protobuf.PriceQuoteType.Unspecified) {
        PriceQuoteType = other.PriceQuoteType;
      }
      if (other.AtmVol != 0F) {
        AtmVol = other.AtmVol;
      }
      if (other.AtmCen != 0F) {
        AtmCen = other.AtmCen;
      }
      if (other.AtmVolHist != 0F) {
        AtmVolHist = other.AtmVolHist;
      }
      if (other.AtmCenHist != 0F) {
        AtmCenHist = other.AtmCenHist;
      }
      if (other.EMove != 0F) {
        EMove = other.EMove;
      }
      if (other.EMoveHist != 0F) {
        EMoveHist = other.EMoveHist;
      }
      if (other.UPrcRatio != 0D) {
        UPrcRatio = other.UPrcRatio;
      }
      if (other.MinAtmVol != 0F) {
        MinAtmVol = other.MinAtmVol;
      }
      if (other.MaxAtmVol != 0F) {
        MaxAtmVol = other.MaxAtmVol;
      }
      if (other.MinCPAdjVal != 0D) {
        MinCPAdjVal = other.MinCPAdjVal;
      }
      if (other.MaxCPAdjVal != 0D) {
        MaxCPAdjVal = other.MaxCPAdjVal;
      }
      if (other.AtmFixedMove != 0F) {
        AtmFixedMove = other.AtmFixedMove;
      }
      if (other.AtmPhi != 0F) {
        AtmPhi = other.AtmPhi;
      }
      if (other.AtmRho != 0F) {
        AtmRho = other.AtmRho;
      }
      if (other.AtmVega != 0F) {
        AtmVega = other.AtmVega;
      }
      if (other.Slope != 0F) {
        Slope = other.Slope;
      }
      if (other.VarSwapFV != 0F) {
        VarSwapFV = other.VarSwapFV;
      }
      if (other.MinXAxis != 0F) {
        MinXAxis = other.MinXAxis;
      }
      if (other.MaxXAxis != 0F) {
        MaxXAxis = other.MaxXAxis;
      }
      if (other.skewTicker_ != null) {
        if (skewTicker_ == null) {
          SkewTicker = new global::Spiderrock.Protobuf.TickerKey();
        }
        SkewTicker.MergeFrom(other.SkewTicker);
      }
      if (other.XShift != 0D) {
        XShift = other.XShift;
      }
      if (other.XMult != 0D) {
        XMult = other.XMult;
      }
      if (other.SkewMult != 0D) {
        SkewMult = other.SkewMult;
      }
      if (other.SkewC00 != 0F) {
        SkewC00 = other.SkewC00;
      }
      if (other.SkewC01 != 0F) {
        SkewC01 = other.SkewC01;
      }
      if (other.SkewC02 != 0F) {
        SkewC02 = other.SkewC02;
      }
      if (other.SkewC03 != 0F) {
        SkewC03 = other.SkewC03;
      }
      if (other.SkewC04 != 0F) {
        SkewC04 = other.SkewC04;
      }
      if (other.SkewC05 != 0F) {
        SkewC05 = other.SkewC05;
      }
      if (other.SkewC06 != 0F) {
        SkewC06 = other.SkewC06;
      }
      if (other.SkewC07 != 0F) {
        SkewC07 = other.SkewC07;
      }
      if (other.SkewC08 != 0F) {
        SkewC08 = other.SkewC08;
      }
      if (other.SkewC09 != 0F) {
        SkewC09 = other.SkewC09;
      }
      if (other.SkewC10 != 0F) {
        SkewC10 = other.SkewC10;
      }
      if (other.SkewC11 != 0F) {
        SkewC11 = other.SkewC11;
      }
      if (other.SkewC12 != 0F) {
        SkewC12 = other.SkewC12;
      }
      if (other.SkewC13 != 0F) {
        SkewC13 = other.SkewC13;
      }
      if (other.SkewC14 != 0F) {
        SkewC14 = other.SkewC14;
      }
      if (other.SkewC15 != 0F) {
        SkewC15 = other.SkewC15;
      }
      if (other.SkewC16 != 0F) {
        SkewC16 = other.SkewC16;
      }
      if (other.SkewC17 != 0F) {
        SkewC17 = other.SkewC17;
      }
      if (other.SkewC18 != 0F) {
        SkewC18 = other.SkewC18;
      }
      if (other.SkewC19 != 0F) {
        SkewC19 = other.SkewC19;
      }
      if (other.SkewC20 != 0F) {
        SkewC20 = other.SkewC20;
      }
      if (other.SkewC21 != 0F) {
        SkewC21 = other.SkewC21;
      }
      if (other.SkewC22 != 0F) {
        SkewC22 = other.SkewC22;
      }
      if (other.SkewC23 != 0F) {
        SkewC23 = other.SkewC23;
      }
      if (other.SkewC24 != 0F) {
        SkewC24 = other.SkewC24;
      }
      if (other.SkewC25 != 0F) {
        SkewC25 = other.SkewC25;
      }
      if (other.SkewC26 != 0F) {
        SkewC26 = other.SkewC26;
      }
      if (other.SkewC27 != 0F) {
        SkewC27 = other.SkewC27;
      }
      if (other.SkewC28 != 0F) {
        SkewC28 = other.SkewC28;
      }
      if (other.SkewC29 != 0F) {
        SkewC29 = other.SkewC29;
      }
      if (other.SkewC30 != 0F) {
        SkewC30 = other.SkewC30;
      }
      if (other.CpAdjD04 != 0F) {
        CpAdjD04 = other.CpAdjD04;
      }
      if (other.CpAdjD03 != 0F) {
        CpAdjD03 = other.CpAdjD03;
      }
      if (other.CpAdjD02 != 0F) {
        CpAdjD02 = other.CpAdjD02;
      }
      if (other.CpAdjD01 != 0F) {
        CpAdjD01 = other.CpAdjD01;
      }
      if (other.CpAdjU01 != 0F) {
        CpAdjU01 = other.CpAdjU01;
      }
      if (other.CpAdjU02 != 0F) {
        CpAdjU02 = other.CpAdjU02;
      }
      if (other.CpAdjU03 != 0F) {
        CpAdjU03 = other.CpAdjU03;
      }
      if (other.CpAdjU04 != 0F) {
        CpAdjU04 = other.CpAdjU04;
      }
      if (other.Pwidth != 0F) {
        Pwidth = other.Pwidth;
      }
      if (other.Vwidth != 0F) {
        Vwidth = other.Vwidth;
      }
      if (other.CCnt != 0) {
        CCnt = other.CCnt;
      }
      if (other.PCnt != 0) {
        PCnt = other.PCnt;
      }
      if (other.CBidMiss != 0) {
        CBidMiss = other.CBidMiss;
      }
      if (other.CAskMiss != 0) {
        CAskMiss = other.CAskMiss;
      }
      if (other.PBidMiss != 0) {
        PBidMiss = other.PBidMiss;
      }
      if (other.PAskMiss != 0) {
        PAskMiss = other.PAskMiss;
      }
      if (other.FitAvgErr != 0F) {
        FitAvgErr = other.FitAvgErr;
      }
      if (other.FitAvgAbsErr != 0F) {
        FitAvgAbsErr = other.FitAvgAbsErr;
      }
      if (other.FitMaxPrcErr != 0F) {
        FitMaxPrcErr = other.FitMaxPrcErr;
      }
      if (other.FitErrXX != 0F) {
        FitErrXX = other.FitErrXX;
      }
      if (other.FitErrCP != global::Spiderrock.Protobuf.CallPut.Unspecified) {
        FitErrCP = other.FitErrCP;
      }
      if (other.FitErrDe != 0F) {
        FitErrDe = other.FitErrDe;
      }
      if (other.FitErrBid != 0F) {
        FitErrBid = other.FitErrBid;
      }
      if (other.FitErrAsk != 0F) {
        FitErrAsk = other.FitErrAsk;
      }
      if (other.FitErrPrc != 0F) {
        FitErrPrc = other.FitErrPrc;
      }
      if (other.FitErrVol != 0F) {
        FitErrVol = other.FitErrVol;
      }
      if (other.NumSaddlePts != 0) {
        NumSaddlePts = other.NumSaddlePts;
      }
      if (other.MinSaddleSpan != 0F) {
        MinSaddleSpan = other.MinSaddleSpan;
      }
      if (other.MaxSaddleCurvature != 0F) {
        MaxSaddleCurvature = other.MaxSaddleCurvature;
      }
      if (other.MarketSession != global::Spiderrock.Protobuf.MarketSession.Unspecified) {
        MarketSession = other.MarketSession;
      }
      if (other.TradeableStatus != global::Spiderrock.Protobuf.TradeableStatus.Unspecified) {
        TradeableStatus = other.TradeableStatus;
      }
      if (other.SurfaceResult != global::Spiderrock.Protobuf.SurfaceResult.Unspecified) {
        SurfaceResult = other.SurfaceResult;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.LiveSurfaceCurveV4.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 826: {
            if (fkey_ == null) {
              Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(Fkey);
            break;
          }
          case 850: {
            if (uPrcDriverKey_ == null) {
              UPrcDriverKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(UPrcDriverKey);
            break;
          }
          case 872: {
            UPrcDriverType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 897: {
            UPrcDriver = input.ReadDouble();
            break;
          }
          case 921: {
            UPrc = input.ReadDouble();
            break;
          }
          case 945: {
            UBid = input.ReadDouble();
            break;
          }
          case 969: {
            UAsk = input.ReadDouble();
            break;
          }
          case 997: {
            Years = input.ReadFloat();
            break;
          }
          case 1021: {
            Rate = input.ReadFloat();
            break;
          }
          case 1045: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 1069: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 1093: {
            DdivPv = input.ReadFloat();
            break;
          }
          case 1112: {
            DdivSource = (global::Spiderrock.Protobuf.DDivSource) input.ReadEnum();
            break;
          }
          case 1141: {
            SymbolRatio = input.ReadFloat();
            break;
          }
          case 1160: {
            ExType = (global::Spiderrock.Protobuf.ExerciseType) input.ReadEnum();
            break;
          }
          case 1184: {
            ModelType = (global::Spiderrock.Protobuf.CalcModelType) input.ReadEnum();
            break;
          }
          case 1208: {
            PriceType = (global::Spiderrock.Protobuf.CalcPriceType) input.ReadEnum();
            break;
          }
          case 1237: {
            EarnCnt = input.ReadFloat();
            break;
          }
          case 1261: {
            EarnCntAdj = input.ReadFloat();
            break;
          }
          case 1285: {
            AxisVolRT = input.ReadFloat();
            break;
          }
          case 1309: {
            AxisFUPrc = input.ReadFloat();
            break;
          }
          case 1328: {
            MoneynessType = (global::Spiderrock.Protobuf.MoneynessType) input.ReadEnum();
            break;
          }
          case 1352: {
            PriceQuoteType = (global::Spiderrock.Protobuf.PriceQuoteType) input.ReadEnum();
            break;
          }
          case 1381: {
            AtmVol = input.ReadFloat();
            break;
          }
          case 1405: {
            AtmCen = input.ReadFloat();
            break;
          }
          case 1429: {
            AtmVolHist = input.ReadFloat();
            break;
          }
          case 1453: {
            AtmCenHist = input.ReadFloat();
            break;
          }
          case 1477: {
            EMove = input.ReadFloat();
            break;
          }
          case 1501: {
            EMoveHist = input.ReadFloat();
            break;
          }
          case 1521: {
            UPrcRatio = input.ReadDouble();
            break;
          }
          case 1549: {
            MinAtmVol = input.ReadFloat();
            break;
          }
          case 1573: {
            MaxAtmVol = input.ReadFloat();
            break;
          }
          case 1593: {
            MinCPAdjVal = input.ReadDouble();
            break;
          }
          case 1617: {
            MaxCPAdjVal = input.ReadDouble();
            break;
          }
          case 1645: {
            AtmFixedMove = input.ReadFloat();
            break;
          }
          case 1669: {
            AtmPhi = input.ReadFloat();
            break;
          }
          case 1693: {
            AtmRho = input.ReadFloat();
            break;
          }
          case 1717: {
            AtmVega = input.ReadFloat();
            break;
          }
          case 1741: {
            Slope = input.ReadFloat();
            break;
          }
          case 1765: {
            VarSwapFV = input.ReadFloat();
            break;
          }
          case 1789: {
            MinXAxis = input.ReadFloat();
            break;
          }
          case 1813: {
            MaxXAxis = input.ReadFloat();
            break;
          }
          case 1834: {
            if (skewTicker_ == null) {
              SkewTicker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(SkewTicker);
            break;
          }
          case 1857: {
            XShift = input.ReadDouble();
            break;
          }
          case 1881: {
            XMult = input.ReadDouble();
            break;
          }
          case 1905: {
            SkewMult = input.ReadDouble();
            break;
          }
          case 1933: {
            SkewC00 = input.ReadFloat();
            break;
          }
          case 1957: {
            SkewC01 = input.ReadFloat();
            break;
          }
          case 1981: {
            SkewC02 = input.ReadFloat();
            break;
          }
          case 2005: {
            SkewC03 = input.ReadFloat();
            break;
          }
          case 2029: {
            SkewC04 = input.ReadFloat();
            break;
          }
          case 2053: {
            SkewC05 = input.ReadFloat();
            break;
          }
          case 2077: {
            SkewC06 = input.ReadFloat();
            break;
          }
          case 2101: {
            SkewC07 = input.ReadFloat();
            break;
          }
          case 2125: {
            SkewC08 = input.ReadFloat();
            break;
          }
          case 2149: {
            SkewC09 = input.ReadFloat();
            break;
          }
          case 2173: {
            SkewC10 = input.ReadFloat();
            break;
          }
          case 2197: {
            SkewC11 = input.ReadFloat();
            break;
          }
          case 2221: {
            SkewC12 = input.ReadFloat();
            break;
          }
          case 2245: {
            SkewC13 = input.ReadFloat();
            break;
          }
          case 2269: {
            SkewC14 = input.ReadFloat();
            break;
          }
          case 2293: {
            SkewC15 = input.ReadFloat();
            break;
          }
          case 2317: {
            SkewC16 = input.ReadFloat();
            break;
          }
          case 2341: {
            SkewC17 = input.ReadFloat();
            break;
          }
          case 2365: {
            SkewC18 = input.ReadFloat();
            break;
          }
          case 2389: {
            SkewC19 = input.ReadFloat();
            break;
          }
          case 2413: {
            SkewC20 = input.ReadFloat();
            break;
          }
          case 2437: {
            SkewC21 = input.ReadFloat();
            break;
          }
          case 2461: {
            SkewC22 = input.ReadFloat();
            break;
          }
          case 2485: {
            SkewC23 = input.ReadFloat();
            break;
          }
          case 2509: {
            SkewC24 = input.ReadFloat();
            break;
          }
          case 2533: {
            SkewC25 = input.ReadFloat();
            break;
          }
          case 2557: {
            SkewC26 = input.ReadFloat();
            break;
          }
          case 2581: {
            SkewC27 = input.ReadFloat();
            break;
          }
          case 2605: {
            SkewC28 = input.ReadFloat();
            break;
          }
          case 2629: {
            SkewC29 = input.ReadFloat();
            break;
          }
          case 2653: {
            SkewC30 = input.ReadFloat();
            break;
          }
          case 2677: {
            CpAdjD04 = input.ReadFloat();
            break;
          }
          case 2701: {
            CpAdjD03 = input.ReadFloat();
            break;
          }
          case 2725: {
            CpAdjD02 = input.ReadFloat();
            break;
          }
          case 2749: {
            CpAdjD01 = input.ReadFloat();
            break;
          }
          case 2773: {
            CpAdjU01 = input.ReadFloat();
            break;
          }
          case 2797: {
            CpAdjU02 = input.ReadFloat();
            break;
          }
          case 2821: {
            CpAdjU03 = input.ReadFloat();
            break;
          }
          case 2845: {
            CpAdjU04 = input.ReadFloat();
            break;
          }
          case 2869: {
            Pwidth = input.ReadFloat();
            break;
          }
          case 2893: {
            Vwidth = input.ReadFloat();
            break;
          }
          case 2912: {
            CCnt = input.ReadInt32();
            break;
          }
          case 2936: {
            PCnt = input.ReadInt32();
            break;
          }
          case 2960: {
            CBidMiss = input.ReadInt32();
            break;
          }
          case 2984: {
            CAskMiss = input.ReadInt32();
            break;
          }
          case 3008: {
            PBidMiss = input.ReadInt32();
            break;
          }
          case 3032: {
            PAskMiss = input.ReadInt32();
            break;
          }
          case 3061: {
            FitAvgErr = input.ReadFloat();
            break;
          }
          case 3085: {
            FitAvgAbsErr = input.ReadFloat();
            break;
          }
          case 3109: {
            FitMaxPrcErr = input.ReadFloat();
            break;
          }
          case 3133: {
            FitErrXX = input.ReadFloat();
            break;
          }
          case 3152: {
            FitErrCP = (global::Spiderrock.Protobuf.CallPut) input.ReadEnum();
            break;
          }
          case 3181: {
            FitErrDe = input.ReadFloat();
            break;
          }
          case 3205: {
            FitErrBid = input.ReadFloat();
            break;
          }
          case 3229: {
            FitErrAsk = input.ReadFloat();
            break;
          }
          case 3253: {
            FitErrPrc = input.ReadFloat();
            break;
          }
          case 3277: {
            FitErrVol = input.ReadFloat();
            break;
          }
          case 3296: {
            NumSaddlePts = input.ReadInt32();
            break;
          }
          case 3325: {
            MinSaddleSpan = input.ReadFloat();
            break;
          }
          case 3349: {
            MaxSaddleCurvature = input.ReadFloat();
            break;
          }
          case 3368: {
            MarketSession = (global::Spiderrock.Protobuf.MarketSession) input.ReadEnum();
            break;
          }
          case 3392: {
            TradeableStatus = (global::Spiderrock.Protobuf.TradeableStatus) input.ReadEnum();
            break;
          }
          case 3416: {
            SurfaceResult = (global::Spiderrock.Protobuf.SurfaceResult) input.ReadEnum();
            break;
          }
          case 3442: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.LiveSurfaceCurveV4.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 826: {
            if (fkey_ == null) {
              Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(Fkey);
            break;
          }
          case 850: {
            if (uPrcDriverKey_ == null) {
              UPrcDriverKey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            input.ReadMessage(UPrcDriverKey);
            break;
          }
          case 872: {
            UPrcDriverType = (global::Spiderrock.Protobuf.SpdrKeyType) input.ReadEnum();
            break;
          }
          case 897: {
            UPrcDriver = input.ReadDouble();
            break;
          }
          case 921: {
            UPrc = input.ReadDouble();
            break;
          }
          case 945: {
            UBid = input.ReadDouble();
            break;
          }
          case 969: {
            UAsk = input.ReadDouble();
            break;
          }
          case 997: {
            Years = input.ReadFloat();
            break;
          }
          case 1021: {
            Rate = input.ReadFloat();
            break;
          }
          case 1045: {
            Sdiv = input.ReadFloat();
            break;
          }
          case 1069: {
            Ddiv = input.ReadFloat();
            break;
          }
          case 1093: {
            DdivPv = input.ReadFloat();
            break;
          }
          case 1112: {
            DdivSource = (global::Spiderrock.Protobuf.DDivSource) input.ReadEnum();
            break;
          }
          case 1141: {
            SymbolRatio = input.ReadFloat();
            break;
          }
          case 1160: {
            ExType = (global::Spiderrock.Protobuf.ExerciseType) input.ReadEnum();
            break;
          }
          case 1184: {
            ModelType = (global::Spiderrock.Protobuf.CalcModelType) input.ReadEnum();
            break;
          }
          case 1208: {
            PriceType = (global::Spiderrock.Protobuf.CalcPriceType) input.ReadEnum();
            break;
          }
          case 1237: {
            EarnCnt = input.ReadFloat();
            break;
          }
          case 1261: {
            EarnCntAdj = input.ReadFloat();
            break;
          }
          case 1285: {
            AxisVolRT = input.ReadFloat();
            break;
          }
          case 1309: {
            AxisFUPrc = input.ReadFloat();
            break;
          }
          case 1328: {
            MoneynessType = (global::Spiderrock.Protobuf.MoneynessType) input.ReadEnum();
            break;
          }
          case 1352: {
            PriceQuoteType = (global::Spiderrock.Protobuf.PriceQuoteType) input.ReadEnum();
            break;
          }
          case 1381: {
            AtmVol = input.ReadFloat();
            break;
          }
          case 1405: {
            AtmCen = input.ReadFloat();
            break;
          }
          case 1429: {
            AtmVolHist = input.ReadFloat();
            break;
          }
          case 1453: {
            AtmCenHist = input.ReadFloat();
            break;
          }
          case 1477: {
            EMove = input.ReadFloat();
            break;
          }
          case 1501: {
            EMoveHist = input.ReadFloat();
            break;
          }
          case 1521: {
            UPrcRatio = input.ReadDouble();
            break;
          }
          case 1549: {
            MinAtmVol = input.ReadFloat();
            break;
          }
          case 1573: {
            MaxAtmVol = input.ReadFloat();
            break;
          }
          case 1593: {
            MinCPAdjVal = input.ReadDouble();
            break;
          }
          case 1617: {
            MaxCPAdjVal = input.ReadDouble();
            break;
          }
          case 1645: {
            AtmFixedMove = input.ReadFloat();
            break;
          }
          case 1669: {
            AtmPhi = input.ReadFloat();
            break;
          }
          case 1693: {
            AtmRho = input.ReadFloat();
            break;
          }
          case 1717: {
            AtmVega = input.ReadFloat();
            break;
          }
          case 1741: {
            Slope = input.ReadFloat();
            break;
          }
          case 1765: {
            VarSwapFV = input.ReadFloat();
            break;
          }
          case 1789: {
            MinXAxis = input.ReadFloat();
            break;
          }
          case 1813: {
            MaxXAxis = input.ReadFloat();
            break;
          }
          case 1834: {
            if (skewTicker_ == null) {
              SkewTicker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(SkewTicker);
            break;
          }
          case 1857: {
            XShift = input.ReadDouble();
            break;
          }
          case 1881: {
            XMult = input.ReadDouble();
            break;
          }
          case 1905: {
            SkewMult = input.ReadDouble();
            break;
          }
          case 1933: {
            SkewC00 = input.ReadFloat();
            break;
          }
          case 1957: {
            SkewC01 = input.ReadFloat();
            break;
          }
          case 1981: {
            SkewC02 = input.ReadFloat();
            break;
          }
          case 2005: {
            SkewC03 = input.ReadFloat();
            break;
          }
          case 2029: {
            SkewC04 = input.ReadFloat();
            break;
          }
          case 2053: {
            SkewC05 = input.ReadFloat();
            break;
          }
          case 2077: {
            SkewC06 = input.ReadFloat();
            break;
          }
          case 2101: {
            SkewC07 = input.ReadFloat();
            break;
          }
          case 2125: {
            SkewC08 = input.ReadFloat();
            break;
          }
          case 2149: {
            SkewC09 = input.ReadFloat();
            break;
          }
          case 2173: {
            SkewC10 = input.ReadFloat();
            break;
          }
          case 2197: {
            SkewC11 = input.ReadFloat();
            break;
          }
          case 2221: {
            SkewC12 = input.ReadFloat();
            break;
          }
          case 2245: {
            SkewC13 = input.ReadFloat();
            break;
          }
          case 2269: {
            SkewC14 = input.ReadFloat();
            break;
          }
          case 2293: {
            SkewC15 = input.ReadFloat();
            break;
          }
          case 2317: {
            SkewC16 = input.ReadFloat();
            break;
          }
          case 2341: {
            SkewC17 = input.ReadFloat();
            break;
          }
          case 2365: {
            SkewC18 = input.ReadFloat();
            break;
          }
          case 2389: {
            SkewC19 = input.ReadFloat();
            break;
          }
          case 2413: {
            SkewC20 = input.ReadFloat();
            break;
          }
          case 2437: {
            SkewC21 = input.ReadFloat();
            break;
          }
          case 2461: {
            SkewC22 = input.ReadFloat();
            break;
          }
          case 2485: {
            SkewC23 = input.ReadFloat();
            break;
          }
          case 2509: {
            SkewC24 = input.ReadFloat();
            break;
          }
          case 2533: {
            SkewC25 = input.ReadFloat();
            break;
          }
          case 2557: {
            SkewC26 = input.ReadFloat();
            break;
          }
          case 2581: {
            SkewC27 = input.ReadFloat();
            break;
          }
          case 2605: {
            SkewC28 = input.ReadFloat();
            break;
          }
          case 2629: {
            SkewC29 = input.ReadFloat();
            break;
          }
          case 2653: {
            SkewC30 = input.ReadFloat();
            break;
          }
          case 2677: {
            CpAdjD04 = input.ReadFloat();
            break;
          }
          case 2701: {
            CpAdjD03 = input.ReadFloat();
            break;
          }
          case 2725: {
            CpAdjD02 = input.ReadFloat();
            break;
          }
          case 2749: {
            CpAdjD01 = input.ReadFloat();
            break;
          }
          case 2773: {
            CpAdjU01 = input.ReadFloat();
            break;
          }
          case 2797: {
            CpAdjU02 = input.ReadFloat();
            break;
          }
          case 2821: {
            CpAdjU03 = input.ReadFloat();
            break;
          }
          case 2845: {
            CpAdjU04 = input.ReadFloat();
            break;
          }
          case 2869: {
            Pwidth = input.ReadFloat();
            break;
          }
          case 2893: {
            Vwidth = input.ReadFloat();
            break;
          }
          case 2912: {
            CCnt = input.ReadInt32();
            break;
          }
          case 2936: {
            PCnt = input.ReadInt32();
            break;
          }
          case 2960: {
            CBidMiss = input.ReadInt32();
            break;
          }
          case 2984: {
            CAskMiss = input.ReadInt32();
            break;
          }
          case 3008: {
            PBidMiss = input.ReadInt32();
            break;
          }
          case 3032: {
            PAskMiss = input.ReadInt32();
            break;
          }
          case 3061: {
            FitAvgErr = input.ReadFloat();
            break;
          }
          case 3085: {
            FitAvgAbsErr = input.ReadFloat();
            break;
          }
          case 3109: {
            FitMaxPrcErr = input.ReadFloat();
            break;
          }
          case 3133: {
            FitErrXX = input.ReadFloat();
            break;
          }
          case 3152: {
            FitErrCP = (global::Spiderrock.Protobuf.CallPut) input.ReadEnum();
            break;
          }
          case 3181: {
            FitErrDe = input.ReadFloat();
            break;
          }
          case 3205: {
            FitErrBid = input.ReadFloat();
            break;
          }
          case 3229: {
            FitErrAsk = input.ReadFloat();
            break;
          }
          case 3253: {
            FitErrPrc = input.ReadFloat();
            break;
          }
          case 3277: {
            FitErrVol = input.ReadFloat();
            break;
          }
          case 3296: {
            NumSaddlePts = input.ReadInt32();
            break;
          }
          case 3325: {
            MinSaddleSpan = input.ReadFloat();
            break;
          }
          case 3349: {
            MaxSaddleCurvature = input.ReadFloat();
            break;
          }
          case 3368: {
            MarketSession = (global::Spiderrock.Protobuf.MarketSession) input.ReadEnum();
            break;
          }
          case 3392: {
            TradeableStatus = (global::Spiderrock.Protobuf.TradeableStatus) input.ReadEnum();
            break;
          }
          case 3416: {
            SurfaceResult = (global::Spiderrock.Protobuf.SurfaceResult) input.ReadEnum();
            break;
          }
          case 3442: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the LiveSurfaceCurveV4 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.LiveSurfaceCurveV4.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ekey_ = other.ekey_ != null ? other.ekey_.Clone() : null;
          surfaceType_ = other.surfaceType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ekey" field.</summary>
        public const int EkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.ExpiryKey ekey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ExpiryKey Ekey {
          get { return ekey_; }
          set {
            ekey_ = value;
          }
        }

        /// <summary>Field number for the "surface_type" field.</summary>
        public const int SurfaceTypeFieldNumber = 11;
        private global::Spiderrock.Protobuf.SurfaceCurveType surfaceType_ = global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.SurfaceCurveType SurfaceType {
          get { return surfaceType_; }
          set {
            surfaceType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ekey, other.Ekey)) return false;
          if (SurfaceType != other.SurfaceType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ekey_ != null) hash ^= Ekey.GetHashCode();
          if (SurfaceType != global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified) hash ^= SurfaceType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ekey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ekey);
          }
          if (SurfaceType != global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) SurfaceType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ekey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ekey);
          }
          if (SurfaceType != global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified) {
            output.WriteRawTag(88);
            output.WriteEnum((int) SurfaceType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ekey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ekey);
          }
          if (SurfaceType != global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SurfaceType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ekey_ != null) {
            if (ekey_ == null) {
              Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            Ekey.MergeFrom(other.Ekey);
          }
          if (other.SurfaceType != global::Spiderrock.Protobuf.SurfaceCurveType.Unspecified) {
            SurfaceType = other.SurfaceType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ekey_ == null) {
                  Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Ekey);
                break;
              }
              case 88: {
                SurfaceType = (global::Spiderrock.Protobuf.SurfaceCurveType) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ekey_ == null) {
                  Ekey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Ekey);
                break;
              }
              case 88: {
                SurfaceType = (global::Spiderrock.Protobuf.SurfaceCurveType) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
