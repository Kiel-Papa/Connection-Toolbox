// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientRisk/FuturePositionRecordV5.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientRisk/FuturePositionRecordV5.proto</summary>
  public static partial class FuturePositionRecordV5Reflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientRisk/FuturePositionRecordV5.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FuturePositionRecordV5Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBQcm90b2J1Zi9DbGllbnRSaXNrL0Z1dHVyZVBvc2l0aW9uUmVjb3JkVjUu",
            "cHJvdG8SE3NwaWRlcnJvY2sucHJvdG9idWYaF3NwaWRlcnJvY2tfY29tbW9u",
            "LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIuMNChZG",
            "dXR1cmVQb3NpdGlvblJlY29yZFY1EjMKBV9tZXRhGAEgASgLMiQuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5NZXNzYWdlTWV0YWRhdGESPgoEcGtleRgCIAEoCzIw",
            "LnNwaWRlcnJvY2sucHJvdG9idWYuRnV0dXJlUG9zaXRpb25SZWNvcmRWNS5Q",
            "S2V5EhMKC2NsaWVudF9maXJtGGQgASgJEhgKEHJpc2tfc2VydmVyX2NvZGUY",
            "ZyABKAkSEQoJYWdnX2dyb3VwGGogASgJEi4KBnRpY2tlchhtIAEoCzIeLnNw",
            "aWRlcnJvY2sucHJvdG9idWYuVGlja2VyS2V5EhkKEXVuZGVybGllcnNfcGVy",
            "X2NuGHAgASgFEjoKDnVuZGVybGllcl90eXBlGHMgASgOMiIuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5VbmRlcmxpZXJUeXBlEhIKCnRpY2tfdmFsdWUYdiABKAIS",
            "EwoLcG9pbnRfdmFsdWUYeSABKAISNQoOcG9pbnRfY3VycmVuY3kYfCABKA4y",
            "HS5zcGlkZXJyb2NrLnByb3RvYnVmLkN1cnJlbmN5EjYKDHByaWNlX2Zvcm1h",
            "dBh/IAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuUHJpY2VGb3JtYXQSEAoH",
            "ZnV0X3ByYxiCASABKAESEAoHZnV0X2JpZBiFASABKAESEAoHZnV0X2FzaxiI",
            "ASABKAESEQoIZnV0X21hcmsYiwEgASgBEj8KEmZ1dF9tYXJrX2Vycl9jb2Rl",
            "cxiOASABKA4yIi5zcGlkZXJyb2NrLnByb3RvYnVmLk1hcmtFcnJvckNvZGUS",
            "OgoPZnV0X21hcmtfc291cmNlGJEBIAEoDjIgLnNwaWRlcnJvY2sucHJvdG9i",
            "dWYuVU1hcmtTb3VyY2USGQoQZnV0X29wbl9taWRfbWFyaxiUASABKAESGQoQ",
            "ZnV0X29wbl9jbHJfbWFyaxiXASABKAESGAoPZnV0X29wbl9wb3NfcHJ2GJoB",
            "IAEoBRIYCg9mdXRfb3BuX3Bvc19jbHIYnQEgASgFEhQKC2Z1dF9vcG5fcG9z",
            "GKABIAEoBRI9Cg9mdXRfb3BuX3Bvc19zcmMYowEgASgOMiMuc3BpZGVycm9j",
            "ay5wcm90b2J1Zi5Qb3NpdGlvblNvdXJjZRIPCgZjbl9ib3QYpgEgASgFEg8K",
            "BmNuX3NsZBipASABKAUSEwoKY25fYm90X3RyZBisASABKAUSEwoKY25fc2xk",
            "X3RyZBivASABKAUSEwoKY25fYm90X2hkZxiyASABKAUSEwoKY25fc2xkX2hk",
            "Zxi1ASABKAUSEwoKY25fYm90X3RyaBi4ASABKAUSEwoKY25fc2xkX3RyaBi7",
            "ASABKAUSEwoKY25fYm90X29wbhi+ASABKAUSEwoKY25fc2xkX29wbhjBASAB",
            "KAUSEgoJY25fb3BlbmVkGMQBIAEoBRISCgljbl9jbG9zZWQYxwEgASgFEhQK",
            "C2Z1dF9tbnlfYm90GMoBIAEoARIUCgtmdXRfbW55X3NsZBjNASABKAESEAoH",
            "ZGF5X3BubBjQASABKAISGQoQb3BuX3BubF9taWRfbWFyaxjTASABKAISGQoQ",
            "b3BuX3BubF9jbHJfbWFyaxjWASABKAISDQoEYmV0YRjZASABKAISNQoLYmV0",
            "YV9zb3VyY2UY3AEgASgOMh8uc3BpZGVycm9jay5wcm90b2J1Zi5CZXRhU291",
            "cmNlEg0KBGRheXMY3wEgASgFEg0KBHJhdGUY4gEgASgCEg4KBXllYXJzGOUB",
            "IAEoAhILCgJyaBjoASABKAISCwoCdmUY6wEgASgCEhAKB3JhdGVfcHIY7gEg",
            "ASgCEhEKCHllYXJzX3ByGPEBIAEoAhITCgptYXJnaW5fdURuGPQBIAEoAhIT",
            "CgptYXJnaW5fdVVwGPcBIAEoAhIXCg5udW1fZXhlY3V0aW9ucxj6ASABKAUS",
            "MgoNbWF4X2V4ZWNfZHR0bRj9ASABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wEi4KCXRpbWVzdGFtcBiAAiABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wGq0BCgRQS2V5EiwKBGZrZXkYCiABKAsyHi5zcGlkZXJyb2Nr",
            "LnByb3RvYnVmLkV4cGlyeUtleRINCgVhY2NudBgLIAEoCRIwCgp0cmFkZV9k",
            "YXRlGAwgASgLMhwuc3BpZGVycm9jay5wcm90b2J1Zi5EYXRlS2V5EjYKDHJp",
            "c2tfc2Vzc2lvbhgNIAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuUmlza1Nl",
            "c3Npb25iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.FuturePositionRecordV5), global::Spiderrock.Protobuf.FuturePositionRecordV5.Parser, new[]{ "Meta", "Pkey", "ClientFirm", "RiskServerCode", "AggGroup", "Ticker", "UnderliersPerCn", "UnderlierType", "TickValue", "PointValue", "PointCurrency", "PriceFormat", "FutPrc", "FutBid", "FutAsk", "FutMark", "FutMarkErrCodes", "FutMarkSource", "FutOpnMidMark", "FutOpnClrMark", "FutOpnPosPrv", "FutOpnPosClr", "FutOpnPos", "FutOpnPosSrc", "CnBot", "CnSld", "CnBotTrd", "CnSldTrd", "CnBotHdg", "CnSldHdg", "CnBotTrh", "CnSldTrh", "CnBotOpn", "CnSldOpn", "CnOpened", "CnClosed", "FutMnyBot", "FutMnySld", "DayPnl", "OpnPnlMidMark", "OpnPnlClrMark", "Beta", "BetaSource", "Days", "Rate", "Years", "Rh", "Ve", "RatePr", "YearsPr", "MarginUDn", "MarginUUp", "NumExecutions", "MaxExecDttm", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.FuturePositionRecordV5.Types.PKey), global::Spiderrock.Protobuf.FuturePositionRecordV5.Types.PKey.Parser, new[]{ "Fkey", "Accnt", "TradeDate", "RiskSession" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///FuturePositionRecords are live risk records that contain start-of-day positions and all subsequent executions, including executions reported as done away.
  ///These records are published by a CoreRiskServer and represent the position and risk markup detail for a single futures contract.
  ///New records are published immediately when a position changes and about once per minute if no position has changed.
  ///Note that all stock, future and option records for a chain are published simultaneously and records for the same chain should have consistent marks.
  /// </summary>
  public sealed partial class FuturePositionRecordV5 : pb::IMessage<FuturePositionRecordV5>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FuturePositionRecordV5> _parser = new pb::MessageParser<FuturePositionRecordV5>(() => new FuturePositionRecordV5());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FuturePositionRecordV5> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.FuturePositionRecordV5Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturePositionRecordV5() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturePositionRecordV5(FuturePositionRecordV5 other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      clientFirm_ = other.clientFirm_;
      riskServerCode_ = other.riskServerCode_;
      aggGroup_ = other.aggGroup_;
      ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
      underliersPerCn_ = other.underliersPerCn_;
      underlierType_ = other.underlierType_;
      tickValue_ = other.tickValue_;
      pointValue_ = other.pointValue_;
      pointCurrency_ = other.pointCurrency_;
      priceFormat_ = other.priceFormat_;
      futPrc_ = other.futPrc_;
      futBid_ = other.futBid_;
      futAsk_ = other.futAsk_;
      futMark_ = other.futMark_;
      futMarkErrCodes_ = other.futMarkErrCodes_;
      futMarkSource_ = other.futMarkSource_;
      futOpnMidMark_ = other.futOpnMidMark_;
      futOpnClrMark_ = other.futOpnClrMark_;
      futOpnPosPrv_ = other.futOpnPosPrv_;
      futOpnPosClr_ = other.futOpnPosClr_;
      futOpnPos_ = other.futOpnPos_;
      futOpnPosSrc_ = other.futOpnPosSrc_;
      cnBot_ = other.cnBot_;
      cnSld_ = other.cnSld_;
      cnBotTrd_ = other.cnBotTrd_;
      cnSldTrd_ = other.cnSldTrd_;
      cnBotHdg_ = other.cnBotHdg_;
      cnSldHdg_ = other.cnSldHdg_;
      cnBotTrh_ = other.cnBotTrh_;
      cnSldTrh_ = other.cnSldTrh_;
      cnBotOpn_ = other.cnBotOpn_;
      cnSldOpn_ = other.cnSldOpn_;
      cnOpened_ = other.cnOpened_;
      cnClosed_ = other.cnClosed_;
      futMnyBot_ = other.futMnyBot_;
      futMnySld_ = other.futMnySld_;
      dayPnl_ = other.dayPnl_;
      opnPnlMidMark_ = other.opnPnlMidMark_;
      opnPnlClrMark_ = other.opnPnlClrMark_;
      beta_ = other.beta_;
      betaSource_ = other.betaSource_;
      days_ = other.days_;
      rate_ = other.rate_;
      years_ = other.years_;
      rh_ = other.rh_;
      ve_ = other.ve_;
      ratePr_ = other.ratePr_;
      yearsPr_ = other.yearsPr_;
      marginUDn_ = other.marginUDn_;
      marginUUp_ = other.marginUUp_;
      numExecutions_ = other.numExecutions_;
      maxExecDttm_ = other.maxExecDttm_ != null ? other.maxExecDttm_.Clone() : null;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FuturePositionRecordV5 Clone() {
      return new FuturePositionRecordV5(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.FuturePositionRecordV5.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.FuturePositionRecordV5.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "client_firm" field.</summary>
    public const int ClientFirmFieldNumber = 100;
    private string clientFirm_ = "";
    /// <summary>
    /// SR assigned client firm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClientFirm {
      get { return clientFirm_; }
      set {
        clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "risk_server_code" field.</summary>
    public const int RiskServerCodeFieldNumber = 103;
    private string riskServerCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RiskServerCode {
      get { return riskServerCode_; }
      set {
        riskServerCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "agg_group" field.</summary>
    public const int AggGroupFieldNumber = 106;
    private string aggGroup_ = "";
    /// <summary>
    /// SR assigned aggregation group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AggGroup {
      get { return aggGroup_; }
      set {
        aggGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticker" field.</summary>
    public const int TickerFieldNumber = 109;
    private global::Spiderrock.Protobuf.TickerKey ticker_;
    /// <summary>
    /// underlying ticker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.TickerKey Ticker {
      get { return ticker_; }
      set {
        ticker_ = value;
      }
    }

    /// <summary>Field number for the "underliers_per_cn" field.</summary>
    public const int UnderliersPerCnFieldNumber = 112;
    private int underliersPerCn_;
    /// <summary>
    /// number of underlying units per futures contract
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnderliersPerCn {
      get { return underliersPerCn_; }
      set {
        underliersPerCn_ = value;
      }
    }

    /// <summary>Field number for the "underlier_type" field.</summary>
    public const int UnderlierTypeFieldNumber = 115;
    private global::Spiderrock.Protobuf.UnderlierType underlierType_ = global::Spiderrock.Protobuf.UnderlierType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UnderlierType UnderlierType {
      get { return underlierType_; }
      set {
        underlierType_ = value;
      }
    }

    /// <summary>Field number for the "tick_value" field.</summary>
    public const int TickValueFieldNumber = 118;
    private float tickValue_;
    /// <summary>
    /// $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TickValue {
      get { return tickValue_; }
      set {
        tickValue_ = value;
      }
    }

    /// <summary>Field number for the "point_value" field.</summary>
    public const int PointValueFieldNumber = 121;
    private float pointValue_;
    /// <summary>
    /// $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PointValue {
      get { return pointValue_; }
      set {
        pointValue_ = value;
      }
    }

    /// <summary>Field number for the "point_currency" field.</summary>
    public const int PointCurrencyFieldNumber = 124;
    private global::Spiderrock.Protobuf.Currency pointCurrency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency PointCurrency {
      get { return pointCurrency_; }
      set {
        pointCurrency_ = value;
      }
    }

    /// <summary>Field number for the "price_format" field.</summary>
    public const int PriceFormatFieldNumber = 127;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// price display format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat {
      get { return priceFormat_; }
      set {
        priceFormat_ = value;
      }
    }

    /// <summary>Field number for the "fut_prc" field.</summary>
    public const int FutPrcFieldNumber = 130;
    private double futPrc_;
    /// <summary>
    /// current future price (any market session) (persists if market closed/halted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutPrc {
      get { return futPrc_; }
      set {
        futPrc_ = value;
      }
    }

    /// <summary>Field number for the "fut_bid" field.</summary>
    public const int FutBidFieldNumber = 133;
    private double futBid_;
    /// <summary>
    /// current future bid (any market session) (zero if market closed/halted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutBid {
      get { return futBid_; }
      set {
        futBid_ = value;
      }
    }

    /// <summary>Field number for the "fut_ask" field.</summary>
    public const int FutAskFieldNumber = 136;
    private double futAsk_;
    /// <summary>
    /// current future ask (any market session) (zero if market closed/halted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutAsk {
      get { return futAsk_; }
      set {
        futAsk_ = value;
      }
    }

    /// <summary>Field number for the "fut_mark" field.</summary>
    public const int FutMarkFieldNumber = 139;
    private double futMark_;
    /// <summary>
    /// current mark (usually mid market) (freezes at SR CloseMarkTime)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutMark {
      get { return futMark_; }
      set {
        futMark_ = value;
      }
    }

    /// <summary>Field number for the "fut_mark_err_codes" field.</summary>
    public const int FutMarkErrCodesFieldNumber = 142;
    private global::Spiderrock.Protobuf.MarkErrorCode futMarkErrCodes_ = global::Spiderrock.Protobuf.MarkErrorCode.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarkErrorCode FutMarkErrCodes {
      get { return futMarkErrCodes_; }
      set {
        futMarkErrCodes_ = value;
      }
    }

    /// <summary>Field number for the "fut_mark_source" field.</summary>
    public const int FutMarkSourceFieldNumber = 145;
    private global::Spiderrock.Protobuf.UMarkSource futMarkSource_ = global::Spiderrock.Protobuf.UMarkSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UMarkSource FutMarkSource {
      get { return futMarkSource_; }
      set {
        futMarkSource_ = value;
      }
    }

    /// <summary>Field number for the "fut_opn_mid_mark" field.</summary>
    public const int FutOpnMidMarkFieldNumber = 148;
    private double futOpnMidMark_;
    /// <summary>
    /// start of day SR mark
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutOpnMidMark {
      get { return futOpnMidMark_; }
      set {
        futOpnMidMark_ = value;
      }
    }

    /// <summary>Field number for the "fut_opn_clr_mark" field.</summary>
    public const int FutOpnClrMarkFieldNumber = 151;
    private double futOpnClrMark_;
    /// <summary>
    /// start of day clearing mark (usually exchange settlement mark)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutOpnClrMark {
      get { return futOpnClrMark_; }
      set {
        futOpnClrMark_ = value;
      }
    }

    /// <summary>Field number for the "fut_opn_pos_prv" field.</summary>
    public const int FutOpnPosPrvFieldNumber = 154;
    private int futOpnPosPrv_;
    /// <summary>
    /// start-of-day SR contract position (rotated from prior day record)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FutOpnPosPrv {
      get { return futOpnPosPrv_; }
      set {
        futOpnPosPrv_ = value;
      }
    }

    /// <summary>Field number for the "fut_opn_pos_clr" field.</summary>
    public const int FutOpnPosClrFieldNumber = 157;
    private int futOpnPosClr_;
    /// <summary>
    /// start-of-day CKR contract position (supplied by client/clearing firm via clearing position load)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FutOpnPosClr {
      get { return futOpnPosClr_; }
      set {
        futOpnPosClr_ = value;
      }
    }

    /// <summary>Field number for the "fut_opn_pos" field.</summary>
    public const int FutOpnPosFieldNumber = 160;
    private int futOpnPos_;
    /// <summary>
    /// start of period contract position (effective; can be from either CLR or SR)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FutOpnPos {
      get { return futOpnPos_; }
      set {
        futOpnPos_ = value;
      }
    }

    /// <summary>Field number for the "fut_opn_pos_src" field.</summary>
    public const int FutOpnPosSrcFieldNumber = 163;
    private global::Spiderrock.Protobuf.PositionSource futOpnPosSrc_ = global::Spiderrock.Protobuf.PositionSource.Unspecified;
    /// <summary>
    /// start of period position source
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionSource FutOpnPosSrc {
      get { return futOpnPosSrc_; }
      set {
        futOpnPosSrc_ = value;
      }
    }

    /// <summary>Field number for the "cn_bot" field.</summary>
    public const int CnBotFieldNumber = 166;
    private int cnBot_;
    /// <summary>
    /// number of contracts bot today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnBot {
      get { return cnBot_; }
      set {
        cnBot_ = value;
      }
    }

    /// <summary>Field number for the "cn_sld" field.</summary>
    public const int CnSldFieldNumber = 169;
    private int cnSld_;
    /// <summary>
    /// number of contracts sld today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnSld {
      get { return cnSld_; }
      set {
        cnSld_ = value;
      }
    }

    /// <summary>Field number for the "cn_bot_trd" field.</summary>
    public const int CnBotTrdFieldNumber = 172;
    private int cnBotTrd_;
    /// <summary>
    /// number of contracts bot today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnBotTrd {
      get { return cnBotTrd_; }
      set {
        cnBotTrd_ = value;
      }
    }

    /// <summary>Field number for the "cn_sld_trd" field.</summary>
    public const int CnSldTrdFieldNumber = 175;
    private int cnSldTrd_;
    /// <summary>
    /// number of contracts sld today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnSldTrd {
      get { return cnSldTrd_; }
      set {
        cnSldTrd_ = value;
      }
    }

    /// <summary>Field number for the "cn_bot_hdg" field.</summary>
    public const int CnBotHdgFieldNumber = 178;
    private int cnBotHdg_;
    /// <summary>
    /// number of contracts bot today from open pos hedging (spdrSource=HedgeTool)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnBotHdg {
      get { return cnBotHdg_; }
      set {
        cnBotHdg_ = value;
      }
    }

    /// <summary>Field number for the "cn_sld_hdg" field.</summary>
    public const int CnSldHdgFieldNumber = 181;
    private int cnSldHdg_;
    /// <summary>
    /// number of contracts sld today from open pos hedging (spdrSource=HedgeTool)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnSldHdg {
      get { return cnSldHdg_; }
      set {
        cnSldHdg_ = value;
      }
    }

    /// <summary>Field number for the "cn_bot_trh" field.</summary>
    public const int CnBotTrhFieldNumber = 184;
    private int cnBotTrh_;
    /// <summary>
    /// number of contracts bot today from open pos hedging (spdrSource=TradeHedge)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnBotTrh {
      get { return cnBotTrh_; }
      set {
        cnBotTrh_ = value;
      }
    }

    /// <summary>Field number for the "cn_sld_trh" field.</summary>
    public const int CnSldTrhFieldNumber = 187;
    private int cnSldTrh_;
    /// <summary>
    /// number of contracts sld today from open pos hedging (spdrSource=TradeHedge)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnSldTrh {
      get { return cnSldTrh_; }
      set {
        cnSldTrh_ = value;
      }
    }

    /// <summary>Field number for the "cn_bot_opn" field.</summary>
    public const int CnBotOpnFieldNumber = 190;
    private int cnBotOpn_;
    /// <summary>
    /// number of contracts bot today from open pos hedging (spdrSource=OpenHedge)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnBotOpn {
      get { return cnBotOpn_; }
      set {
        cnBotOpn_ = value;
      }
    }

    /// <summary>Field number for the "cn_sld_opn" field.</summary>
    public const int CnSldOpnFieldNumber = 193;
    private int cnSldOpn_;
    /// <summary>
    /// number of contracts sld today from open pos hedging (spdrSource=OpenHedge)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnSldOpn {
      get { return cnSldOpn_; }
      set {
        cnSldOpn_ = value;
      }
    }

    /// <summary>Field number for the "cn_opened" field.</summary>
    public const int CnOpenedFieldNumber = 196;
    private int cnOpened_;
    /// <summary>
    /// number of contracts opened today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnOpened {
      get { return cnOpened_; }
      set {
        cnOpened_ = value;
      }
    }

    /// <summary>Field number for the "cn_closed" field.</summary>
    public const int CnClosedFieldNumber = 199;
    private int cnClosed_;
    /// <summary>
    /// number of contracts closed today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CnClosed {
      get { return cnClosed_; }
      set {
        cnClosed_ = value;
      }
    }

    /// <summary>Field number for the "fut_mny_bot" field.</summary>
    public const int FutMnyBotFieldNumber = 202;
    private double futMnyBot_;
    /// <summary>
    /// sum of settle cash for all buy executions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutMnyBot {
      get { return futMnyBot_; }
      set {
        futMnyBot_ = value;
      }
    }

    /// <summary>Field number for the "fut_mny_sld" field.</summary>
    public const int FutMnySldFieldNumber = 205;
    private double futMnySld_;
    /// <summary>
    /// sum of settle cash for all sell executions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FutMnySld {
      get { return futMnySld_; }
      set {
        futMnySld_ = value;
      }
    }

    /// <summary>Field number for the "day_pnl" field.</summary>
    public const int DayPnlFieldNumber = 208;
    private float dayPnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayPnl {
      get { return dayPnl_; }
      set {
        dayPnl_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_mid_mark" field.</summary>
    public const int OpnPnlMidMarkFieldNumber = 211;
    private float opnPnlMidMark_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlMidMark {
      get { return opnPnlMidMark_; }
      set {
        opnPnlMidMark_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_clr_mark" field.</summary>
    public const int OpnPnlClrMarkFieldNumber = 214;
    private float opnPnlClrMark_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlClrMark {
      get { return opnPnlClrMark_; }
      set {
        opnPnlClrMark_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 217;
    private float beta_;
    /// <summary>
    /// beta (usually beta to SPX; see AccountConfig.betaSource) (if applicable)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    /// <summary>Field number for the "beta_source" field.</summary>
    public const int BetaSourceFieldNumber = 220;
    private global::Spiderrock.Protobuf.BetaSource betaSource_ = global::Spiderrock.Protobuf.BetaSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BetaSource BetaSource {
      get { return betaSource_; }
      set {
        betaSource_ = value;
      }
    }

    /// <summary>Field number for the "days" field.</summary>
    public const int DaysFieldNumber = 223;
    private int days_;
    /// <summary>
    /// days to expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Days {
      get { return days_; }
      set {
        days_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 226;
    private float rate_;
    /// <summary>
    /// global rate to expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "years" field.</summary>
    public const int YearsFieldNumber = 229;
    private float years_;
    /// <summary>
    /// years to expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Years {
      get { return years_; }
      set {
        years_ = value;
      }
    }

    /// <summary>Field number for the "rh" field.</summary>
    public const int RhFieldNumber = 232;
    private float rh_;
    /// <summary>
    /// rho; (dPrc / dRate) - only for STIR futures
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rh {
      get { return rh_; }
      set {
        rh_ = value;
      }
    }

    /// <summary>Field number for the "ve" field.</summary>
    public const int VeFieldNumber = 235;
    private float ve_;
    /// <summary>
    /// vega; (dPrc / dVol) - only for VIX futures
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Ve {
      get { return ve_; }
      set {
        ve_ = value;
      }
    }

    /// <summary>Field number for the "rate_pr" field.</summary>
    public const int RatePrFieldNumber = 238;
    private float ratePr_;
    /// <summary>
    /// start of period global rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float RatePr {
      get { return ratePr_; }
      set {
        ratePr_ = value;
      }
    }

    /// <summary>Field number for the "years_pr" field.</summary>
    public const int YearsPrFieldNumber = 241;
    private float yearsPr_;
    /// <summary>
    /// start of period years to expiration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float YearsPr {
      get { return yearsPr_; }
      set {
        yearsPr_ = value;
      }
    }

    /// <summary>Field number for the "margin_uDn" field.</summary>
    public const int MarginUDnFieldNumber = 244;
    private float marginUDn_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUDn {
      get { return marginUDn_; }
      set {
        marginUDn_ = value;
      }
    }

    /// <summary>Field number for the "margin_uUp" field.</summary>
    public const int MarginUUpFieldNumber = 247;
    private float marginUUp_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUUp {
      get { return marginUUp_; }
      set {
        marginUUp_ = value;
      }
    }

    /// <summary>Field number for the "num_executions" field.</summary>
    public const int NumExecutionsFieldNumber = 250;
    private int numExecutions_;
    /// <summary>
    /// number of included SpdrParentExecution records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumExecutions {
      get { return numExecutions_; }
      set {
        numExecutions_ = value;
      }
    }

    /// <summary>Field number for the "max_exec_dttm" field.</summary>
    public const int MaxExecDttmFieldNumber = 253;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maxExecDttm_;
    /// <summary>
    /// maximum activity dttm of execution records included in this future risk record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaxExecDttm {
      get { return maxExecDttm_; }
      set {
        maxExecDttm_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 256;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FuturePositionRecordV5);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FuturePositionRecordV5 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (ClientFirm != other.ClientFirm) return false;
      if (RiskServerCode != other.RiskServerCode) return false;
      if (AggGroup != other.AggGroup) return false;
      if (!object.Equals(Ticker, other.Ticker)) return false;
      if (UnderliersPerCn != other.UnderliersPerCn) return false;
      if (UnderlierType != other.UnderlierType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TickValue, other.TickValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointValue, other.PointValue)) return false;
      if (PointCurrency != other.PointCurrency) return false;
      if (PriceFormat != other.PriceFormat) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutPrc, other.FutPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutBid, other.FutBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutAsk, other.FutAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutMark, other.FutMark)) return false;
      if (FutMarkErrCodes != other.FutMarkErrCodes) return false;
      if (FutMarkSource != other.FutMarkSource) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutOpnMidMark, other.FutOpnMidMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutOpnClrMark, other.FutOpnClrMark)) return false;
      if (FutOpnPosPrv != other.FutOpnPosPrv) return false;
      if (FutOpnPosClr != other.FutOpnPosClr) return false;
      if (FutOpnPos != other.FutOpnPos) return false;
      if (FutOpnPosSrc != other.FutOpnPosSrc) return false;
      if (CnBot != other.CnBot) return false;
      if (CnSld != other.CnSld) return false;
      if (CnBotTrd != other.CnBotTrd) return false;
      if (CnSldTrd != other.CnSldTrd) return false;
      if (CnBotHdg != other.CnBotHdg) return false;
      if (CnSldHdg != other.CnSldHdg) return false;
      if (CnBotTrh != other.CnBotTrh) return false;
      if (CnSldTrh != other.CnSldTrh) return false;
      if (CnBotOpn != other.CnBotOpn) return false;
      if (CnSldOpn != other.CnSldOpn) return false;
      if (CnOpened != other.CnOpened) return false;
      if (CnClosed != other.CnClosed) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutMnyBot, other.FutMnyBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FutMnySld, other.FutMnySld)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayPnl, other.DayPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlMidMark, other.OpnPnlMidMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlClrMark, other.OpnPnlClrMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta, other.Beta)) return false;
      if (BetaSource != other.BetaSource) return false;
      if (Days != other.Days) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rate, other.Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Years, other.Years)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rh, other.Rh)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ve, other.Ve)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RatePr, other.RatePr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YearsPr, other.YearsPr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUDn, other.MarginUDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUUp, other.MarginUUp)) return false;
      if (NumExecutions != other.NumExecutions) return false;
      if (!object.Equals(MaxExecDttm, other.MaxExecDttm)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
      if (RiskServerCode.Length != 0) hash ^= RiskServerCode.GetHashCode();
      if (AggGroup.Length != 0) hash ^= AggGroup.GetHashCode();
      if (ticker_ != null) hash ^= Ticker.GetHashCode();
      if (UnderliersPerCn != 0) hash ^= UnderliersPerCn.GetHashCode();
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) hash ^= UnderlierType.GetHashCode();
      if (TickValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TickValue);
      if (PointValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointValue);
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= PointCurrency.GetHashCode();
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat.GetHashCode();
      if (FutPrc != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutPrc);
      if (FutBid != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutBid);
      if (FutAsk != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutAsk);
      if (FutMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutMark);
      if (FutMarkErrCodes != global::Spiderrock.Protobuf.MarkErrorCode.Unspecified) hash ^= FutMarkErrCodes.GetHashCode();
      if (FutMarkSource != global::Spiderrock.Protobuf.UMarkSource.Unspecified) hash ^= FutMarkSource.GetHashCode();
      if (FutOpnMidMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutOpnMidMark);
      if (FutOpnClrMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutOpnClrMark);
      if (FutOpnPosPrv != 0) hash ^= FutOpnPosPrv.GetHashCode();
      if (FutOpnPosClr != 0) hash ^= FutOpnPosClr.GetHashCode();
      if (FutOpnPos != 0) hash ^= FutOpnPos.GetHashCode();
      if (FutOpnPosSrc != global::Spiderrock.Protobuf.PositionSource.Unspecified) hash ^= FutOpnPosSrc.GetHashCode();
      if (CnBot != 0) hash ^= CnBot.GetHashCode();
      if (CnSld != 0) hash ^= CnSld.GetHashCode();
      if (CnBotTrd != 0) hash ^= CnBotTrd.GetHashCode();
      if (CnSldTrd != 0) hash ^= CnSldTrd.GetHashCode();
      if (CnBotHdg != 0) hash ^= CnBotHdg.GetHashCode();
      if (CnSldHdg != 0) hash ^= CnSldHdg.GetHashCode();
      if (CnBotTrh != 0) hash ^= CnBotTrh.GetHashCode();
      if (CnSldTrh != 0) hash ^= CnSldTrh.GetHashCode();
      if (CnBotOpn != 0) hash ^= CnBotOpn.GetHashCode();
      if (CnSldOpn != 0) hash ^= CnSldOpn.GetHashCode();
      if (CnOpened != 0) hash ^= CnOpened.GetHashCode();
      if (CnClosed != 0) hash ^= CnClosed.GetHashCode();
      if (FutMnyBot != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutMnyBot);
      if (FutMnySld != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FutMnySld);
      if (DayPnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayPnl);
      if (OpnPnlMidMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlMidMark);
      if (OpnPnlClrMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlClrMark);
      if (Beta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta);
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) hash ^= BetaSource.GetHashCode();
      if (Days != 0) hash ^= Days.GetHashCode();
      if (Rate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rate);
      if (Years != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Years);
      if (Rh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rh);
      if (Ve != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ve);
      if (RatePr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RatePr);
      if (YearsPr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YearsPr);
      if (MarginUDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUDn);
      if (MarginUUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUUp);
      if (NumExecutions != 0) hash ^= NumExecutions.GetHashCode();
      if (maxExecDttm_ != null) hash ^= MaxExecDttm.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(ClientFirm);
      }
      if (RiskServerCode.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(RiskServerCode);
      }
      if (AggGroup.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(AggGroup);
      }
      if (ticker_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(Ticker);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) UnderlierType);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(TickValue);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) PointCurrency);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) PriceFormat);
      }
      if (FutPrc != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(FutPrc);
      }
      if (FutBid != 0D) {
        output.WriteRawTag(169, 8);
        output.WriteDouble(FutBid);
      }
      if (FutAsk != 0D) {
        output.WriteRawTag(193, 8);
        output.WriteDouble(FutAsk);
      }
      if (FutMark != 0D) {
        output.WriteRawTag(217, 8);
        output.WriteDouble(FutMark);
      }
      if (FutMarkErrCodes != global::Spiderrock.Protobuf.MarkErrorCode.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) FutMarkErrCodes);
      }
      if (FutMarkSource != global::Spiderrock.Protobuf.UMarkSource.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) FutMarkSource);
      }
      if (FutOpnMidMark != 0D) {
        output.WriteRawTag(161, 9);
        output.WriteDouble(FutOpnMidMark);
      }
      if (FutOpnClrMark != 0D) {
        output.WriteRawTag(185, 9);
        output.WriteDouble(FutOpnClrMark);
      }
      if (FutOpnPosPrv != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(FutOpnPosPrv);
      }
      if (FutOpnPosClr != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(FutOpnPosClr);
      }
      if (FutOpnPos != 0) {
        output.WriteRawTag(128, 10);
        output.WriteInt32(FutOpnPos);
      }
      if (FutOpnPosSrc != global::Spiderrock.Protobuf.PositionSource.Unspecified) {
        output.WriteRawTag(152, 10);
        output.WriteEnum((int) FutOpnPosSrc);
      }
      if (CnBot != 0) {
        output.WriteRawTag(176, 10);
        output.WriteInt32(CnBot);
      }
      if (CnSld != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(CnSld);
      }
      if (CnBotTrd != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(CnBotTrd);
      }
      if (CnSldTrd != 0) {
        output.WriteRawTag(248, 10);
        output.WriteInt32(CnSldTrd);
      }
      if (CnBotHdg != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(CnBotHdg);
      }
      if (CnSldHdg != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(CnSldHdg);
      }
      if (CnBotTrh != 0) {
        output.WriteRawTag(192, 11);
        output.WriteInt32(CnBotTrh);
      }
      if (CnSldTrh != 0) {
        output.WriteRawTag(216, 11);
        output.WriteInt32(CnSldTrh);
      }
      if (CnBotOpn != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(CnBotOpn);
      }
      if (CnSldOpn != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(CnSldOpn);
      }
      if (CnOpened != 0) {
        output.WriteRawTag(160, 12);
        output.WriteInt32(CnOpened);
      }
      if (CnClosed != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(CnClosed);
      }
      if (FutMnyBot != 0D) {
        output.WriteRawTag(209, 12);
        output.WriteDouble(FutMnyBot);
      }
      if (FutMnySld != 0D) {
        output.WriteRawTag(233, 12);
        output.WriteDouble(FutMnySld);
      }
      if (DayPnl != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(DayPnl);
      }
      if (OpnPnlMidMark != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(OpnPnlMidMark);
      }
      if (OpnPnlClrMark != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(OpnPnlClrMark);
      }
      if (Beta != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(Beta);
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        output.WriteRawTag(224, 13);
        output.WriteEnum((int) BetaSource);
      }
      if (Days != 0) {
        output.WriteRawTag(248, 13);
        output.WriteInt32(Days);
      }
      if (Rate != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(Rate);
      }
      if (Years != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(Years);
      }
      if (Rh != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(Rh);
      }
      if (Ve != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(Ve);
      }
      if (RatePr != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(RatePr);
      }
      if (YearsPr != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(YearsPr);
      }
      if (MarginUDn != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(MarginUDn);
      }
      if (MarginUUp != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(MarginUUp);
      }
      if (NumExecutions != 0) {
        output.WriteRawTag(208, 15);
        output.WriteInt32(NumExecutions);
      }
      if (maxExecDttm_ != null) {
        output.WriteRawTag(234, 15);
        output.WriteMessage(MaxExecDttm);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(130, 16);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (ClientFirm.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(ClientFirm);
      }
      if (RiskServerCode.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(RiskServerCode);
      }
      if (AggGroup.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(AggGroup);
      }
      if (ticker_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(Ticker);
      }
      if (UnderliersPerCn != 0) {
        output.WriteRawTag(128, 7);
        output.WriteInt32(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) UnderlierType);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(TickValue);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(205, 7);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) PointCurrency);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(248, 7);
        output.WriteEnum((int) PriceFormat);
      }
      if (FutPrc != 0D) {
        output.WriteRawTag(145, 8);
        output.WriteDouble(FutPrc);
      }
      if (FutBid != 0D) {
        output.WriteRawTag(169, 8);
        output.WriteDouble(FutBid);
      }
      if (FutAsk != 0D) {
        output.WriteRawTag(193, 8);
        output.WriteDouble(FutAsk);
      }
      if (FutMark != 0D) {
        output.WriteRawTag(217, 8);
        output.WriteDouble(FutMark);
      }
      if (FutMarkErrCodes != global::Spiderrock.Protobuf.MarkErrorCode.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) FutMarkErrCodes);
      }
      if (FutMarkSource != global::Spiderrock.Protobuf.UMarkSource.Unspecified) {
        output.WriteRawTag(136, 9);
        output.WriteEnum((int) FutMarkSource);
      }
      if (FutOpnMidMark != 0D) {
        output.WriteRawTag(161, 9);
        output.WriteDouble(FutOpnMidMark);
      }
      if (FutOpnClrMark != 0D) {
        output.WriteRawTag(185, 9);
        output.WriteDouble(FutOpnClrMark);
      }
      if (FutOpnPosPrv != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(FutOpnPosPrv);
      }
      if (FutOpnPosClr != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(FutOpnPosClr);
      }
      if (FutOpnPos != 0) {
        output.WriteRawTag(128, 10);
        output.WriteInt32(FutOpnPos);
      }
      if (FutOpnPosSrc != global::Spiderrock.Protobuf.PositionSource.Unspecified) {
        output.WriteRawTag(152, 10);
        output.WriteEnum((int) FutOpnPosSrc);
      }
      if (CnBot != 0) {
        output.WriteRawTag(176, 10);
        output.WriteInt32(CnBot);
      }
      if (CnSld != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(CnSld);
      }
      if (CnBotTrd != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(CnBotTrd);
      }
      if (CnSldTrd != 0) {
        output.WriteRawTag(248, 10);
        output.WriteInt32(CnSldTrd);
      }
      if (CnBotHdg != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(CnBotHdg);
      }
      if (CnSldHdg != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(CnSldHdg);
      }
      if (CnBotTrh != 0) {
        output.WriteRawTag(192, 11);
        output.WriteInt32(CnBotTrh);
      }
      if (CnSldTrh != 0) {
        output.WriteRawTag(216, 11);
        output.WriteInt32(CnSldTrh);
      }
      if (CnBotOpn != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(CnBotOpn);
      }
      if (CnSldOpn != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(CnSldOpn);
      }
      if (CnOpened != 0) {
        output.WriteRawTag(160, 12);
        output.WriteInt32(CnOpened);
      }
      if (CnClosed != 0) {
        output.WriteRawTag(184, 12);
        output.WriteInt32(CnClosed);
      }
      if (FutMnyBot != 0D) {
        output.WriteRawTag(209, 12);
        output.WriteDouble(FutMnyBot);
      }
      if (FutMnySld != 0D) {
        output.WriteRawTag(233, 12);
        output.WriteDouble(FutMnySld);
      }
      if (DayPnl != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(DayPnl);
      }
      if (OpnPnlMidMark != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(OpnPnlMidMark);
      }
      if (OpnPnlClrMark != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(OpnPnlClrMark);
      }
      if (Beta != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(Beta);
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        output.WriteRawTag(224, 13);
        output.WriteEnum((int) BetaSource);
      }
      if (Days != 0) {
        output.WriteRawTag(248, 13);
        output.WriteInt32(Days);
      }
      if (Rate != 0F) {
        output.WriteRawTag(149, 14);
        output.WriteFloat(Rate);
      }
      if (Years != 0F) {
        output.WriteRawTag(173, 14);
        output.WriteFloat(Years);
      }
      if (Rh != 0F) {
        output.WriteRawTag(197, 14);
        output.WriteFloat(Rh);
      }
      if (Ve != 0F) {
        output.WriteRawTag(221, 14);
        output.WriteFloat(Ve);
      }
      if (RatePr != 0F) {
        output.WriteRawTag(245, 14);
        output.WriteFloat(RatePr);
      }
      if (YearsPr != 0F) {
        output.WriteRawTag(141, 15);
        output.WriteFloat(YearsPr);
      }
      if (MarginUDn != 0F) {
        output.WriteRawTag(165, 15);
        output.WriteFloat(MarginUDn);
      }
      if (MarginUUp != 0F) {
        output.WriteRawTag(189, 15);
        output.WriteFloat(MarginUUp);
      }
      if (NumExecutions != 0) {
        output.WriteRawTag(208, 15);
        output.WriteInt32(NumExecutions);
      }
      if (maxExecDttm_ != null) {
        output.WriteRawTag(234, 15);
        output.WriteMessage(MaxExecDttm);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(130, 16);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (ClientFirm.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
      }
      if (RiskServerCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RiskServerCode);
      }
      if (AggGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AggGroup);
      }
      if (ticker_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
      }
      if (UnderliersPerCn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UnderliersPerCn);
      }
      if (UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) UnderlierType);
      }
      if (TickValue != 0F) {
        size += 2 + 4;
      }
      if (PointValue != 0F) {
        size += 2 + 4;
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PointCurrency);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat);
      }
      if (FutPrc != 0D) {
        size += 2 + 8;
      }
      if (FutBid != 0D) {
        size += 2 + 8;
      }
      if (FutAsk != 0D) {
        size += 2 + 8;
      }
      if (FutMark != 0D) {
        size += 2 + 8;
      }
      if (FutMarkErrCodes != global::Spiderrock.Protobuf.MarkErrorCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FutMarkErrCodes);
      }
      if (FutMarkSource != global::Spiderrock.Protobuf.UMarkSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FutMarkSource);
      }
      if (FutOpnMidMark != 0D) {
        size += 2 + 8;
      }
      if (FutOpnClrMark != 0D) {
        size += 2 + 8;
      }
      if (FutOpnPosPrv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FutOpnPosPrv);
      }
      if (FutOpnPosClr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FutOpnPosClr);
      }
      if (FutOpnPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FutOpnPos);
      }
      if (FutOpnPosSrc != global::Spiderrock.Protobuf.PositionSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FutOpnPosSrc);
      }
      if (CnBot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnBot);
      }
      if (CnSld != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnSld);
      }
      if (CnBotTrd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnBotTrd);
      }
      if (CnSldTrd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnSldTrd);
      }
      if (CnBotHdg != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnBotHdg);
      }
      if (CnSldHdg != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnSldHdg);
      }
      if (CnBotTrh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnBotTrh);
      }
      if (CnSldTrh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnSldTrh);
      }
      if (CnBotOpn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnBotOpn);
      }
      if (CnSldOpn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnSldOpn);
      }
      if (CnOpened != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnOpened);
      }
      if (CnClosed != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CnClosed);
      }
      if (FutMnyBot != 0D) {
        size += 2 + 8;
      }
      if (FutMnySld != 0D) {
        size += 2 + 8;
      }
      if (DayPnl != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlMidMark != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlClrMark != 0F) {
        size += 2 + 4;
      }
      if (Beta != 0F) {
        size += 2 + 4;
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BetaSource);
      }
      if (Days != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Days);
      }
      if (Rate != 0F) {
        size += 2 + 4;
      }
      if (Years != 0F) {
        size += 2 + 4;
      }
      if (Rh != 0F) {
        size += 2 + 4;
      }
      if (Ve != 0F) {
        size += 2 + 4;
      }
      if (RatePr != 0F) {
        size += 2 + 4;
      }
      if (YearsPr != 0F) {
        size += 2 + 4;
      }
      if (MarginUDn != 0F) {
        size += 2 + 4;
      }
      if (MarginUUp != 0F) {
        size += 2 + 4;
      }
      if (NumExecutions != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumExecutions);
      }
      if (maxExecDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxExecDttm);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FuturePositionRecordV5 other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.FuturePositionRecordV5.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.ClientFirm.Length != 0) {
        ClientFirm = other.ClientFirm;
      }
      if (other.RiskServerCode.Length != 0) {
        RiskServerCode = other.RiskServerCode;
      }
      if (other.AggGroup.Length != 0) {
        AggGroup = other.AggGroup;
      }
      if (other.ticker_ != null) {
        if (ticker_ == null) {
          Ticker = new global::Spiderrock.Protobuf.TickerKey();
        }
        Ticker.MergeFrom(other.Ticker);
      }
      if (other.UnderliersPerCn != 0) {
        UnderliersPerCn = other.UnderliersPerCn;
      }
      if (other.UnderlierType != global::Spiderrock.Protobuf.UnderlierType.Unspecified) {
        UnderlierType = other.UnderlierType;
      }
      if (other.TickValue != 0F) {
        TickValue = other.TickValue;
      }
      if (other.PointValue != 0F) {
        PointValue = other.PointValue;
      }
      if (other.PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        PointCurrency = other.PointCurrency;
      }
      if (other.PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat = other.PriceFormat;
      }
      if (other.FutPrc != 0D) {
        FutPrc = other.FutPrc;
      }
      if (other.FutBid != 0D) {
        FutBid = other.FutBid;
      }
      if (other.FutAsk != 0D) {
        FutAsk = other.FutAsk;
      }
      if (other.FutMark != 0D) {
        FutMark = other.FutMark;
      }
      if (other.FutMarkErrCodes != global::Spiderrock.Protobuf.MarkErrorCode.Unspecified) {
        FutMarkErrCodes = other.FutMarkErrCodes;
      }
      if (other.FutMarkSource != global::Spiderrock.Protobuf.UMarkSource.Unspecified) {
        FutMarkSource = other.FutMarkSource;
      }
      if (other.FutOpnMidMark != 0D) {
        FutOpnMidMark = other.FutOpnMidMark;
      }
      if (other.FutOpnClrMark != 0D) {
        FutOpnClrMark = other.FutOpnClrMark;
      }
      if (other.FutOpnPosPrv != 0) {
        FutOpnPosPrv = other.FutOpnPosPrv;
      }
      if (other.FutOpnPosClr != 0) {
        FutOpnPosClr = other.FutOpnPosClr;
      }
      if (other.FutOpnPos != 0) {
        FutOpnPos = other.FutOpnPos;
      }
      if (other.FutOpnPosSrc != global::Spiderrock.Protobuf.PositionSource.Unspecified) {
        FutOpnPosSrc = other.FutOpnPosSrc;
      }
      if (other.CnBot != 0) {
        CnBot = other.CnBot;
      }
      if (other.CnSld != 0) {
        CnSld = other.CnSld;
      }
      if (other.CnBotTrd != 0) {
        CnBotTrd = other.CnBotTrd;
      }
      if (other.CnSldTrd != 0) {
        CnSldTrd = other.CnSldTrd;
      }
      if (other.CnBotHdg != 0) {
        CnBotHdg = other.CnBotHdg;
      }
      if (other.CnSldHdg != 0) {
        CnSldHdg = other.CnSldHdg;
      }
      if (other.CnBotTrh != 0) {
        CnBotTrh = other.CnBotTrh;
      }
      if (other.CnSldTrh != 0) {
        CnSldTrh = other.CnSldTrh;
      }
      if (other.CnBotOpn != 0) {
        CnBotOpn = other.CnBotOpn;
      }
      if (other.CnSldOpn != 0) {
        CnSldOpn = other.CnSldOpn;
      }
      if (other.CnOpened != 0) {
        CnOpened = other.CnOpened;
      }
      if (other.CnClosed != 0) {
        CnClosed = other.CnClosed;
      }
      if (other.FutMnyBot != 0D) {
        FutMnyBot = other.FutMnyBot;
      }
      if (other.FutMnySld != 0D) {
        FutMnySld = other.FutMnySld;
      }
      if (other.DayPnl != 0F) {
        DayPnl = other.DayPnl;
      }
      if (other.OpnPnlMidMark != 0F) {
        OpnPnlMidMark = other.OpnPnlMidMark;
      }
      if (other.OpnPnlClrMark != 0F) {
        OpnPnlClrMark = other.OpnPnlClrMark;
      }
      if (other.Beta != 0F) {
        Beta = other.Beta;
      }
      if (other.BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        BetaSource = other.BetaSource;
      }
      if (other.Days != 0) {
        Days = other.Days;
      }
      if (other.Rate != 0F) {
        Rate = other.Rate;
      }
      if (other.Years != 0F) {
        Years = other.Years;
      }
      if (other.Rh != 0F) {
        Rh = other.Rh;
      }
      if (other.Ve != 0F) {
        Ve = other.Ve;
      }
      if (other.RatePr != 0F) {
        RatePr = other.RatePr;
      }
      if (other.YearsPr != 0F) {
        YearsPr = other.YearsPr;
      }
      if (other.MarginUDn != 0F) {
        MarginUDn = other.MarginUDn;
      }
      if (other.MarginUUp != 0F) {
        MarginUUp = other.MarginUUp;
      }
      if (other.NumExecutions != 0) {
        NumExecutions = other.NumExecutions;
      }
      if (other.maxExecDttm_ != null) {
        if (maxExecDttm_ == null) {
          MaxExecDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaxExecDttm.MergeFrom(other.MaxExecDttm);
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.FuturePositionRecordV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            ClientFirm = input.ReadString();
            break;
          }
          case 826: {
            RiskServerCode = input.ReadString();
            break;
          }
          case 850: {
            AggGroup = input.ReadString();
            break;
          }
          case 874: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 896: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 920: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 949: {
            TickValue = input.ReadFloat();
            break;
          }
          case 973: {
            PointValue = input.ReadFloat();
            break;
          }
          case 992: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1016: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1041: {
            FutPrc = input.ReadDouble();
            break;
          }
          case 1065: {
            FutBid = input.ReadDouble();
            break;
          }
          case 1089: {
            FutAsk = input.ReadDouble();
            break;
          }
          case 1113: {
            FutMark = input.ReadDouble();
            break;
          }
          case 1136: {
            FutMarkErrCodes = (global::Spiderrock.Protobuf.MarkErrorCode) input.ReadEnum();
            break;
          }
          case 1160: {
            FutMarkSource = (global::Spiderrock.Protobuf.UMarkSource) input.ReadEnum();
            break;
          }
          case 1185: {
            FutOpnMidMark = input.ReadDouble();
            break;
          }
          case 1209: {
            FutOpnClrMark = input.ReadDouble();
            break;
          }
          case 1232: {
            FutOpnPosPrv = input.ReadInt32();
            break;
          }
          case 1256: {
            FutOpnPosClr = input.ReadInt32();
            break;
          }
          case 1280: {
            FutOpnPos = input.ReadInt32();
            break;
          }
          case 1304: {
            FutOpnPosSrc = (global::Spiderrock.Protobuf.PositionSource) input.ReadEnum();
            break;
          }
          case 1328: {
            CnBot = input.ReadInt32();
            break;
          }
          case 1352: {
            CnSld = input.ReadInt32();
            break;
          }
          case 1376: {
            CnBotTrd = input.ReadInt32();
            break;
          }
          case 1400: {
            CnSldTrd = input.ReadInt32();
            break;
          }
          case 1424: {
            CnBotHdg = input.ReadInt32();
            break;
          }
          case 1448: {
            CnSldHdg = input.ReadInt32();
            break;
          }
          case 1472: {
            CnBotTrh = input.ReadInt32();
            break;
          }
          case 1496: {
            CnSldTrh = input.ReadInt32();
            break;
          }
          case 1520: {
            CnBotOpn = input.ReadInt32();
            break;
          }
          case 1544: {
            CnSldOpn = input.ReadInt32();
            break;
          }
          case 1568: {
            CnOpened = input.ReadInt32();
            break;
          }
          case 1592: {
            CnClosed = input.ReadInt32();
            break;
          }
          case 1617: {
            FutMnyBot = input.ReadDouble();
            break;
          }
          case 1641: {
            FutMnySld = input.ReadDouble();
            break;
          }
          case 1669: {
            DayPnl = input.ReadFloat();
            break;
          }
          case 1693: {
            OpnPnlMidMark = input.ReadFloat();
            break;
          }
          case 1717: {
            OpnPnlClrMark = input.ReadFloat();
            break;
          }
          case 1741: {
            Beta = input.ReadFloat();
            break;
          }
          case 1760: {
            BetaSource = (global::Spiderrock.Protobuf.BetaSource) input.ReadEnum();
            break;
          }
          case 1784: {
            Days = input.ReadInt32();
            break;
          }
          case 1813: {
            Rate = input.ReadFloat();
            break;
          }
          case 1837: {
            Years = input.ReadFloat();
            break;
          }
          case 1861: {
            Rh = input.ReadFloat();
            break;
          }
          case 1885: {
            Ve = input.ReadFloat();
            break;
          }
          case 1909: {
            RatePr = input.ReadFloat();
            break;
          }
          case 1933: {
            YearsPr = input.ReadFloat();
            break;
          }
          case 1957: {
            MarginUDn = input.ReadFloat();
            break;
          }
          case 1981: {
            MarginUUp = input.ReadFloat();
            break;
          }
          case 2000: {
            NumExecutions = input.ReadInt32();
            break;
          }
          case 2026: {
            if (maxExecDttm_ == null) {
              MaxExecDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxExecDttm);
            break;
          }
          case 2050: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.FuturePositionRecordV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 802: {
            ClientFirm = input.ReadString();
            break;
          }
          case 826: {
            RiskServerCode = input.ReadString();
            break;
          }
          case 850: {
            AggGroup = input.ReadString();
            break;
          }
          case 874: {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            input.ReadMessage(Ticker);
            break;
          }
          case 896: {
            UnderliersPerCn = input.ReadInt32();
            break;
          }
          case 920: {
            UnderlierType = (global::Spiderrock.Protobuf.UnderlierType) input.ReadEnum();
            break;
          }
          case 949: {
            TickValue = input.ReadFloat();
            break;
          }
          case 973: {
            PointValue = input.ReadFloat();
            break;
          }
          case 992: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 1016: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1041: {
            FutPrc = input.ReadDouble();
            break;
          }
          case 1065: {
            FutBid = input.ReadDouble();
            break;
          }
          case 1089: {
            FutAsk = input.ReadDouble();
            break;
          }
          case 1113: {
            FutMark = input.ReadDouble();
            break;
          }
          case 1136: {
            FutMarkErrCodes = (global::Spiderrock.Protobuf.MarkErrorCode) input.ReadEnum();
            break;
          }
          case 1160: {
            FutMarkSource = (global::Spiderrock.Protobuf.UMarkSource) input.ReadEnum();
            break;
          }
          case 1185: {
            FutOpnMidMark = input.ReadDouble();
            break;
          }
          case 1209: {
            FutOpnClrMark = input.ReadDouble();
            break;
          }
          case 1232: {
            FutOpnPosPrv = input.ReadInt32();
            break;
          }
          case 1256: {
            FutOpnPosClr = input.ReadInt32();
            break;
          }
          case 1280: {
            FutOpnPos = input.ReadInt32();
            break;
          }
          case 1304: {
            FutOpnPosSrc = (global::Spiderrock.Protobuf.PositionSource) input.ReadEnum();
            break;
          }
          case 1328: {
            CnBot = input.ReadInt32();
            break;
          }
          case 1352: {
            CnSld = input.ReadInt32();
            break;
          }
          case 1376: {
            CnBotTrd = input.ReadInt32();
            break;
          }
          case 1400: {
            CnSldTrd = input.ReadInt32();
            break;
          }
          case 1424: {
            CnBotHdg = input.ReadInt32();
            break;
          }
          case 1448: {
            CnSldHdg = input.ReadInt32();
            break;
          }
          case 1472: {
            CnBotTrh = input.ReadInt32();
            break;
          }
          case 1496: {
            CnSldTrh = input.ReadInt32();
            break;
          }
          case 1520: {
            CnBotOpn = input.ReadInt32();
            break;
          }
          case 1544: {
            CnSldOpn = input.ReadInt32();
            break;
          }
          case 1568: {
            CnOpened = input.ReadInt32();
            break;
          }
          case 1592: {
            CnClosed = input.ReadInt32();
            break;
          }
          case 1617: {
            FutMnyBot = input.ReadDouble();
            break;
          }
          case 1641: {
            FutMnySld = input.ReadDouble();
            break;
          }
          case 1669: {
            DayPnl = input.ReadFloat();
            break;
          }
          case 1693: {
            OpnPnlMidMark = input.ReadFloat();
            break;
          }
          case 1717: {
            OpnPnlClrMark = input.ReadFloat();
            break;
          }
          case 1741: {
            Beta = input.ReadFloat();
            break;
          }
          case 1760: {
            BetaSource = (global::Spiderrock.Protobuf.BetaSource) input.ReadEnum();
            break;
          }
          case 1784: {
            Days = input.ReadInt32();
            break;
          }
          case 1813: {
            Rate = input.ReadFloat();
            break;
          }
          case 1837: {
            Years = input.ReadFloat();
            break;
          }
          case 1861: {
            Rh = input.ReadFloat();
            break;
          }
          case 1885: {
            Ve = input.ReadFloat();
            break;
          }
          case 1909: {
            RatePr = input.ReadFloat();
            break;
          }
          case 1933: {
            YearsPr = input.ReadFloat();
            break;
          }
          case 1957: {
            MarginUDn = input.ReadFloat();
            break;
          }
          case 1981: {
            MarginUUp = input.ReadFloat();
            break;
          }
          case 2000: {
            NumExecutions = input.ReadInt32();
            break;
          }
          case 2026: {
            if (maxExecDttm_ == null) {
              MaxExecDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxExecDttm);
            break;
          }
          case 2050: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the FuturePositionRecordV5 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.FuturePositionRecordV5.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          fkey_ = other.fkey_ != null ? other.fkey_.Clone() : null;
          accnt_ = other.accnt_;
          tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
          riskSession_ = other.riskSession_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "fkey" field.</summary>
        public const int FkeyFieldNumber = 10;
        private global::Spiderrock.Protobuf.ExpiryKey fkey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.ExpiryKey Fkey {
          get { return fkey_; }
          set {
            fkey_ = value;
          }
        }

        /// <summary>Field number for the "accnt" field.</summary>
        public const int AccntFieldNumber = 11;
        private string accnt_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Accnt {
          get { return accnt_; }
          set {
            accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trade_date" field.</summary>
        public const int TradeDateFieldNumber = 12;
        private global::Spiderrock.Protobuf.DateKey tradeDate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.DateKey TradeDate {
          get { return tradeDate_; }
          set {
            tradeDate_ = value;
          }
        }

        /// <summary>Field number for the "risk_session" field.</summary>
        public const int RiskSessionFieldNumber = 13;
        private global::Spiderrock.Protobuf.RiskSession riskSession_ = global::Spiderrock.Protobuf.RiskSession.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.RiskSession RiskSession {
          get { return riskSession_; }
          set {
            riskSession_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Fkey, other.Fkey)) return false;
          if (Accnt != other.Accnt) return false;
          if (!object.Equals(TradeDate, other.TradeDate)) return false;
          if (RiskSession != other.RiskSession) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (fkey_ != null) hash ^= Fkey.GetHashCode();
          if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
          if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) hash ^= RiskSession.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (fkey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Fkey);
          }
          if (Accnt.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(Accnt);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) RiskSession);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (fkey_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Fkey);
          }
          if (Accnt.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(Accnt);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) RiskSession);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (fkey_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fkey);
          }
          if (Accnt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Accnt);
          }
          if (tradeDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RiskSession);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.fkey_ != null) {
            if (fkey_ == null) {
              Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
            }
            Fkey.MergeFrom(other.Fkey);
          }
          if (other.Accnt.Length != 0) {
            Accnt = other.Accnt;
          }
          if (other.tradeDate_ != null) {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            TradeDate.MergeFrom(other.TradeDate);
          }
          if (other.RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            RiskSession = other.RiskSession;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (fkey_ == null) {
                  Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Fkey);
                break;
              }
              case 90: {
                Accnt = input.ReadString();
                break;
              }
              case 98: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
              case 104: {
                RiskSession = (global::Spiderrock.Protobuf.RiskSession) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (fkey_ == null) {
                  Fkey = new global::Spiderrock.Protobuf.ExpiryKey();
                }
                input.ReadMessage(Fkey);
                break;
              }
              case 90: {
                Accnt = input.ReadString();
                break;
              }
              case 98: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
              case 104: {
                RiskSession = (global::Spiderrock.Protobuf.RiskSession) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
