// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/ClientRisk/StockPositionRecordV5.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spiderrock.Protobuf {

  /// <summary>Holder for reflection information generated from Protobuf/ClientRisk/StockPositionRecordV5.proto</summary>
  public static partial class StockPositionRecordV5Reflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/ClientRisk/StockPositionRecordV5.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StockPositionRecordV5Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9Qcm90b2J1Zi9DbGllbnRSaXNrL1N0b2NrUG9zaXRpb25SZWNvcmRWNS5w",
            "cm90bxITc3BpZGVycm9jay5wcm90b2J1ZhoXc3BpZGVycm9ja19jb21tb24u",
            "cHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8i2AwKFVN0",
            "b2NrUG9zaXRpb25SZWNvcmRWNRIzCgVfbWV0YRgBIAEoCzIkLnNwaWRlcnJv",
            "Y2sucHJvdG9idWYuTWVzc2FnZU1ldGFkYXRhEj0KBHBrZXkYAiABKAsyLy5z",
            "cGlkZXJyb2NrLnByb3RvYnVmLlN0b2NrUG9zaXRpb25SZWNvcmRWNS5QS2V5",
            "EhgKEHJpc2tfc2VydmVyX2NvZGUYZyABKAkSFQoNcHJpX2FnZ19ncm91cBhq",
            "IAEoCRIVCg1zZWNfYWdnX2dyb3VwGG0gASgJEjQKC3N5bWJvbF90eXBlGHAg",
            "ASgOMh8uc3BpZGVycm9jay5wcm90b2J1Zi5TeW1ib2xUeXBlEhIKCnRpY2tf",
            "dmFsdWUYcyABKAISEwoLcG9pbnRfdmFsdWUYdiABKAISNQoOcG9pbnRfY3Vy",
            "cmVuY3kYeSABKA4yHS5zcGlkZXJyb2NrLnByb3RvYnVmLkN1cnJlbmN5EjYK",
            "DHByaWNlX2Zvcm1hdBh8IAEoDjIgLnNwaWRlcnJvY2sucHJvdG9idWYuUHJp",
            "Y2VGb3JtYXQSDwoHc3RrX3ByYxh/IAEoAhIQCgdzdGtfYmlkGIIBIAEoAhIQ",
            "CgdzdGtfYXNrGIUBIAEoAhIRCghzdGtfbWFyaxiIASABKAESPwoSc3RrX21h",
            "cmtfZXJyX2NvZGVzGIsBIAEoDjIiLnNwaWRlcnJvY2sucHJvdG9idWYuTWFy",
            "a0Vycm9yQ29kZRI6Cg9zdGtfbWFya19zb3VyY2UYjgEgASgOMiAuc3BpZGVy",
            "cm9jay5wcm90b2J1Zi5VTWFya1NvdXJjZRIZChBzdGtfb3BuX21pZF9tYXJr",
            "GJEBIAEoARIZChBzdGtfb3BuX2Nscl9tYXJrGJQBIAEoARIYCg9zdGtfb3Bu",
            "X3Bvc19wcnYYlwEgASgFEhgKD3N0a19vcG5fcG9zX2NschiaASABKAUSFAoL",
            "c3RrX29wbl9wb3MYnQEgASgFEj0KD3N0a19vcG5fcG9zX3NyYxigASABKA4y",
            "Iy5zcGlkZXJyb2NrLnByb3RvYnVmLlBvc2l0aW9uU291cmNlEg8KBnNoX2Jv",
            "dBijASABKAUSDwoGc2hfc2xkGKYBIAEoBRIUCgtzaF9zbGRfc2hydBipASAB",
            "KAUSEwoKc2hfYm90X2hkZxisASABKAUSEwoKc2hfc2xkX2hkZxivASABKAUS",
            "EwoKc2hfYm90X3RyaBiyASABKAUSEwoKc2hfc2xkX3RyaBi1ASABKAUSEwoK",
            "c2hfYm90X29wbhi4ASABKAUSEwoKc2hfc2xkX29wbhi7ASABKAUSEwoKc2hf",
            "Ym90X3RyZBi+ASABKAUSEwoKc2hfc2xkX3RyZBjBASABKAUSFAoLc3RrX21u",
            "eV9ib3QYxAEgASgBEhQKC3N0a19tbnlfc2xkGMcBIAEoARIQCgdkYXlfcG5s",
            "GMoBIAEoAhIZChBvcG5fcG5sX21pZF9tYXJrGM0BIAEoAhIZChBvcG5fcG5s",
            "X2Nscl9tYXJrGNABIAEoAhITCgpleF9kaXZfYW10GNMBIAEoAhIUCgtib3Jy",
            "b3dfcmF0ZRjWASABKAISDQoEYmV0YRjZASABKAISNQoLYmV0YV9zb3VyY2UY",
            "3AEgASgOMh8uc3BpZGVycm9jay5wcm90b2J1Zi5CZXRhU291cmNlEhMKCm1h",
            "cmdpbl91RG4Y5gEgASgCEhMKCm1hcmdpbl91VXAY5wEgASgCEhcKDm51bV9l",
            "eGVjdXRpb25zGN8BIAEoBRIyCg1tYXhfZXhlY19kdHRtGOIBIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoJdGltZXN0YW1wGOUBIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAaxAEKBFBLZXkSLgoGdGlja2Vy",
            "GAogASgLMh4uc3BpZGVycm9jay5wcm90b2J1Zi5UaWNrZXJLZXkSDQoFYWNj",
            "bnQYCyABKAkSMAoKdHJhZGVfZGF0ZRgMIAEoCzIcLnNwaWRlcnJvY2sucHJv",
            "dG9idWYuRGF0ZUtleRI2CgxyaXNrX3Nlc3Npb24YDSABKA4yIC5zcGlkZXJy",
            "b2NrLnByb3RvYnVmLlJpc2tTZXNzaW9uEhMKC2NsaWVudF9maXJtGA4gASgJ",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spiderrock.Protobuf.SpiderrockCommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.StockPositionRecordV5), global::Spiderrock.Protobuf.StockPositionRecordV5.Parser, new[]{ "Meta", "Pkey", "RiskServerCode", "PriAggGroup", "SecAggGroup", "SymbolType", "TickValue", "PointValue", "PointCurrency", "PriceFormat", "StkPrc", "StkBid", "StkAsk", "StkMark", "StkMarkErrCodes", "StkMarkSource", "StkOpnMidMark", "StkOpnClrMark", "StkOpnPosPrv", "StkOpnPosClr", "StkOpnPos", "StkOpnPosSrc", "ShBot", "ShSld", "ShSldShrt", "ShBotHdg", "ShSldHdg", "ShBotTrh", "ShSldTrh", "ShBotOpn", "ShSldOpn", "ShBotTrd", "ShSldTrd", "StkMnyBot", "StkMnySld", "DayPnl", "OpnPnlMidMark", "OpnPnlClrMark", "ExDivAmt", "BorrowRate", "Beta", "BetaSource", "MarginUDn", "MarginUUp", "NumExecutions", "MaxExecDttm", "Timestamp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spiderrock.Protobuf.StockPositionRecordV5.Types.PKey), global::Spiderrock.Protobuf.StockPositionRecordV5.Types.PKey.Parser, new[]{ "Ticker", "Accnt", "TradeDate", "RiskSession", "ClientFirm" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///
  ///StockPositionRecords are live risk records that contain start-of-day positions and all subsequent executions, including executions reported as done away.
  ///These records are published by a CoreRiskServer and represent the position and risk markup detail for a single equity or ETF security.
  ///New records are published immediately when a position changes and about once per minute if no position has changed.
  ///Note that all stock, future and option records for a single ticker are published simultaneously and records for the same chain should have consistent marks.
  /// </summary>
  public sealed partial class StockPositionRecordV5 : pb::IMessage<StockPositionRecordV5>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StockPositionRecordV5> _parser = new pb::MessageParser<StockPositionRecordV5>(() => new StockPositionRecordV5());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StockPositionRecordV5> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spiderrock.Protobuf.StockPositionRecordV5Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StockPositionRecordV5() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StockPositionRecordV5(StockPositionRecordV5 other) : this() {
      Meta_ = other.Meta_ != null ? other.Meta_.Clone() : null;
      pkey_ = other.pkey_ != null ? other.pkey_.Clone() : null;
      riskServerCode_ = other.riskServerCode_;
      priAggGroup_ = other.priAggGroup_;
      secAggGroup_ = other.secAggGroup_;
      symbolType_ = other.symbolType_;
      tickValue_ = other.tickValue_;
      pointValue_ = other.pointValue_;
      pointCurrency_ = other.pointCurrency_;
      priceFormat_ = other.priceFormat_;
      stkPrc_ = other.stkPrc_;
      stkBid_ = other.stkBid_;
      stkAsk_ = other.stkAsk_;
      stkMark_ = other.stkMark_;
      stkMarkErrCodes_ = other.stkMarkErrCodes_;
      stkMarkSource_ = other.stkMarkSource_;
      stkOpnMidMark_ = other.stkOpnMidMark_;
      stkOpnClrMark_ = other.stkOpnClrMark_;
      stkOpnPosPrv_ = other.stkOpnPosPrv_;
      stkOpnPosClr_ = other.stkOpnPosClr_;
      stkOpnPos_ = other.stkOpnPos_;
      stkOpnPosSrc_ = other.stkOpnPosSrc_;
      shBot_ = other.shBot_;
      shSld_ = other.shSld_;
      shSldShrt_ = other.shSldShrt_;
      shBotHdg_ = other.shBotHdg_;
      shSldHdg_ = other.shSldHdg_;
      shBotTrh_ = other.shBotTrh_;
      shSldTrh_ = other.shSldTrh_;
      shBotOpn_ = other.shBotOpn_;
      shSldOpn_ = other.shSldOpn_;
      shBotTrd_ = other.shBotTrd_;
      shSldTrd_ = other.shSldTrd_;
      stkMnyBot_ = other.stkMnyBot_;
      stkMnySld_ = other.stkMnySld_;
      dayPnl_ = other.dayPnl_;
      opnPnlMidMark_ = other.opnPnlMidMark_;
      opnPnlClrMark_ = other.opnPnlClrMark_;
      exDivAmt_ = other.exDivAmt_;
      borrowRate_ = other.borrowRate_;
      beta_ = other.beta_;
      betaSource_ = other.betaSource_;
      marginUDn_ = other.marginUDn_;
      marginUUp_ = other.marginUUp_;
      numExecutions_ = other.numExecutions_;
      maxExecDttm_ = other.maxExecDttm_ != null ? other.maxExecDttm_.Clone() : null;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StockPositionRecordV5 Clone() {
      return new StockPositionRecordV5(this);
    }

    /// <summary>Field number for the "_meta" field.</summary>
    public const int MetaFieldNumber = 1;
    private global::Spiderrock.Protobuf.MessageMetadata Meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MessageMetadata Meta {
      get { return Meta_; }
      set {
        Meta_ = value;
      }
    }

    /// <summary>Field number for the "pkey" field.</summary>
    public const int PkeyFieldNumber = 2;
    private global::Spiderrock.Protobuf.StockPositionRecordV5.Types.PKey pkey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.StockPositionRecordV5.Types.PKey Pkey {
      get { return pkey_; }
      set {
        pkey_ = value;
      }
    }

    /// <summary>Field number for the "risk_server_code" field.</summary>
    public const int RiskServerCodeFieldNumber = 103;
    private string riskServerCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RiskServerCode {
      get { return riskServerCode_; }
      set {
        riskServerCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pri_agg_group" field.</summary>
    public const int PriAggGroupFieldNumber = 106;
    private string priAggGroup_ = "";
    /// <summary>
    /// primary aggregation group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PriAggGroup {
      get { return priAggGroup_; }
      set {
        priAggGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sec_agg_group" field.</summary>
    public const int SecAggGroupFieldNumber = 109;
    private string secAggGroup_ = "";
    /// <summary>
    /// secondary aggregation group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecAggGroup {
      get { return secAggGroup_; }
      set {
        secAggGroup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "symbol_type" field.</summary>
    public const int SymbolTypeFieldNumber = 112;
    private global::Spiderrock.Protobuf.SymbolType symbolType_ = global::Spiderrock.Protobuf.SymbolType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.SymbolType SymbolType {
      get { return symbolType_; }
      set {
        symbolType_ = value;
      }
    }

    /// <summary>Field number for the "tick_value" field.</summary>
    public const int TickValueFieldNumber = 115;
    private float tickValue_;
    /// <summary>
    /// $NLV value of a single tick change in display premium	(pointValue = tickValue / tickSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float TickValue {
      get { return tickValue_; }
      set {
        tickValue_ = value;
      }
    }

    /// <summary>Field number for the "point_value" field.</summary>
    public const int PointValueFieldNumber = 118;
    private float pointValue_;
    /// <summary>
    /// $NLV value of a single point change in display premium (pointValue = tickValue / tickSize)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float PointValue {
      get { return pointValue_; }
      set {
        pointValue_ = value;
      }
    }

    /// <summary>Field number for the "point_currency" field.</summary>
    public const int PointCurrencyFieldNumber = 121;
    private global::Spiderrock.Protobuf.Currency pointCurrency_ = global::Spiderrock.Protobuf.Currency.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.Currency PointCurrency {
      get { return pointCurrency_; }
      set {
        pointCurrency_ = value;
      }
    }

    /// <summary>Field number for the "price_format" field.</summary>
    public const int PriceFormatFieldNumber = 124;
    private global::Spiderrock.Protobuf.PriceFormat priceFormat_ = global::Spiderrock.Protobuf.PriceFormat.Unspecified;
    /// <summary>
    /// price display format code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PriceFormat PriceFormat {
      get { return priceFormat_; }
      set {
        priceFormat_ = value;
      }
    }

    /// <summary>Field number for the "stk_prc" field.</summary>
    public const int StkPrcFieldNumber = 127;
    private float stkPrc_;
    /// <summary>
    /// current stock price (any market session) (persists if market closed/halted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StkPrc {
      get { return stkPrc_; }
      set {
        stkPrc_ = value;
      }
    }

    /// <summary>Field number for the "stk_bid" field.</summary>
    public const int StkBidFieldNumber = 130;
    private float stkBid_;
    /// <summary>
    /// current stock bid (any market session) (zero if market closed/halted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StkBid {
      get { return stkBid_; }
      set {
        stkBid_ = value;
      }
    }

    /// <summary>Field number for the "stk_ask" field.</summary>
    public const int StkAskFieldNumber = 133;
    private float stkAsk_;
    /// <summary>
    /// current stock ask (any market session) (zero if market closed/halted)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float StkAsk {
      get { return stkAsk_; }
      set {
        stkAsk_ = value;
      }
    }

    /// <summary>Field number for the "stk_mark" field.</summary>
    public const int StkMarkFieldNumber = 136;
    private double stkMark_;
    /// <summary>
    /// current stock mark (freezes at SR CloseMarkTime)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StkMark {
      get { return stkMark_; }
      set {
        stkMark_ = value;
      }
    }

    /// <summary>Field number for the "stk_mark_err_codes" field.</summary>
    public const int StkMarkErrCodesFieldNumber = 139;
    private global::Spiderrock.Protobuf.MarkErrorCode stkMarkErrCodes_ = global::Spiderrock.Protobuf.MarkErrorCode.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.MarkErrorCode StkMarkErrCodes {
      get { return stkMarkErrCodes_; }
      set {
        stkMarkErrCodes_ = value;
      }
    }

    /// <summary>Field number for the "stk_mark_source" field.</summary>
    public const int StkMarkSourceFieldNumber = 142;
    private global::Spiderrock.Protobuf.UMarkSource stkMarkSource_ = global::Spiderrock.Protobuf.UMarkSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.UMarkSource StkMarkSource {
      get { return stkMarkSource_; }
      set {
        stkMarkSource_ = value;
      }
    }

    /// <summary>Field number for the "stk_opn_mid_mark" field.</summary>
    public const int StkOpnMidMarkFieldNumber = 145;
    private double stkOpnMidMark_;
    /// <summary>
    /// start-of-day SR stock mark (rotated from prior day record) [corp action adjusted]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StkOpnMidMark {
      get { return stkOpnMidMark_; }
      set {
        stkOpnMidMark_ = value;
      }
    }

    /// <summary>Field number for the "stk_opn_clr_mark" field.</summary>
    public const int StkOpnClrMarkFieldNumber = 148;
    private double stkOpnClrMark_;
    /// <summary>
    /// start-of-day CLR stock mark (supplied by client/clearing firm via clearing position load) [should be corp action adjusted]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StkOpnClrMark {
      get { return stkOpnClrMark_; }
      set {
        stkOpnClrMark_ = value;
      }
    }

    /// <summary>Field number for the "stk_opn_pos_prv" field.</summary>
    public const int StkOpnPosPrvFieldNumber = 151;
    private int stkOpnPosPrv_;
    /// <summary>
    /// start-of-day SR share position (rotated from prior day record) [corp action adjusted]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StkOpnPosPrv {
      get { return stkOpnPosPrv_; }
      set {
        stkOpnPosPrv_ = value;
      }
    }

    /// <summary>Field number for the "stk_opn_pos_clr" field.</summary>
    public const int StkOpnPosClrFieldNumber = 154;
    private int stkOpnPosClr_;
    /// <summary>
    /// start-of-day CLR share position (supplied by client/clearing firm via clearing position load) [should be corp action adjusted]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StkOpnPosClr {
      get { return stkOpnPosClr_; }
      set {
        stkOpnPosClr_ = value;
      }
    }

    /// <summary>Field number for the "stk_opn_pos" field.</summary>
    public const int StkOpnPosFieldNumber = 157;
    private int stkOpnPos_;
    /// <summary>
    /// start of period share position (effective; can be from either CLR or SR)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StkOpnPos {
      get { return stkOpnPos_; }
      set {
        stkOpnPos_ = value;
      }
    }

    /// <summary>Field number for the "stk_opn_pos_src" field.</summary>
    public const int StkOpnPosSrcFieldNumber = 160;
    private global::Spiderrock.Protobuf.PositionSource stkOpnPosSrc_ = global::Spiderrock.Protobuf.PositionSource.Unspecified;
    /// <summary>
    /// start of period position source
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.PositionSource StkOpnPosSrc {
      get { return stkOpnPosSrc_; }
      set {
        stkOpnPosSrc_ = value;
      }
    }

    /// <summary>Field number for the "sh_bot" field.</summary>
    public const int ShBotFieldNumber = 163;
    private int shBot_;
    /// <summary>
    /// number of shares bot today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShBot {
      get { return shBot_; }
      set {
        shBot_ = value;
      }
    }

    /// <summary>Field number for the "sh_sld" field.</summary>
    public const int ShSldFieldNumber = 166;
    private int shSld_;
    /// <summary>
    /// number of shares sld today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShSld {
      get { return shSld_; }
      set {
        shSld_ = value;
      }
    }

    /// <summary>Field number for the "sh_sld_shrt" field.</summary>
    public const int ShSldShrtFieldNumber = 169;
    private int shSldShrt_;
    /// <summary>
    /// number of shares sld short today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShSldShrt {
      get { return shSldShrt_; }
      set {
        shSldShrt_ = value;
      }
    }

    /// <summary>Field number for the "sh_bot_hdg" field.</summary>
    public const int ShBotHdgFieldNumber = 172;
    private int shBotHdg_;
    /// <summary>
    /// number of shares bot today from hedging (spdrSource=HedgeTool)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShBotHdg {
      get { return shBotHdg_; }
      set {
        shBotHdg_ = value;
      }
    }

    /// <summary>Field number for the "sh_sld_hdg" field.</summary>
    public const int ShSldHdgFieldNumber = 175;
    private int shSldHdg_;
    /// <summary>
    /// number of shares sld today from hedging (spdrSource=HedgeTool)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShSldHdg {
      get { return shSldHdg_; }
      set {
        shSldHdg_ = value;
      }
    }

    /// <summary>Field number for the "sh_bot_trh" field.</summary>
    public const int ShBotTrhFieldNumber = 178;
    private int shBotTrh_;
    /// <summary>
    /// number of shares bot today from hedging (spdrSource=TradeHedge)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShBotTrh {
      get { return shBotTrh_; }
      set {
        shBotTrh_ = value;
      }
    }

    /// <summary>Field number for the "sh_sld_trh" field.</summary>
    public const int ShSldTrhFieldNumber = 181;
    private int shSldTrh_;
    /// <summary>
    /// number of shares sld today from hedging (spdrSource=TradeHedge)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShSldTrh {
      get { return shSldTrh_; }
      set {
        shSldTrh_ = value;
      }
    }

    /// <summary>Field number for the "sh_bot_opn" field.</summary>
    public const int ShBotOpnFieldNumber = 184;
    private int shBotOpn_;
    /// <summary>
    /// number of shares bot today from hedging (spdrSource=OpenHedge)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShBotOpn {
      get { return shBotOpn_; }
      set {
        shBotOpn_ = value;
      }
    }

    /// <summary>Field number for the "sh_sld_opn" field.</summary>
    public const int ShSldOpnFieldNumber = 187;
    private int shSldOpn_;
    /// <summary>
    /// number of shares sld today from hedging (spdrSource=OpenHedge)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShSldOpn {
      get { return shSldOpn_; }
      set {
        shSldOpn_ = value;
      }
    }

    /// <summary>Field number for the "sh_bot_trd" field.</summary>
    public const int ShBotTrdFieldNumber = 190;
    private int shBotTrd_;
    /// <summary>
    /// number of shares bot today from any trade hedging source (AutoHedge or Trades loop)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShBotTrd {
      get { return shBotTrd_; }
      set {
        shBotTrd_ = value;
      }
    }

    /// <summary>Field number for the "sh_sld_trd" field.</summary>
    public const int ShSldTrdFieldNumber = 193;
    private int shSldTrd_;
    /// <summary>
    /// number of shares sld today from any trade hedging source (AutoHedge or Trades loop)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShSldTrd {
      get { return shSldTrd_; }
      set {
        shSldTrd_ = value;
      }
    }

    /// <summary>Field number for the "stk_mny_bot" field.</summary>
    public const int StkMnyBotFieldNumber = 196;
    private double stkMnyBot_;
    /// <summary>
    /// sum of settle cash for all buy executions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StkMnyBot {
      get { return stkMnyBot_; }
      set {
        stkMnyBot_ = value;
      }
    }

    /// <summary>Field number for the "stk_mny_sld" field.</summary>
    public const int StkMnySldFieldNumber = 199;
    private double stkMnySld_;
    /// <summary>
    /// sum of settle cash for all sell executions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double StkMnySld {
      get { return stkMnySld_; }
      set {
        stkMnySld_ = value;
      }
    }

    /// <summary>Field number for the "day_pnl" field.</summary>
    public const int DayPnlFieldNumber = 202;
    private float dayPnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DayPnl {
      get { return dayPnl_; }
      set {
        dayPnl_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_mid_mark" field.</summary>
    public const int OpnPnlMidMarkFieldNumber = 205;
    private float opnPnlMidMark_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlMidMark {
      get { return opnPnlMidMark_; }
      set {
        opnPnlMidMark_ = value;
      }
    }

    /// <summary>Field number for the "opn_pnl_clr_mark" field.</summary>
    public const int OpnPnlClrMarkFieldNumber = 208;
    private float opnPnlClrMark_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OpnPnlClrMark {
      get { return opnPnlClrMark_; }
      set {
        opnPnlClrMark_ = value;
      }
    }

    /// <summary>Field number for the "ex_div_amt" field.</summary>
    public const int ExDivAmtFieldNumber = 211;
    private float exDivAmt_;
    /// <summary>
    /// amount of any dividend going ex today
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ExDivAmt {
      get { return exDivAmt_; }
      set {
        exDivAmt_ = value;
      }
    }

    /// <summary>Field number for the "borrow_rate" field.</summary>
    public const int BorrowRateFieldNumber = 214;
    private float borrowRate_;
    /// <summary>
    /// overnight rate required to borrow stock (if known)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BorrowRate {
      get { return borrowRate_; }
      set {
        borrowRate_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 217;
    private float beta_;
    /// <summary>
    /// beta (usually beta to SPX; see AccountConfig.betaSource)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    /// <summary>Field number for the "beta_source" field.</summary>
    public const int BetaSourceFieldNumber = 220;
    private global::Spiderrock.Protobuf.BetaSource betaSource_ = global::Spiderrock.Protobuf.BetaSource.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spiderrock.Protobuf.BetaSource BetaSource {
      get { return betaSource_; }
      set {
        betaSource_ = value;
      }
    }

    /// <summary>Field number for the "margin_uDn" field.</summary>
    public const int MarginUDnFieldNumber = 230;
    private float marginUDn_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc dn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUDn {
      get { return marginUDn_; }
      set {
        marginUDn_ = value;
      }
    }

    /// <summary>Field number for the "margin_uUp" field.</summary>
    public const int MarginUUpFieldNumber = 231;
    private float marginUUp_;
    /// <summary>
    /// Aggregate RiskSlide: uPrc up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MarginUUp {
      get { return marginUUp_; }
      set {
        marginUUp_ = value;
      }
    }

    /// <summary>Field number for the "num_executions" field.</summary>
    public const int NumExecutionsFieldNumber = 223;
    private int numExecutions_;
    /// <summary>
    /// number of included SpdrParentExecution records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumExecutions {
      get { return numExecutions_; }
      set {
        numExecutions_ = value;
      }
    }

    /// <summary>Field number for the "max_exec_dttm" field.</summary>
    public const int MaxExecDttmFieldNumber = 226;
    private global::Google.Protobuf.WellKnownTypes.Timestamp maxExecDttm_;
    /// <summary>
    /// max (timestamp) of included SpdrParentExecution records
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp MaxExecDttm {
      get { return maxExecDttm_; }
      set {
        maxExecDttm_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 229;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StockPositionRecordV5);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StockPositionRecordV5 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Meta, other.Meta)) return false;
      if (!object.Equals(Pkey, other.Pkey)) return false;
      if (RiskServerCode != other.RiskServerCode) return false;
      if (PriAggGroup != other.PriAggGroup) return false;
      if (SecAggGroup != other.SecAggGroup) return false;
      if (SymbolType != other.SymbolType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TickValue, other.TickValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointValue, other.PointValue)) return false;
      if (PointCurrency != other.PointCurrency) return false;
      if (PriceFormat != other.PriceFormat) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StkPrc, other.StkPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StkBid, other.StkBid)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StkAsk, other.StkAsk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StkMark, other.StkMark)) return false;
      if (StkMarkErrCodes != other.StkMarkErrCodes) return false;
      if (StkMarkSource != other.StkMarkSource) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StkOpnMidMark, other.StkOpnMidMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StkOpnClrMark, other.StkOpnClrMark)) return false;
      if (StkOpnPosPrv != other.StkOpnPosPrv) return false;
      if (StkOpnPosClr != other.StkOpnPosClr) return false;
      if (StkOpnPos != other.StkOpnPos) return false;
      if (StkOpnPosSrc != other.StkOpnPosSrc) return false;
      if (ShBot != other.ShBot) return false;
      if (ShSld != other.ShSld) return false;
      if (ShSldShrt != other.ShSldShrt) return false;
      if (ShBotHdg != other.ShBotHdg) return false;
      if (ShSldHdg != other.ShSldHdg) return false;
      if (ShBotTrh != other.ShBotTrh) return false;
      if (ShSldTrh != other.ShSldTrh) return false;
      if (ShBotOpn != other.ShBotOpn) return false;
      if (ShSldOpn != other.ShSldOpn) return false;
      if (ShBotTrd != other.ShBotTrd) return false;
      if (ShSldTrd != other.ShSldTrd) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StkMnyBot, other.StkMnyBot)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StkMnySld, other.StkMnySld)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayPnl, other.DayPnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlMidMark, other.OpnPnlMidMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpnPnlClrMark, other.OpnPnlClrMark)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExDivAmt, other.ExDivAmt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BorrowRate, other.BorrowRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta, other.Beta)) return false;
      if (BetaSource != other.BetaSource) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUDn, other.MarginUDn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarginUUp, other.MarginUUp)) return false;
      if (NumExecutions != other.NumExecutions) return false;
      if (!object.Equals(MaxExecDttm, other.MaxExecDttm)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Meta_ != null) hash ^= Meta.GetHashCode();
      if (pkey_ != null) hash ^= Pkey.GetHashCode();
      if (RiskServerCode.Length != 0) hash ^= RiskServerCode.GetHashCode();
      if (PriAggGroup.Length != 0) hash ^= PriAggGroup.GetHashCode();
      if (SecAggGroup.Length != 0) hash ^= SecAggGroup.GetHashCode();
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) hash ^= SymbolType.GetHashCode();
      if (TickValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TickValue);
      if (PointValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointValue);
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) hash ^= PointCurrency.GetHashCode();
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) hash ^= PriceFormat.GetHashCode();
      if (StkPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StkPrc);
      if (StkBid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StkBid);
      if (StkAsk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StkAsk);
      if (StkMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StkMark);
      if (StkMarkErrCodes != global::Spiderrock.Protobuf.MarkErrorCode.Unspecified) hash ^= StkMarkErrCodes.GetHashCode();
      if (StkMarkSource != global::Spiderrock.Protobuf.UMarkSource.Unspecified) hash ^= StkMarkSource.GetHashCode();
      if (StkOpnMidMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StkOpnMidMark);
      if (StkOpnClrMark != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StkOpnClrMark);
      if (StkOpnPosPrv != 0) hash ^= StkOpnPosPrv.GetHashCode();
      if (StkOpnPosClr != 0) hash ^= StkOpnPosClr.GetHashCode();
      if (StkOpnPos != 0) hash ^= StkOpnPos.GetHashCode();
      if (StkOpnPosSrc != global::Spiderrock.Protobuf.PositionSource.Unspecified) hash ^= StkOpnPosSrc.GetHashCode();
      if (ShBot != 0) hash ^= ShBot.GetHashCode();
      if (ShSld != 0) hash ^= ShSld.GetHashCode();
      if (ShSldShrt != 0) hash ^= ShSldShrt.GetHashCode();
      if (ShBotHdg != 0) hash ^= ShBotHdg.GetHashCode();
      if (ShSldHdg != 0) hash ^= ShSldHdg.GetHashCode();
      if (ShBotTrh != 0) hash ^= ShBotTrh.GetHashCode();
      if (ShSldTrh != 0) hash ^= ShSldTrh.GetHashCode();
      if (ShBotOpn != 0) hash ^= ShBotOpn.GetHashCode();
      if (ShSldOpn != 0) hash ^= ShSldOpn.GetHashCode();
      if (ShBotTrd != 0) hash ^= ShBotTrd.GetHashCode();
      if (ShSldTrd != 0) hash ^= ShSldTrd.GetHashCode();
      if (StkMnyBot != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StkMnyBot);
      if (StkMnySld != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StkMnySld);
      if (DayPnl != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayPnl);
      if (OpnPnlMidMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlMidMark);
      if (OpnPnlClrMark != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpnPnlClrMark);
      if (ExDivAmt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExDivAmt);
      if (BorrowRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BorrowRate);
      if (Beta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta);
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) hash ^= BetaSource.GetHashCode();
      if (MarginUDn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUDn);
      if (MarginUUp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarginUUp);
      if (NumExecutions != 0) hash ^= NumExecutions.GetHashCode();
      if (maxExecDttm_ != null) hash ^= MaxExecDttm.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (RiskServerCode.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(RiskServerCode);
      }
      if (PriAggGroup.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(PriAggGroup);
      }
      if (SecAggGroup.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(SecAggGroup);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) SymbolType);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(TickValue);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) PointCurrency);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) PriceFormat);
      }
      if (StkPrc != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(StkPrc);
      }
      if (StkBid != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(StkBid);
      }
      if (StkAsk != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(StkAsk);
      }
      if (StkMark != 0D) {
        output.WriteRawTag(193, 8);
        output.WriteDouble(StkMark);
      }
      if (StkMarkErrCodes != global::Spiderrock.Protobuf.MarkErrorCode.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) StkMarkErrCodes);
      }
      if (StkMarkSource != global::Spiderrock.Protobuf.UMarkSource.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) StkMarkSource);
      }
      if (StkOpnMidMark != 0D) {
        output.WriteRawTag(137, 9);
        output.WriteDouble(StkOpnMidMark);
      }
      if (StkOpnClrMark != 0D) {
        output.WriteRawTag(161, 9);
        output.WriteDouble(StkOpnClrMark);
      }
      if (StkOpnPosPrv != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(StkOpnPosPrv);
      }
      if (StkOpnPosClr != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(StkOpnPosClr);
      }
      if (StkOpnPos != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(StkOpnPos);
      }
      if (StkOpnPosSrc != global::Spiderrock.Protobuf.PositionSource.Unspecified) {
        output.WriteRawTag(128, 10);
        output.WriteEnum((int) StkOpnPosSrc);
      }
      if (ShBot != 0) {
        output.WriteRawTag(152, 10);
        output.WriteInt32(ShBot);
      }
      if (ShSld != 0) {
        output.WriteRawTag(176, 10);
        output.WriteInt32(ShSld);
      }
      if (ShSldShrt != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(ShSldShrt);
      }
      if (ShBotHdg != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(ShBotHdg);
      }
      if (ShSldHdg != 0) {
        output.WriteRawTag(248, 10);
        output.WriteInt32(ShSldHdg);
      }
      if (ShBotTrh != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(ShBotTrh);
      }
      if (ShSldTrh != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(ShSldTrh);
      }
      if (ShBotOpn != 0) {
        output.WriteRawTag(192, 11);
        output.WriteInt32(ShBotOpn);
      }
      if (ShSldOpn != 0) {
        output.WriteRawTag(216, 11);
        output.WriteInt32(ShSldOpn);
      }
      if (ShBotTrd != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(ShBotTrd);
      }
      if (ShSldTrd != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(ShSldTrd);
      }
      if (StkMnyBot != 0D) {
        output.WriteRawTag(161, 12);
        output.WriteDouble(StkMnyBot);
      }
      if (StkMnySld != 0D) {
        output.WriteRawTag(185, 12);
        output.WriteDouble(StkMnySld);
      }
      if (DayPnl != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(DayPnl);
      }
      if (OpnPnlMidMark != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(OpnPnlMidMark);
      }
      if (OpnPnlClrMark != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(OpnPnlClrMark);
      }
      if (ExDivAmt != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(ExDivAmt);
      }
      if (BorrowRate != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(BorrowRate);
      }
      if (Beta != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(Beta);
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        output.WriteRawTag(224, 13);
        output.WriteEnum((int) BetaSource);
      }
      if (NumExecutions != 0) {
        output.WriteRawTag(248, 13);
        output.WriteInt32(NumExecutions);
      }
      if (maxExecDttm_ != null) {
        output.WriteRawTag(146, 14);
        output.WriteMessage(MaxExecDttm);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(170, 14);
        output.WriteMessage(Timestamp);
      }
      if (MarginUDn != 0F) {
        output.WriteRawTag(181, 14);
        output.WriteFloat(MarginUDn);
      }
      if (MarginUUp != 0F) {
        output.WriteRawTag(189, 14);
        output.WriteFloat(MarginUUp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Meta_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Meta);
      }
      if (pkey_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pkey);
      }
      if (RiskServerCode.Length != 0) {
        output.WriteRawTag(186, 6);
        output.WriteString(RiskServerCode);
      }
      if (PriAggGroup.Length != 0) {
        output.WriteRawTag(210, 6);
        output.WriteString(PriAggGroup);
      }
      if (SecAggGroup.Length != 0) {
        output.WriteRawTag(234, 6);
        output.WriteString(SecAggGroup);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        output.WriteRawTag(128, 7);
        output.WriteEnum((int) SymbolType);
      }
      if (TickValue != 0F) {
        output.WriteRawTag(157, 7);
        output.WriteFloat(TickValue);
      }
      if (PointValue != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(PointValue);
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) PointCurrency);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        output.WriteRawTag(224, 7);
        output.WriteEnum((int) PriceFormat);
      }
      if (StkPrc != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(StkPrc);
      }
      if (StkBid != 0F) {
        output.WriteRawTag(149, 8);
        output.WriteFloat(StkBid);
      }
      if (StkAsk != 0F) {
        output.WriteRawTag(173, 8);
        output.WriteFloat(StkAsk);
      }
      if (StkMark != 0D) {
        output.WriteRawTag(193, 8);
        output.WriteDouble(StkMark);
      }
      if (StkMarkErrCodes != global::Spiderrock.Protobuf.MarkErrorCode.Unspecified) {
        output.WriteRawTag(216, 8);
        output.WriteEnum((int) StkMarkErrCodes);
      }
      if (StkMarkSource != global::Spiderrock.Protobuf.UMarkSource.Unspecified) {
        output.WriteRawTag(240, 8);
        output.WriteEnum((int) StkMarkSource);
      }
      if (StkOpnMidMark != 0D) {
        output.WriteRawTag(137, 9);
        output.WriteDouble(StkOpnMidMark);
      }
      if (StkOpnClrMark != 0D) {
        output.WriteRawTag(161, 9);
        output.WriteDouble(StkOpnClrMark);
      }
      if (StkOpnPosPrv != 0) {
        output.WriteRawTag(184, 9);
        output.WriteInt32(StkOpnPosPrv);
      }
      if (StkOpnPosClr != 0) {
        output.WriteRawTag(208, 9);
        output.WriteInt32(StkOpnPosClr);
      }
      if (StkOpnPos != 0) {
        output.WriteRawTag(232, 9);
        output.WriteInt32(StkOpnPos);
      }
      if (StkOpnPosSrc != global::Spiderrock.Protobuf.PositionSource.Unspecified) {
        output.WriteRawTag(128, 10);
        output.WriteEnum((int) StkOpnPosSrc);
      }
      if (ShBot != 0) {
        output.WriteRawTag(152, 10);
        output.WriteInt32(ShBot);
      }
      if (ShSld != 0) {
        output.WriteRawTag(176, 10);
        output.WriteInt32(ShSld);
      }
      if (ShSldShrt != 0) {
        output.WriteRawTag(200, 10);
        output.WriteInt32(ShSldShrt);
      }
      if (ShBotHdg != 0) {
        output.WriteRawTag(224, 10);
        output.WriteInt32(ShBotHdg);
      }
      if (ShSldHdg != 0) {
        output.WriteRawTag(248, 10);
        output.WriteInt32(ShSldHdg);
      }
      if (ShBotTrh != 0) {
        output.WriteRawTag(144, 11);
        output.WriteInt32(ShBotTrh);
      }
      if (ShSldTrh != 0) {
        output.WriteRawTag(168, 11);
        output.WriteInt32(ShSldTrh);
      }
      if (ShBotOpn != 0) {
        output.WriteRawTag(192, 11);
        output.WriteInt32(ShBotOpn);
      }
      if (ShSldOpn != 0) {
        output.WriteRawTag(216, 11);
        output.WriteInt32(ShSldOpn);
      }
      if (ShBotTrd != 0) {
        output.WriteRawTag(240, 11);
        output.WriteInt32(ShBotTrd);
      }
      if (ShSldTrd != 0) {
        output.WriteRawTag(136, 12);
        output.WriteInt32(ShSldTrd);
      }
      if (StkMnyBot != 0D) {
        output.WriteRawTag(161, 12);
        output.WriteDouble(StkMnyBot);
      }
      if (StkMnySld != 0D) {
        output.WriteRawTag(185, 12);
        output.WriteDouble(StkMnySld);
      }
      if (DayPnl != 0F) {
        output.WriteRawTag(213, 12);
        output.WriteFloat(DayPnl);
      }
      if (OpnPnlMidMark != 0F) {
        output.WriteRawTag(237, 12);
        output.WriteFloat(OpnPnlMidMark);
      }
      if (OpnPnlClrMark != 0F) {
        output.WriteRawTag(133, 13);
        output.WriteFloat(OpnPnlClrMark);
      }
      if (ExDivAmt != 0F) {
        output.WriteRawTag(157, 13);
        output.WriteFloat(ExDivAmt);
      }
      if (BorrowRate != 0F) {
        output.WriteRawTag(181, 13);
        output.WriteFloat(BorrowRate);
      }
      if (Beta != 0F) {
        output.WriteRawTag(205, 13);
        output.WriteFloat(Beta);
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        output.WriteRawTag(224, 13);
        output.WriteEnum((int) BetaSource);
      }
      if (NumExecutions != 0) {
        output.WriteRawTag(248, 13);
        output.WriteInt32(NumExecutions);
      }
      if (maxExecDttm_ != null) {
        output.WriteRawTag(146, 14);
        output.WriteMessage(MaxExecDttm);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(170, 14);
        output.WriteMessage(Timestamp);
      }
      if (MarginUDn != 0F) {
        output.WriteRawTag(181, 14);
        output.WriteFloat(MarginUDn);
      }
      if (MarginUUp != 0F) {
        output.WriteRawTag(189, 14);
        output.WriteFloat(MarginUUp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      if (pkey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pkey);
      }
      if (RiskServerCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RiskServerCode);
      }
      if (PriAggGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PriAggGroup);
      }
      if (SecAggGroup.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SecAggGroup);
      }
      if (SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SymbolType);
      }
      if (TickValue != 0F) {
        size += 2 + 4;
      }
      if (PointValue != 0F) {
        size += 2 + 4;
      }
      if (PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PointCurrency);
      }
      if (PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PriceFormat);
      }
      if (StkPrc != 0F) {
        size += 2 + 4;
      }
      if (StkBid != 0F) {
        size += 2 + 4;
      }
      if (StkAsk != 0F) {
        size += 2 + 4;
      }
      if (StkMark != 0D) {
        size += 2 + 8;
      }
      if (StkMarkErrCodes != global::Spiderrock.Protobuf.MarkErrorCode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StkMarkErrCodes);
      }
      if (StkMarkSource != global::Spiderrock.Protobuf.UMarkSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StkMarkSource);
      }
      if (StkOpnMidMark != 0D) {
        size += 2 + 8;
      }
      if (StkOpnClrMark != 0D) {
        size += 2 + 8;
      }
      if (StkOpnPosPrv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StkOpnPosPrv);
      }
      if (StkOpnPosClr != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StkOpnPosClr);
      }
      if (StkOpnPos != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(StkOpnPos);
      }
      if (StkOpnPosSrc != global::Spiderrock.Protobuf.PositionSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StkOpnPosSrc);
      }
      if (ShBot != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShBot);
      }
      if (ShSld != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShSld);
      }
      if (ShSldShrt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShSldShrt);
      }
      if (ShBotHdg != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShBotHdg);
      }
      if (ShSldHdg != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShSldHdg);
      }
      if (ShBotTrh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShBotTrh);
      }
      if (ShSldTrh != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShSldTrh);
      }
      if (ShBotOpn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShBotOpn);
      }
      if (ShSldOpn != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShSldOpn);
      }
      if (ShBotTrd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShBotTrd);
      }
      if (ShSldTrd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShSldTrd);
      }
      if (StkMnyBot != 0D) {
        size += 2 + 8;
      }
      if (StkMnySld != 0D) {
        size += 2 + 8;
      }
      if (DayPnl != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlMidMark != 0F) {
        size += 2 + 4;
      }
      if (OpnPnlClrMark != 0F) {
        size += 2 + 4;
      }
      if (ExDivAmt != 0F) {
        size += 2 + 4;
      }
      if (BorrowRate != 0F) {
        size += 2 + 4;
      }
      if (Beta != 0F) {
        size += 2 + 4;
      }
      if (BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BetaSource);
      }
      if (MarginUDn != 0F) {
        size += 2 + 4;
      }
      if (MarginUUp != 0F) {
        size += 2 + 4;
      }
      if (NumExecutions != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumExecutions);
      }
      if (maxExecDttm_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MaxExecDttm);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StockPositionRecordV5 other) {
      if (other == null) {
        return;
      }
      if (other.Meta_ != null) {
        if (Meta_ == null) {
          Meta = new global::Spiderrock.Protobuf.MessageMetadata();
        }
        Meta.MergeFrom(other.Meta);
      }
      if (other.pkey_ != null) {
        if (pkey_ == null) {
          Pkey = new global::Spiderrock.Protobuf.StockPositionRecordV5.Types.PKey();
        }
        Pkey.MergeFrom(other.Pkey);
      }
      if (other.RiskServerCode.Length != 0) {
        RiskServerCode = other.RiskServerCode;
      }
      if (other.PriAggGroup.Length != 0) {
        PriAggGroup = other.PriAggGroup;
      }
      if (other.SecAggGroup.Length != 0) {
        SecAggGroup = other.SecAggGroup;
      }
      if (other.SymbolType != global::Spiderrock.Protobuf.SymbolType.Unspecified) {
        SymbolType = other.SymbolType;
      }
      if (other.TickValue != 0F) {
        TickValue = other.TickValue;
      }
      if (other.PointValue != 0F) {
        PointValue = other.PointValue;
      }
      if (other.PointCurrency != global::Spiderrock.Protobuf.Currency.Unspecified) {
        PointCurrency = other.PointCurrency;
      }
      if (other.PriceFormat != global::Spiderrock.Protobuf.PriceFormat.Unspecified) {
        PriceFormat = other.PriceFormat;
      }
      if (other.StkPrc != 0F) {
        StkPrc = other.StkPrc;
      }
      if (other.StkBid != 0F) {
        StkBid = other.StkBid;
      }
      if (other.StkAsk != 0F) {
        StkAsk = other.StkAsk;
      }
      if (other.StkMark != 0D) {
        StkMark = other.StkMark;
      }
      if (other.StkMarkErrCodes != global::Spiderrock.Protobuf.MarkErrorCode.Unspecified) {
        StkMarkErrCodes = other.StkMarkErrCodes;
      }
      if (other.StkMarkSource != global::Spiderrock.Protobuf.UMarkSource.Unspecified) {
        StkMarkSource = other.StkMarkSource;
      }
      if (other.StkOpnMidMark != 0D) {
        StkOpnMidMark = other.StkOpnMidMark;
      }
      if (other.StkOpnClrMark != 0D) {
        StkOpnClrMark = other.StkOpnClrMark;
      }
      if (other.StkOpnPosPrv != 0) {
        StkOpnPosPrv = other.StkOpnPosPrv;
      }
      if (other.StkOpnPosClr != 0) {
        StkOpnPosClr = other.StkOpnPosClr;
      }
      if (other.StkOpnPos != 0) {
        StkOpnPos = other.StkOpnPos;
      }
      if (other.StkOpnPosSrc != global::Spiderrock.Protobuf.PositionSource.Unspecified) {
        StkOpnPosSrc = other.StkOpnPosSrc;
      }
      if (other.ShBot != 0) {
        ShBot = other.ShBot;
      }
      if (other.ShSld != 0) {
        ShSld = other.ShSld;
      }
      if (other.ShSldShrt != 0) {
        ShSldShrt = other.ShSldShrt;
      }
      if (other.ShBotHdg != 0) {
        ShBotHdg = other.ShBotHdg;
      }
      if (other.ShSldHdg != 0) {
        ShSldHdg = other.ShSldHdg;
      }
      if (other.ShBotTrh != 0) {
        ShBotTrh = other.ShBotTrh;
      }
      if (other.ShSldTrh != 0) {
        ShSldTrh = other.ShSldTrh;
      }
      if (other.ShBotOpn != 0) {
        ShBotOpn = other.ShBotOpn;
      }
      if (other.ShSldOpn != 0) {
        ShSldOpn = other.ShSldOpn;
      }
      if (other.ShBotTrd != 0) {
        ShBotTrd = other.ShBotTrd;
      }
      if (other.ShSldTrd != 0) {
        ShSldTrd = other.ShSldTrd;
      }
      if (other.StkMnyBot != 0D) {
        StkMnyBot = other.StkMnyBot;
      }
      if (other.StkMnySld != 0D) {
        StkMnySld = other.StkMnySld;
      }
      if (other.DayPnl != 0F) {
        DayPnl = other.DayPnl;
      }
      if (other.OpnPnlMidMark != 0F) {
        OpnPnlMidMark = other.OpnPnlMidMark;
      }
      if (other.OpnPnlClrMark != 0F) {
        OpnPnlClrMark = other.OpnPnlClrMark;
      }
      if (other.ExDivAmt != 0F) {
        ExDivAmt = other.ExDivAmt;
      }
      if (other.BorrowRate != 0F) {
        BorrowRate = other.BorrowRate;
      }
      if (other.Beta != 0F) {
        Beta = other.Beta;
      }
      if (other.BetaSource != global::Spiderrock.Protobuf.BetaSource.Unspecified) {
        BetaSource = other.BetaSource;
      }
      if (other.MarginUDn != 0F) {
        MarginUDn = other.MarginUDn;
      }
      if (other.MarginUUp != 0F) {
        MarginUUp = other.MarginUUp;
      }
      if (other.NumExecutions != 0) {
        NumExecutions = other.NumExecutions;
      }
      if (other.maxExecDttm_ != null) {
        if (maxExecDttm_ == null) {
          MaxExecDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        MaxExecDttm.MergeFrom(other.MaxExecDttm);
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.StockPositionRecordV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 826: {
            RiskServerCode = input.ReadString();
            break;
          }
          case 850: {
            PriAggGroup = input.ReadString();
            break;
          }
          case 874: {
            SecAggGroup = input.ReadString();
            break;
          }
          case 896: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 925: {
            TickValue = input.ReadFloat();
            break;
          }
          case 949: {
            PointValue = input.ReadFloat();
            break;
          }
          case 968: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 992: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1021: {
            StkPrc = input.ReadFloat();
            break;
          }
          case 1045: {
            StkBid = input.ReadFloat();
            break;
          }
          case 1069: {
            StkAsk = input.ReadFloat();
            break;
          }
          case 1089: {
            StkMark = input.ReadDouble();
            break;
          }
          case 1112: {
            StkMarkErrCodes = (global::Spiderrock.Protobuf.MarkErrorCode) input.ReadEnum();
            break;
          }
          case 1136: {
            StkMarkSource = (global::Spiderrock.Protobuf.UMarkSource) input.ReadEnum();
            break;
          }
          case 1161: {
            StkOpnMidMark = input.ReadDouble();
            break;
          }
          case 1185: {
            StkOpnClrMark = input.ReadDouble();
            break;
          }
          case 1208: {
            StkOpnPosPrv = input.ReadInt32();
            break;
          }
          case 1232: {
            StkOpnPosClr = input.ReadInt32();
            break;
          }
          case 1256: {
            StkOpnPos = input.ReadInt32();
            break;
          }
          case 1280: {
            StkOpnPosSrc = (global::Spiderrock.Protobuf.PositionSource) input.ReadEnum();
            break;
          }
          case 1304: {
            ShBot = input.ReadInt32();
            break;
          }
          case 1328: {
            ShSld = input.ReadInt32();
            break;
          }
          case 1352: {
            ShSldShrt = input.ReadInt32();
            break;
          }
          case 1376: {
            ShBotHdg = input.ReadInt32();
            break;
          }
          case 1400: {
            ShSldHdg = input.ReadInt32();
            break;
          }
          case 1424: {
            ShBotTrh = input.ReadInt32();
            break;
          }
          case 1448: {
            ShSldTrh = input.ReadInt32();
            break;
          }
          case 1472: {
            ShBotOpn = input.ReadInt32();
            break;
          }
          case 1496: {
            ShSldOpn = input.ReadInt32();
            break;
          }
          case 1520: {
            ShBotTrd = input.ReadInt32();
            break;
          }
          case 1544: {
            ShSldTrd = input.ReadInt32();
            break;
          }
          case 1569: {
            StkMnyBot = input.ReadDouble();
            break;
          }
          case 1593: {
            StkMnySld = input.ReadDouble();
            break;
          }
          case 1621: {
            DayPnl = input.ReadFloat();
            break;
          }
          case 1645: {
            OpnPnlMidMark = input.ReadFloat();
            break;
          }
          case 1669: {
            OpnPnlClrMark = input.ReadFloat();
            break;
          }
          case 1693: {
            ExDivAmt = input.ReadFloat();
            break;
          }
          case 1717: {
            BorrowRate = input.ReadFloat();
            break;
          }
          case 1741: {
            Beta = input.ReadFloat();
            break;
          }
          case 1760: {
            BetaSource = (global::Spiderrock.Protobuf.BetaSource) input.ReadEnum();
            break;
          }
          case 1784: {
            NumExecutions = input.ReadInt32();
            break;
          }
          case 1810: {
            if (maxExecDttm_ == null) {
              MaxExecDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxExecDttm);
            break;
          }
          case 1834: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1845: {
            MarginUDn = input.ReadFloat();
            break;
          }
          case 1853: {
            MarginUUp = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (Meta_ == null) {
              Meta = new global::Spiderrock.Protobuf.MessageMetadata();
            }
            input.ReadMessage(Meta);
            break;
          }
          case 18: {
            if (pkey_ == null) {
              Pkey = new global::Spiderrock.Protobuf.StockPositionRecordV5.Types.PKey();
            }
            input.ReadMessage(Pkey);
            break;
          }
          case 826: {
            RiskServerCode = input.ReadString();
            break;
          }
          case 850: {
            PriAggGroup = input.ReadString();
            break;
          }
          case 874: {
            SecAggGroup = input.ReadString();
            break;
          }
          case 896: {
            SymbolType = (global::Spiderrock.Protobuf.SymbolType) input.ReadEnum();
            break;
          }
          case 925: {
            TickValue = input.ReadFloat();
            break;
          }
          case 949: {
            PointValue = input.ReadFloat();
            break;
          }
          case 968: {
            PointCurrency = (global::Spiderrock.Protobuf.Currency) input.ReadEnum();
            break;
          }
          case 992: {
            PriceFormat = (global::Spiderrock.Protobuf.PriceFormat) input.ReadEnum();
            break;
          }
          case 1021: {
            StkPrc = input.ReadFloat();
            break;
          }
          case 1045: {
            StkBid = input.ReadFloat();
            break;
          }
          case 1069: {
            StkAsk = input.ReadFloat();
            break;
          }
          case 1089: {
            StkMark = input.ReadDouble();
            break;
          }
          case 1112: {
            StkMarkErrCodes = (global::Spiderrock.Protobuf.MarkErrorCode) input.ReadEnum();
            break;
          }
          case 1136: {
            StkMarkSource = (global::Spiderrock.Protobuf.UMarkSource) input.ReadEnum();
            break;
          }
          case 1161: {
            StkOpnMidMark = input.ReadDouble();
            break;
          }
          case 1185: {
            StkOpnClrMark = input.ReadDouble();
            break;
          }
          case 1208: {
            StkOpnPosPrv = input.ReadInt32();
            break;
          }
          case 1232: {
            StkOpnPosClr = input.ReadInt32();
            break;
          }
          case 1256: {
            StkOpnPos = input.ReadInt32();
            break;
          }
          case 1280: {
            StkOpnPosSrc = (global::Spiderrock.Protobuf.PositionSource) input.ReadEnum();
            break;
          }
          case 1304: {
            ShBot = input.ReadInt32();
            break;
          }
          case 1328: {
            ShSld = input.ReadInt32();
            break;
          }
          case 1352: {
            ShSldShrt = input.ReadInt32();
            break;
          }
          case 1376: {
            ShBotHdg = input.ReadInt32();
            break;
          }
          case 1400: {
            ShSldHdg = input.ReadInt32();
            break;
          }
          case 1424: {
            ShBotTrh = input.ReadInt32();
            break;
          }
          case 1448: {
            ShSldTrh = input.ReadInt32();
            break;
          }
          case 1472: {
            ShBotOpn = input.ReadInt32();
            break;
          }
          case 1496: {
            ShSldOpn = input.ReadInt32();
            break;
          }
          case 1520: {
            ShBotTrd = input.ReadInt32();
            break;
          }
          case 1544: {
            ShSldTrd = input.ReadInt32();
            break;
          }
          case 1569: {
            StkMnyBot = input.ReadDouble();
            break;
          }
          case 1593: {
            StkMnySld = input.ReadDouble();
            break;
          }
          case 1621: {
            DayPnl = input.ReadFloat();
            break;
          }
          case 1645: {
            OpnPnlMidMark = input.ReadFloat();
            break;
          }
          case 1669: {
            OpnPnlClrMark = input.ReadFloat();
            break;
          }
          case 1693: {
            ExDivAmt = input.ReadFloat();
            break;
          }
          case 1717: {
            BorrowRate = input.ReadFloat();
            break;
          }
          case 1741: {
            Beta = input.ReadFloat();
            break;
          }
          case 1760: {
            BetaSource = (global::Spiderrock.Protobuf.BetaSource) input.ReadEnum();
            break;
          }
          case 1784: {
            NumExecutions = input.ReadInt32();
            break;
          }
          case 1810: {
            if (maxExecDttm_ == null) {
              MaxExecDttm = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(MaxExecDttm);
            break;
          }
          case 1834: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 1845: {
            MarginUDn = input.ReadFloat();
            break;
          }
          case 1853: {
            MarginUUp = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the StockPositionRecordV5 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class PKey : pb::IMessage<PKey>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PKey> _parser = new pb::MessageParser<PKey>(() => new PKey());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spiderrock.Protobuf.StockPositionRecordV5.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey(PKey other) : this() {
          ticker_ = other.ticker_ != null ? other.ticker_.Clone() : null;
          accnt_ = other.accnt_;
          tradeDate_ = other.tradeDate_ != null ? other.tradeDate_.Clone() : null;
          riskSession_ = other.riskSession_;
          clientFirm_ = other.clientFirm_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PKey Clone() {
          return new PKey(this);
        }

        /// <summary>Field number for the "ticker" field.</summary>
        public const int TickerFieldNumber = 10;
        private global::Spiderrock.Protobuf.TickerKey ticker_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.TickerKey Ticker {
          get { return ticker_; }
          set {
            ticker_ = value;
          }
        }

        /// <summary>Field number for the "accnt" field.</summary>
        public const int AccntFieldNumber = 11;
        private string accnt_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Accnt {
          get { return accnt_; }
          set {
            accnt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "trade_date" field.</summary>
        public const int TradeDateFieldNumber = 12;
        private global::Spiderrock.Protobuf.DateKey tradeDate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.DateKey TradeDate {
          get { return tradeDate_; }
          set {
            tradeDate_ = value;
          }
        }

        /// <summary>Field number for the "risk_session" field.</summary>
        public const int RiskSessionFieldNumber = 13;
        private global::Spiderrock.Protobuf.RiskSession riskSession_ = global::Spiderrock.Protobuf.RiskSession.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spiderrock.Protobuf.RiskSession RiskSession {
          get { return riskSession_; }
          set {
            riskSession_ = value;
          }
        }

        /// <summary>Field number for the "client_firm" field.</summary>
        public const int ClientFirmFieldNumber = 14;
        private string clientFirm_ = "";
        /// <summary>
        /// SR assigned client firm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ClientFirm {
          get { return clientFirm_; }
          set {
            clientFirm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as PKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PKey other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Ticker, other.Ticker)) return false;
          if (Accnt != other.Accnt) return false;
          if (!object.Equals(TradeDate, other.TradeDate)) return false;
          if (RiskSession != other.RiskSession) return false;
          if (ClientFirm != other.ClientFirm) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ticker_ != null) hash ^= Ticker.GetHashCode();
          if (Accnt.Length != 0) hash ^= Accnt.GetHashCode();
          if (tradeDate_ != null) hash ^= TradeDate.GetHashCode();
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) hash ^= RiskSession.GetHashCode();
          if (ClientFirm.Length != 0) hash ^= ClientFirm.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (Accnt.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(Accnt);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) RiskSession);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ticker_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(Ticker);
          }
          if (Accnt.Length != 0) {
            output.WriteRawTag(90);
            output.WriteString(Accnt);
          }
          if (tradeDate_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            output.WriteRawTag(104);
            output.WriteEnum((int) RiskSession);
          }
          if (ClientFirm.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(ClientFirm);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ticker_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ticker);
          }
          if (Accnt.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Accnt);
          }
          if (tradeDate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TradeDate);
          }
          if (RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RiskSession);
          }
          if (ClientFirm.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientFirm);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PKey other) {
          if (other == null) {
            return;
          }
          if (other.ticker_ != null) {
            if (ticker_ == null) {
              Ticker = new global::Spiderrock.Protobuf.TickerKey();
            }
            Ticker.MergeFrom(other.Ticker);
          }
          if (other.Accnt.Length != 0) {
            Accnt = other.Accnt;
          }
          if (other.tradeDate_ != null) {
            if (tradeDate_ == null) {
              TradeDate = new global::Spiderrock.Protobuf.DateKey();
            }
            TradeDate.MergeFrom(other.TradeDate);
          }
          if (other.RiskSession != global::Spiderrock.Protobuf.RiskSession.Unspecified) {
            RiskSession = other.RiskSession;
          }
          if (other.ClientFirm.Length != 0) {
            ClientFirm = other.ClientFirm;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 90: {
                Accnt = input.ReadString();
                break;
              }
              case 98: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
              case 104: {
                RiskSession = (global::Spiderrock.Protobuf.RiskSession) input.ReadEnum();
                break;
              }
              case 114: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 82: {
                if (ticker_ == null) {
                  Ticker = new global::Spiderrock.Protobuf.TickerKey();
                }
                input.ReadMessage(Ticker);
                break;
              }
              case 90: {
                Accnt = input.ReadString();
                break;
              }
              case 98: {
                if (tradeDate_ == null) {
                  TradeDate = new global::Spiderrock.Protobuf.DateKey();
                }
                input.ReadMessage(TradeDate);
                break;
              }
              case 104: {
                RiskSession = (global::Spiderrock.Protobuf.RiskSession) input.ReadEnum();
                break;
              }
              case 114: {
                ClientFirm = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
